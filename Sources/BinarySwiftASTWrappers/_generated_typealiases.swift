//
//  typealiases.swift
//
//  Created by Joseph Hinkle on 3/26/21.
//  Copyright Â© 2021 App Maker Software LLC. All rights reserved.
//
//  DO NOT EDIT .swift file, it is automatically generated from the gyb file
//

import BinarySwiftAST


// Protocols
public typealias LiveASTNodeCanCastAsAnyDeclSyntax = CanCastAsAnyDeclSyntax
public typealias ArraySliceASTNodeCanCastAsAnyDeclSyntax = CanCastAsAnyDeclSyntax
public typealias LiveASTNodeCanCastAsAnyExprSyntax = CanCastAsAnyExprSyntax
public typealias ArraySliceASTNodeCanCastAsAnyExprSyntax = CanCastAsAnyExprSyntax
public typealias LiveASTNodeCanCastAsAnyStmtSyntax = CanCastAsAnyStmtSyntax
public typealias ArraySliceASTNodeCanCastAsAnyStmtSyntax = CanCastAsAnyStmtSyntax
public typealias LiveASTNodeCanCastAsAnyTypeSyntax = CanCastAsAnyTypeSyntax
public typealias ArraySliceASTNodeCanCastAsAnyTypeSyntax = CanCastAsAnyTypeSyntax
public typealias LiveASTNodeCanCastAsAnyPatternSyntax = CanCastAsAnyPatternSyntax
public typealias ArraySliceASTNodeCanCastAsAnyPatternSyntax = CanCastAsAnyPatternSyntax

// Anys
public typealias LiveASTNodeAnyDeclSyntax = AnyDeclSyntax
public typealias ArraySliceASTNodeAnyDeclSyntax = AnyDeclSyntax
public typealias LiveASTNodeAnyExprSyntax = AnyExprSyntax
public typealias ArraySliceASTNodeAnyExprSyntax = AnyExprSyntax
public typealias LiveASTNodeAnyStmtSyntax = AnyStmtSyntax
public typealias ArraySliceASTNodeAnyStmtSyntax = AnyStmtSyntax
public typealias LiveASTNodeAnyTypeSyntax = AnyTypeSyntax
public typealias ArraySliceASTNodeAnyTypeSyntax = AnyTypeSyntax
public typealias LiveASTNodeAnyPatternSyntax = AnyPatternSyntax
public typealias ArraySliceASTNodeAnyPatternSyntax = AnyPatternSyntax


// Structs
public typealias LiveASTNodeCodeBlockItemListSyntax = CodeBlockItemListSyntax
public typealias ArraySliceASTNodeCodeBlockItemListSyntax = CodeBlockItemListSyntax
public typealias LiveASTNodeTupleExprElementListSyntax = TupleExprElementListSyntax
public typealias ArraySliceASTNodeTupleExprElementListSyntax = TupleExprElementListSyntax
public typealias LiveASTNodeArrayElementListSyntax = ArrayElementListSyntax
public typealias ArraySliceASTNodeArrayElementListSyntax = ArrayElementListSyntax
public typealias LiveASTNodeDictionaryElementListSyntax = DictionaryElementListSyntax
public typealias ArraySliceASTNodeDictionaryElementListSyntax = DictionaryElementListSyntax
public typealias LiveASTNodeStringLiteralSegmentsSyntax = StringLiteralSegmentsSyntax
public typealias ArraySliceASTNodeStringLiteralSegmentsSyntax = StringLiteralSegmentsSyntax
public typealias LiveASTNodeDeclNameArgumentListSyntax = DeclNameArgumentListSyntax
public typealias ArraySliceASTNodeDeclNameArgumentListSyntax = DeclNameArgumentListSyntax
public typealias LiveASTNodeExprListSyntax = ExprListSyntax
public typealias ArraySliceASTNodeExprListSyntax = ExprListSyntax
public typealias LiveASTNodeClosureCaptureItemListSyntax = ClosureCaptureItemListSyntax
public typealias ArraySliceASTNodeClosureCaptureItemListSyntax = ClosureCaptureItemListSyntax
public typealias LiveASTNodeClosureParamListSyntax = ClosureParamListSyntax
public typealias ArraySliceASTNodeClosureParamListSyntax = ClosureParamListSyntax
public typealias LiveASTNodeMultipleTrailingClosureElementListSyntax = MultipleTrailingClosureElementListSyntax
public typealias ArraySliceASTNodeMultipleTrailingClosureElementListSyntax = MultipleTrailingClosureElementListSyntax
public typealias LiveASTNodeObjcNameSyntax = ObjcNameSyntax
public typealias ArraySliceASTNodeObjcNameSyntax = ObjcNameSyntax
public typealias LiveASTNodeFunctionParameterListSyntax = FunctionParameterListSyntax
public typealias ArraySliceASTNodeFunctionParameterListSyntax = FunctionParameterListSyntax
public typealias LiveASTNodeIfConfigClauseListSyntax = IfConfigClauseListSyntax
public typealias ArraySliceASTNodeIfConfigClauseListSyntax = IfConfigClauseListSyntax
public typealias LiveASTNodeInheritedTypeListSyntax = InheritedTypeListSyntax
public typealias ArraySliceASTNodeInheritedTypeListSyntax = InheritedTypeListSyntax
public typealias LiveASTNodeMemberDeclListSyntax = MemberDeclListSyntax
public typealias ArraySliceASTNodeMemberDeclListSyntax = MemberDeclListSyntax
public typealias LiveASTNodeModifierListSyntax = ModifierListSyntax
public typealias ArraySliceASTNodeModifierListSyntax = ModifierListSyntax
public typealias LiveASTNodeAccessPathSyntax = AccessPathSyntax
public typealias ArraySliceASTNodeAccessPathSyntax = AccessPathSyntax
public typealias LiveASTNodeAccessorListSyntax = AccessorListSyntax
public typealias ArraySliceASTNodeAccessorListSyntax = AccessorListSyntax
public typealias LiveASTNodePatternBindingListSyntax = PatternBindingListSyntax
public typealias ArraySliceASTNodePatternBindingListSyntax = PatternBindingListSyntax
public typealias LiveASTNodeEnumCaseElementListSyntax = EnumCaseElementListSyntax
public typealias ArraySliceASTNodeEnumCaseElementListSyntax = EnumCaseElementListSyntax
public typealias LiveASTNodeIdentifierListSyntax = IdentifierListSyntax
public typealias ArraySliceASTNodeIdentifierListSyntax = IdentifierListSyntax
public typealias LiveASTNodePrecedenceGroupAttributeListSyntax = PrecedenceGroupAttributeListSyntax
public typealias ArraySliceASTNodePrecedenceGroupAttributeListSyntax = PrecedenceGroupAttributeListSyntax
public typealias LiveASTNodePrecedenceGroupNameListSyntax = PrecedenceGroupNameListSyntax
public typealias ArraySliceASTNodePrecedenceGroupNameListSyntax = PrecedenceGroupNameListSyntax
public typealias LiveASTNodeTokenListSyntax = TokenListSyntax
public typealias ArraySliceASTNodeTokenListSyntax = TokenListSyntax
public typealias LiveASTNodeNonEmptyTokenListSyntax = NonEmptyTokenListSyntax
public typealias ArraySliceASTNodeNonEmptyTokenListSyntax = NonEmptyTokenListSyntax
public typealias LiveASTNodeAttributeListSyntax = AttributeListSyntax
public typealias ArraySliceASTNodeAttributeListSyntax = AttributeListSyntax
public typealias LiveASTNodeSpecializeAttributeSpecListSyntax = SpecializeAttributeSpecListSyntax
public typealias ArraySliceASTNodeSpecializeAttributeSpecListSyntax = SpecializeAttributeSpecListSyntax
public typealias LiveASTNodeObjCSelectorSyntax = ObjCSelectorSyntax
public typealias ArraySliceASTNodeObjCSelectorSyntax = ObjCSelectorSyntax
public typealias LiveASTNodeDifferentiabilityParamListSyntax = DifferentiabilityParamListSyntax
public typealias ArraySliceASTNodeDifferentiabilityParamListSyntax = DifferentiabilityParamListSyntax
public typealias LiveASTNodeSwitchCaseListSyntax = SwitchCaseListSyntax
public typealias ArraySliceASTNodeSwitchCaseListSyntax = SwitchCaseListSyntax
public typealias LiveASTNodeCatchClauseListSyntax = CatchClauseListSyntax
public typealias ArraySliceASTNodeCatchClauseListSyntax = CatchClauseListSyntax
public typealias LiveASTNodeCaseItemListSyntax = CaseItemListSyntax
public typealias ArraySliceASTNodeCaseItemListSyntax = CaseItemListSyntax
public typealias LiveASTNodeCatchItemListSyntax = CatchItemListSyntax
public typealias ArraySliceASTNodeCatchItemListSyntax = CatchItemListSyntax
public typealias LiveASTNodeConditionElementListSyntax = ConditionElementListSyntax
public typealias ArraySliceASTNodeConditionElementListSyntax = ConditionElementListSyntax
public typealias LiveASTNodeGenericRequirementListSyntax = GenericRequirementListSyntax
public typealias ArraySliceASTNodeGenericRequirementListSyntax = GenericRequirementListSyntax
public typealias LiveASTNodeGenericParameterListSyntax = GenericParameterListSyntax
public typealias ArraySliceASTNodeGenericParameterListSyntax = GenericParameterListSyntax
public typealias LiveASTNodeCompositionTypeElementListSyntax = CompositionTypeElementListSyntax
public typealias ArraySliceASTNodeCompositionTypeElementListSyntax = CompositionTypeElementListSyntax
public typealias LiveASTNodeTupleTypeElementListSyntax = TupleTypeElementListSyntax
public typealias ArraySliceASTNodeTupleTypeElementListSyntax = TupleTypeElementListSyntax
public typealias LiveASTNodeGenericArgumentListSyntax = GenericArgumentListSyntax
public typealias ArraySliceASTNodeGenericArgumentListSyntax = GenericArgumentListSyntax
public typealias LiveASTNodeTuplePatternElementListSyntax = TuplePatternElementListSyntax
public typealias ArraySliceASTNodeTuplePatternElementListSyntax = TuplePatternElementListSyntax
public typealias LiveASTNodeAvailabilitySpecListSyntax = AvailabilitySpecListSyntax
public typealias ArraySliceASTNodeAvailabilitySpecListSyntax = AvailabilitySpecListSyntax
public typealias LiveASTNodePoundColumnExprSyntax = PoundColumnExprSyntax
public typealias ArraySliceASTNodePoundColumnExprSyntax = PoundColumnExprSyntax
public typealias LiveASTNodeSuperRefExprSyntax = SuperRefExprSyntax
public typealias ArraySliceASTNodeSuperRefExprSyntax = SuperRefExprSyntax
public typealias LiveASTNodeNilLiteralExprSyntax = NilLiteralExprSyntax
public typealias ArraySliceASTNodeNilLiteralExprSyntax = NilLiteralExprSyntax
public typealias LiveASTNodeDiscardAssignmentExprSyntax = DiscardAssignmentExprSyntax
public typealias ArraySliceASTNodeDiscardAssignmentExprSyntax = DiscardAssignmentExprSyntax
public typealias LiveASTNodeAssignmentExprSyntax = AssignmentExprSyntax
public typealias ArraySliceASTNodeAssignmentExprSyntax = AssignmentExprSyntax
public typealias LiveASTNodeSequenceExprSyntax = SequenceExprSyntax
public typealias ArraySliceASTNodeSequenceExprSyntax = SequenceExprSyntax
public typealias LiveASTNodePoundLineExprSyntax = PoundLineExprSyntax
public typealias ArraySliceASTNodePoundLineExprSyntax = PoundLineExprSyntax
public typealias LiveASTNodePoundFileExprSyntax = PoundFileExprSyntax
public typealias ArraySliceASTNodePoundFileExprSyntax = PoundFileExprSyntax
public typealias LiveASTNodePoundFileIDExprSyntax = PoundFileIDExprSyntax
public typealias ArraySliceASTNodePoundFileIDExprSyntax = PoundFileIDExprSyntax
public typealias LiveASTNodePoundFilePathExprSyntax = PoundFilePathExprSyntax
public typealias ArraySliceASTNodePoundFilePathExprSyntax = PoundFilePathExprSyntax
public typealias LiveASTNodePoundFunctionExprSyntax = PoundFunctionExprSyntax
public typealias ArraySliceASTNodePoundFunctionExprSyntax = PoundFunctionExprSyntax
public typealias LiveASTNodePoundDsohandleExprSyntax = PoundDsohandleExprSyntax
public typealias ArraySliceASTNodePoundDsohandleExprSyntax = PoundDsohandleExprSyntax
public typealias LiveASTNodeBinaryOperatorExprSyntax = BinaryOperatorExprSyntax
public typealias ArraySliceASTNodeBinaryOperatorExprSyntax = BinaryOperatorExprSyntax
public typealias LiveASTNodeFloatLiteralExprSyntax = FloatLiteralExprSyntax
public typealias ArraySliceASTNodeFloatLiteralExprSyntax = FloatLiteralExprSyntax
public typealias LiveASTNodeIntegerLiteralExprSyntax = IntegerLiteralExprSyntax
public typealias ArraySliceASTNodeIntegerLiteralExprSyntax = IntegerLiteralExprSyntax
public typealias LiveASTNodeBooleanLiteralExprSyntax = BooleanLiteralExprSyntax
public typealias ArraySliceASTNodeBooleanLiteralExprSyntax = BooleanLiteralExprSyntax
public typealias LiveASTNodeTypeExprSyntax = TypeExprSyntax
public typealias ArraySliceASTNodeTypeExprSyntax = TypeExprSyntax
public typealias LiveASTNodeUnresolvedPatternExprSyntax = UnresolvedPatternExprSyntax
public typealias ArraySliceASTNodeUnresolvedPatternExprSyntax = UnresolvedPatternExprSyntax
public typealias LiveASTNodeStringSegmentSyntax = StringSegmentSyntax
public typealias ArraySliceASTNodeStringSegmentSyntax = StringSegmentSyntax
public typealias LiveASTNodeKeyPathBaseExprSyntax = KeyPathBaseExprSyntax
public typealias ArraySliceASTNodeKeyPathBaseExprSyntax = KeyPathBaseExprSyntax
public typealias LiveASTNodeEditorPlaceholderExprSyntax = EditorPlaceholderExprSyntax
public typealias ArraySliceASTNodeEditorPlaceholderExprSyntax = EditorPlaceholderExprSyntax
public typealias LiveASTNodeExpressionStmtSyntax = ExpressionStmtSyntax
public typealias ArraySliceASTNodeExpressionStmtSyntax = ExpressionStmtSyntax
public typealias LiveASTNodeFallthroughStmtSyntax = FallthroughStmtSyntax
public typealias ArraySliceASTNodeFallthroughStmtSyntax = FallthroughStmtSyntax
public typealias LiveASTNodeDeclarationStmtSyntax = DeclarationStmtSyntax
public typealias ArraySliceASTNodeDeclarationStmtSyntax = DeclarationStmtSyntax
public typealias LiveASTNodeElseIfContinuationSyntax = ElseIfContinuationSyntax
public typealias ArraySliceASTNodeElseIfContinuationSyntax = ElseIfContinuationSyntax
public typealias LiveASTNodeClassRestrictionTypeSyntax = ClassRestrictionTypeSyntax
public typealias ArraySliceASTNodeClassRestrictionTypeSyntax = ClassRestrictionTypeSyntax
public typealias LiveASTNodeCompositionTypeSyntax = CompositionTypeSyntax
public typealias ArraySliceASTNodeCompositionTypeSyntax = CompositionTypeSyntax
public typealias LiveASTNodeIdentifierPatternSyntax = IdentifierPatternSyntax
public typealias ArraySliceASTNodeIdentifierPatternSyntax = IdentifierPatternSyntax
public typealias LiveASTNodeExpressionPatternSyntax = ExpressionPatternSyntax
public typealias ArraySliceASTNodeExpressionPatternSyntax = ExpressionPatternSyntax
public typealias LiveASTNodeInOutExprSyntax = InOutExprSyntax
public typealias ArraySliceASTNodeInOutExprSyntax = InOutExprSyntax
public typealias LiveASTNodeAwaitExprSyntax = AwaitExprSyntax
public typealias ArraySliceASTNodeAwaitExprSyntax = AwaitExprSyntax
public typealias LiveASTNodeDeclNameArgumentSyntax = DeclNameArgumentSyntax
public typealias ArraySliceASTNodeDeclNameArgumentSyntax = DeclNameArgumentSyntax
public typealias LiveASTNodeIdentifierExprSyntax = IdentifierExprSyntax
public typealias ArraySliceASTNodeIdentifierExprSyntax = IdentifierExprSyntax
public typealias LiveASTNodeSymbolicReferenceExprSyntax = SymbolicReferenceExprSyntax
public typealias ArraySliceASTNodeSymbolicReferenceExprSyntax = SymbolicReferenceExprSyntax
public typealias LiveASTNodePrefixOperatorExprSyntax = PrefixOperatorExprSyntax
public typealias ArraySliceASTNodePrefixOperatorExprSyntax = PrefixOperatorExprSyntax
public typealias LiveASTNodeArrayElementSyntax = ArrayElementSyntax
public typealias ArraySliceASTNodeArrayElementSyntax = ArrayElementSyntax
public typealias LiveASTNodeIsExprSyntax = IsExprSyntax
public typealias ArraySliceASTNodeIsExprSyntax = IsExprSyntax
public typealias LiveASTNodeClosureParamSyntax = ClosureParamSyntax
public typealias ArraySliceASTNodeClosureParamSyntax = ClosureParamSyntax
public typealias LiveASTNodeOptionalChainingExprSyntax = OptionalChainingExprSyntax
public typealias ArraySliceASTNodeOptionalChainingExprSyntax = OptionalChainingExprSyntax
public typealias LiveASTNodeForcedValueExprSyntax = ForcedValueExprSyntax
public typealias ArraySliceASTNodeForcedValueExprSyntax = ForcedValueExprSyntax
public typealias LiveASTNodePostfixUnaryExprSyntax = PostfixUnaryExprSyntax
public typealias ArraySliceASTNodePostfixUnaryExprSyntax = PostfixUnaryExprSyntax
public typealias LiveASTNodeSpecializeExprSyntax = SpecializeExprSyntax
public typealias ArraySliceASTNodeSpecializeExprSyntax = SpecializeExprSyntax
public typealias LiveASTNodeObjcNamePieceSyntax = ObjcNamePieceSyntax
public typealias ArraySliceASTNodeObjcNamePieceSyntax = ObjcNamePieceSyntax
public typealias LiveASTNodePostfixIfConfigExprSyntax = PostfixIfConfigExprSyntax
public typealias ArraySliceASTNodePostfixIfConfigExprSyntax = PostfixIfConfigExprSyntax
public typealias LiveASTNodeTypeInitializerClauseSyntax = TypeInitializerClauseSyntax
public typealias ArraySliceASTNodeTypeInitializerClauseSyntax = TypeInitializerClauseSyntax
public typealias LiveASTNodeReturnClauseSyntax = ReturnClauseSyntax
public typealias ArraySliceASTNodeReturnClauseSyntax = ReturnClauseSyntax
public typealias LiveASTNodeIfConfigDeclSyntax = IfConfigDeclSyntax
public typealias ArraySliceASTNodeIfConfigDeclSyntax = IfConfigDeclSyntax
public typealias LiveASTNodeInheritedTypeSyntax = InheritedTypeSyntax
public typealias ArraySliceASTNodeInheritedTypeSyntax = InheritedTypeSyntax
public typealias LiveASTNodeTypeInheritanceClauseSyntax = TypeInheritanceClauseSyntax
public typealias ArraySliceASTNodeTypeInheritanceClauseSyntax = TypeInheritanceClauseSyntax
public typealias LiveASTNodeMemberDeclListItemSyntax = MemberDeclListItemSyntax
public typealias ArraySliceASTNodeMemberDeclListItemSyntax = MemberDeclListItemSyntax
public typealias LiveASTNodeSourceFileSyntax = SourceFileSyntax
public typealias ArraySliceASTNodeSourceFileSyntax = SourceFileSyntax
public typealias LiveASTNodeInitializerClauseSyntax = InitializerClauseSyntax
public typealias ArraySliceASTNodeInitializerClauseSyntax = InitializerClauseSyntax
public typealias LiveASTNodeAccessPathComponentSyntax = AccessPathComponentSyntax
public typealias ArraySliceASTNodeAccessPathComponentSyntax = AccessPathComponentSyntax
public typealias LiveASTNodeOperatorPrecedenceAndTypesSyntax = OperatorPrecedenceAndTypesSyntax
public typealias ArraySliceASTNodeOperatorPrecedenceAndTypesSyntax = OperatorPrecedenceAndTypesSyntax
public typealias LiveASTNodePrecedenceGroupNameElementSyntax = PrecedenceGroupNameElementSyntax
public typealias ArraySliceASTNodePrecedenceGroupNameElementSyntax = PrecedenceGroupNameElementSyntax
public typealias LiveASTNodeDeclNameSyntax = DeclNameSyntax
public typealias ArraySliceASTNodeDeclNameSyntax = DeclNameSyntax
public typealias LiveASTNodeObjCSelectorPieceSyntax = ObjCSelectorPieceSyntax
public typealias ArraySliceASTNodeObjCSelectorPieceSyntax = ObjCSelectorPieceSyntax
public typealias LiveASTNodeDifferentiabilityParamSyntax = DifferentiabilityParamSyntax
public typealias ArraySliceASTNodeDifferentiabilityParamSyntax = DifferentiabilityParamSyntax
public typealias LiveASTNodeFunctionDeclNameSyntax = FunctionDeclNameSyntax
public typealias ArraySliceASTNodeFunctionDeclNameSyntax = FunctionDeclNameSyntax
public typealias LiveASTNodeContinueStmtSyntax = ContinueStmtSyntax
public typealias ArraySliceASTNodeContinueStmtSyntax = ContinueStmtSyntax
public typealias LiveASTNodeDeferStmtSyntax = DeferStmtSyntax
public typealias ArraySliceASTNodeDeferStmtSyntax = DeferStmtSyntax
public typealias LiveASTNodeWhereClauseSyntax = WhereClauseSyntax
public typealias ArraySliceASTNodeWhereClauseSyntax = WhereClauseSyntax
public typealias LiveASTNodeReturnStmtSyntax = ReturnStmtSyntax
public typealias ArraySliceASTNodeReturnStmtSyntax = ReturnStmtSyntax
public typealias LiveASTNodeYieldStmtSyntax = YieldStmtSyntax
public typealias ArraySliceASTNodeYieldStmtSyntax = YieldStmtSyntax
public typealias LiveASTNodeBreakStmtSyntax = BreakStmtSyntax
public typealias ArraySliceASTNodeBreakStmtSyntax = BreakStmtSyntax
public typealias LiveASTNodeConditionElementSyntax = ConditionElementSyntax
public typealias ArraySliceASTNodeConditionElementSyntax = ConditionElementSyntax
public typealias LiveASTNodeThrowStmtSyntax = ThrowStmtSyntax
public typealias ArraySliceASTNodeThrowStmtSyntax = ThrowStmtSyntax
public typealias LiveASTNodeElseBlockSyntax = ElseBlockSyntax
public typealias ArraySliceASTNodeElseBlockSyntax = ElseBlockSyntax
public typealias LiveASTNodeSwitchDefaultLabelSyntax = SwitchDefaultLabelSyntax
public typealias ArraySliceASTNodeSwitchDefaultLabelSyntax = SwitchDefaultLabelSyntax
public typealias LiveASTNodeGenericWhereClauseSyntax = GenericWhereClauseSyntax
public typealias ArraySliceASTNodeGenericWhereClauseSyntax = GenericWhereClauseSyntax
public typealias LiveASTNodeGenericRequirementSyntax = GenericRequirementSyntax
public typealias ArraySliceASTNodeGenericRequirementSyntax = GenericRequirementSyntax
public typealias LiveASTNodeSimpleTypeIdentifierSyntax = SimpleTypeIdentifierSyntax
public typealias ArraySliceASTNodeSimpleTypeIdentifierSyntax = SimpleTypeIdentifierSyntax
public typealias LiveASTNodeOptionalTypeSyntax = OptionalTypeSyntax
public typealias ArraySliceASTNodeOptionalTypeSyntax = OptionalTypeSyntax
public typealias LiveASTNodeSomeTypeSyntax = SomeTypeSyntax
public typealias ArraySliceASTNodeSomeTypeSyntax = SomeTypeSyntax
public typealias LiveASTNodeImplicitlyUnwrappedOptionalTypeSyntax = ImplicitlyUnwrappedOptionalTypeSyntax
public typealias ArraySliceASTNodeImplicitlyUnwrappedOptionalTypeSyntax = ImplicitlyUnwrappedOptionalTypeSyntax
public typealias LiveASTNodeCompositionTypeElementSyntax = CompositionTypeElementSyntax
public typealias ArraySliceASTNodeCompositionTypeElementSyntax = CompositionTypeElementSyntax
public typealias LiveASTNodeGenericArgumentSyntax = GenericArgumentSyntax
public typealias ArraySliceASTNodeGenericArgumentSyntax = GenericArgumentSyntax
public typealias LiveASTNodeTypeAnnotationSyntax = TypeAnnotationSyntax
public typealias ArraySliceASTNodeTypeAnnotationSyntax = TypeAnnotationSyntax
public typealias LiveASTNodeIsTypePatternSyntax = IsTypePatternSyntax
public typealias ArraySliceASTNodeIsTypePatternSyntax = IsTypePatternSyntax
public typealias LiveASTNodeOptionalPatternSyntax = OptionalPatternSyntax
public typealias ArraySliceASTNodeOptionalPatternSyntax = OptionalPatternSyntax
public typealias LiveASTNodeWildcardPatternSyntax = WildcardPatternSyntax
public typealias ArraySliceASTNodeWildcardPatternSyntax = WildcardPatternSyntax
public typealias LiveASTNodeValueBindingPatternSyntax = ValueBindingPatternSyntax
public typealias ArraySliceASTNodeValueBindingPatternSyntax = ValueBindingPatternSyntax
public typealias LiveASTNodeAvailabilityArgumentSyntax = AvailabilityArgumentSyntax
public typealias ArraySliceASTNodeAvailabilityArgumentSyntax = AvailabilityArgumentSyntax
public typealias LiveASTNodeAvailabilityVersionRestrictionSyntax = AvailabilityVersionRestrictionSyntax
public typealias ArraySliceASTNodeAvailabilityVersionRestrictionSyntax = AvailabilityVersionRestrictionSyntax
public typealias LiveASTNodeCodeBlockItemSyntax = CodeBlockItemSyntax
public typealias ArraySliceASTNodeCodeBlockItemSyntax = CodeBlockItemSyntax
public typealias LiveASTNodeCodeBlockSyntax = CodeBlockSyntax
public typealias ArraySliceASTNodeCodeBlockSyntax = CodeBlockSyntax
public typealias LiveASTNodeTryExprSyntax = TryExprSyntax
public typealias ArraySliceASTNodeTryExprSyntax = TryExprSyntax
public typealias LiveASTNodeDeclNameArgumentsSyntax = DeclNameArgumentsSyntax
public typealias ArraySliceASTNodeDeclNameArgumentsSyntax = DeclNameArgumentsSyntax
public typealias LiveASTNodeArrowExprSyntax = ArrowExprSyntax
public typealias ArraySliceASTNodeArrowExprSyntax = ArrowExprSyntax
public typealias LiveASTNodeTupleExprSyntax = TupleExprSyntax
public typealias ArraySliceASTNodeTupleExprSyntax = TupleExprSyntax
public typealias LiveASTNodeArrayExprSyntax = ArrayExprSyntax
public typealias ArraySliceASTNodeArrayExprSyntax = ArrayExprSyntax
public typealias LiveASTNodeDictionaryExprSyntax = DictionaryExprSyntax
public typealias ArraySliceASTNodeDictionaryExprSyntax = DictionaryExprSyntax
public typealias LiveASTNodeAsExprSyntax = AsExprSyntax
public typealias ArraySliceASTNodeAsExprSyntax = AsExprSyntax
public typealias LiveASTNodeClosureCaptureSignatureSyntax = ClosureCaptureSignatureSyntax
public typealias ArraySliceASTNodeClosureCaptureSignatureSyntax = ClosureCaptureSignatureSyntax
public typealias LiveASTNodeMultipleTrailingClosureElementSyntax = MultipleTrailingClosureElementSyntax
public typealias ArraySliceASTNodeMultipleTrailingClosureElementSyntax = MultipleTrailingClosureElementSyntax
public typealias LiveASTNodeKeyPathExprSyntax = KeyPathExprSyntax
public typealias ArraySliceASTNodeKeyPathExprSyntax = KeyPathExprSyntax
public typealias LiveASTNodeParameterClauseSyntax = ParameterClauseSyntax
public typealias ArraySliceASTNodeParameterClauseSyntax = ParameterClauseSyntax
public typealias LiveASTNodeIfConfigClauseSyntax = IfConfigClauseSyntax
public typealias ArraySliceASTNodeIfConfigClauseSyntax = IfConfigClauseSyntax
public typealias LiveASTNodeMemberDeclBlockSyntax = MemberDeclBlockSyntax
public typealias ArraySliceASTNodeMemberDeclBlockSyntax = MemberDeclBlockSyntax
public typealias LiveASTNodeAccessorParameterSyntax = AccessorParameterSyntax
public typealias ArraySliceASTNodeAccessorParameterSyntax = AccessorParameterSyntax
public typealias LiveASTNodeAccessorBlockSyntax = AccessorBlockSyntax
public typealias ArraySliceASTNodeAccessorBlockSyntax = AccessorBlockSyntax
public typealias LiveASTNodePrecedenceGroupRelationSyntax = PrecedenceGroupRelationSyntax
public typealias ArraySliceASTNodePrecedenceGroupRelationSyntax = PrecedenceGroupRelationSyntax
public typealias LiveASTNodePrecedenceGroupAssignmentSyntax = PrecedenceGroupAssignmentSyntax
public typealias ArraySliceASTNodePrecedenceGroupAssignmentSyntax = PrecedenceGroupAssignmentSyntax
public typealias LiveASTNodePrecedenceGroupAssociativitySyntax = PrecedenceGroupAssociativitySyntax
public typealias ArraySliceASTNodePrecedenceGroupAssociativitySyntax = PrecedenceGroupAssociativitySyntax
public typealias LiveASTNodeNamedAttributeStringArgumentSyntax = NamedAttributeStringArgumentSyntax
public typealias ArraySliceASTNodeNamedAttributeStringArgumentSyntax = NamedAttributeStringArgumentSyntax
public typealias LiveASTNodeDifferentiabilityParamsClauseSyntax = DifferentiabilityParamsClauseSyntax
public typealias ArraySliceASTNodeDifferentiabilityParamsClauseSyntax = DifferentiabilityParamsClauseSyntax
public typealias LiveASTNodeDifferentiabilityParamsSyntax = DifferentiabilityParamsSyntax
public typealias ArraySliceASTNodeDifferentiabilityParamsSyntax = DifferentiabilityParamsSyntax
public typealias LiveASTNodeSwitchCaseSyntax = SwitchCaseSyntax
public typealias ArraySliceASTNodeSwitchCaseSyntax = SwitchCaseSyntax
public typealias LiveASTNodeCaseItemSyntax = CaseItemSyntax
public typealias ArraySliceASTNodeCaseItemSyntax = CaseItemSyntax
public typealias LiveASTNodeCatchItemSyntax = CatchItemSyntax
public typealias ArraySliceASTNodeCatchItemSyntax = CatchItemSyntax
public typealias LiveASTNodeSwitchCaseLabelSyntax = SwitchCaseLabelSyntax
public typealias ArraySliceASTNodeSwitchCaseLabelSyntax = SwitchCaseLabelSyntax
public typealias LiveASTNodeCatchClauseSyntax = CatchClauseSyntax
public typealias ArraySliceASTNodeCatchClauseSyntax = CatchClauseSyntax
public typealias LiveASTNodeSameTypeRequirementSyntax = SameTypeRequirementSyntax
public typealias ArraySliceASTNodeSameTypeRequirementSyntax = SameTypeRequirementSyntax
public typealias LiveASTNodeGenericParameterClauseSyntax = GenericParameterClauseSyntax
public typealias ArraySliceASTNodeGenericParameterClauseSyntax = GenericParameterClauseSyntax
public typealias LiveASTNodeConformanceRequirementSyntax = ConformanceRequirementSyntax
public typealias ArraySliceASTNodeConformanceRequirementSyntax = ConformanceRequirementSyntax
public typealias LiveASTNodeArrayTypeSyntax = ArrayTypeSyntax
public typealias ArraySliceASTNodeArrayTypeSyntax = ArrayTypeSyntax
public typealias LiveASTNodeMetatypeTypeSyntax = MetatypeTypeSyntax
public typealias ArraySliceASTNodeMetatypeTypeSyntax = MetatypeTypeSyntax
public typealias LiveASTNodeTupleTypeSyntax = TupleTypeSyntax
public typealias ArraySliceASTNodeTupleTypeSyntax = TupleTypeSyntax
public typealias LiveASTNodeAttributedTypeSyntax = AttributedTypeSyntax
public typealias ArraySliceASTNodeAttributedTypeSyntax = AttributedTypeSyntax
public typealias LiveASTNodeGenericArgumentClauseSyntax = GenericArgumentClauseSyntax
public typealias ArraySliceASTNodeGenericArgumentClauseSyntax = GenericArgumentClauseSyntax
public typealias LiveASTNodeAsTypePatternSyntax = AsTypePatternSyntax
public typealias ArraySliceASTNodeAsTypePatternSyntax = AsTypePatternSyntax
public typealias LiveASTNodeTuplePatternSyntax = TuplePatternSyntax
public typealias ArraySliceASTNodeTuplePatternSyntax = TuplePatternSyntax
public typealias LiveASTNodeAvailabilityLabeledArgumentSyntax = AvailabilityLabeledArgumentSyntax
public typealias ArraySliceASTNodeAvailabilityLabeledArgumentSyntax = AvailabilityLabeledArgumentSyntax
public typealias LiveASTNodeVersionTupleSyntax = VersionTupleSyntax
public typealias ArraySliceASTNodeVersionTupleSyntax = VersionTupleSyntax
public typealias LiveASTNodeTupleExprElementSyntax = TupleExprElementSyntax
public typealias ArraySliceASTNodeTupleExprElementSyntax = TupleExprElementSyntax
public typealias LiveASTNodeDictionaryElementSyntax = DictionaryElementSyntax
public typealias ArraySliceASTNodeDictionaryElementSyntax = DictionaryElementSyntax
public typealias LiveASTNodeMemberAccessExprSyntax = MemberAccessExprSyntax
public typealias ArraySliceASTNodeMemberAccessExprSyntax = MemberAccessExprSyntax
public typealias LiveASTNodeClosureExprSyntax = ClosureExprSyntax
public typealias ArraySliceASTNodeClosureExprSyntax = ClosureExprSyntax
public typealias LiveASTNodeObjcKeyPathExprSyntax = ObjcKeyPathExprSyntax
public typealias ArraySliceASTNodeObjcKeyPathExprSyntax = ObjcKeyPathExprSyntax
public typealias LiveASTNodeObjectLiteralExprSyntax = ObjectLiteralExprSyntax
public typealias ArraySliceASTNodeObjectLiteralExprSyntax = ObjectLiteralExprSyntax
public typealias LiveASTNodeFunctionSignatureSyntax = FunctionSignatureSyntax
public typealias ArraySliceASTNodeFunctionSignatureSyntax = FunctionSignatureSyntax
public typealias LiveASTNodePoundErrorDeclSyntax = PoundErrorDeclSyntax
public typealias ArraySliceASTNodePoundErrorDeclSyntax = PoundErrorDeclSyntax
public typealias LiveASTNodePoundWarningDeclSyntax = PoundWarningDeclSyntax
public typealias ArraySliceASTNodePoundWarningDeclSyntax = PoundWarningDeclSyntax
public typealias LiveASTNodePoundSourceLocationSyntax = PoundSourceLocationSyntax
public typealias ArraySliceASTNodePoundSourceLocationSyntax = PoundSourceLocationSyntax
public typealias LiveASTNodeDeclModifierSyntax = DeclModifierSyntax
public typealias ArraySliceASTNodeDeclModifierSyntax = DeclModifierSyntax
public typealias LiveASTNodeDeinitializerDeclSyntax = DeinitializerDeclSyntax
public typealias ArraySliceASTNodeDeinitializerDeclSyntax = DeinitializerDeclSyntax
public typealias LiveASTNodeAccessLevelModifierSyntax = AccessLevelModifierSyntax
public typealias ArraySliceASTNodeAccessLevelModifierSyntax = AccessLevelModifierSyntax
public typealias LiveASTNodeVariableDeclSyntax = VariableDeclSyntax
public typealias ArraySliceASTNodeVariableDeclSyntax = VariableDeclSyntax
public typealias LiveASTNodeEnumCaseElementSyntax = EnumCaseElementSyntax
public typealias ArraySliceASTNodeEnumCaseElementSyntax = EnumCaseElementSyntax
public typealias LiveASTNodeEnumCaseDeclSyntax = EnumCaseDeclSyntax
public typealias ArraySliceASTNodeEnumCaseDeclSyntax = EnumCaseDeclSyntax
public typealias LiveASTNodeLabeledSpecializeEntrySyntax = LabeledSpecializeEntrySyntax
public typealias ArraySliceASTNodeLabeledSpecializeEntrySyntax = LabeledSpecializeEntrySyntax
public typealias LiveASTNodeTargetFunctionEntrySyntax = TargetFunctionEntrySyntax
public typealias ArraySliceASTNodeTargetFunctionEntrySyntax = TargetFunctionEntrySyntax
public typealias LiveASTNodeImplementsAttributeArgumentsSyntax = ImplementsAttributeArgumentsSyntax
public typealias ArraySliceASTNodeImplementsAttributeArgumentsSyntax = ImplementsAttributeArgumentsSyntax
public typealias LiveASTNodeQualifiedDeclNameSyntax = QualifiedDeclNameSyntax
public typealias ArraySliceASTNodeQualifiedDeclNameSyntax = QualifiedDeclNameSyntax
public typealias LiveASTNodeGuardStmtSyntax = GuardStmtSyntax
public typealias ArraySliceASTNodeGuardStmtSyntax = GuardStmtSyntax
public typealias LiveASTNodeYieldListSyntax = YieldListSyntax
public typealias ArraySliceASTNodeYieldListSyntax = YieldListSyntax
public typealias LiveASTNodeAvailabilityConditionSyntax = AvailabilityConditionSyntax
public typealias ArraySliceASTNodeAvailabilityConditionSyntax = AvailabilityConditionSyntax
public typealias LiveASTNodeMatchingPatternConditionSyntax = MatchingPatternConditionSyntax
public typealias ArraySliceASTNodeMatchingPatternConditionSyntax = MatchingPatternConditionSyntax
public typealias LiveASTNodeOptionalBindingConditionSyntax = OptionalBindingConditionSyntax
public typealias ArraySliceASTNodeOptionalBindingConditionSyntax = OptionalBindingConditionSyntax
public typealias LiveASTNodeMemberTypeIdentifierSyntax = MemberTypeIdentifierSyntax
public typealias ArraySliceASTNodeMemberTypeIdentifierSyntax = MemberTypeIdentifierSyntax
public typealias LiveASTNodeEnumCasePatternSyntax = EnumCasePatternSyntax
public typealias ArraySliceASTNodeEnumCasePatternSyntax = EnumCasePatternSyntax
public typealias LiveASTNodeTuplePatternElementSyntax = TuplePatternElementSyntax
public typealias ArraySliceASTNodeTuplePatternElementSyntax = TuplePatternElementSyntax
public typealias LiveASTNodeTernaryExprSyntax = TernaryExprSyntax
public typealias ArraySliceASTNodeTernaryExprSyntax = TernaryExprSyntax
public typealias LiveASTNodeClosureCaptureItemSyntax = ClosureCaptureItemSyntax
public typealias ArraySliceASTNodeClosureCaptureItemSyntax = ClosureCaptureItemSyntax
public typealias LiveASTNodeExpressionSegmentSyntax = ExpressionSegmentSyntax
public typealias ArraySliceASTNodeExpressionSegmentSyntax = ExpressionSegmentSyntax
public typealias LiveASTNodeStringLiteralExprSyntax = StringLiteralExprSyntax
public typealias ArraySliceASTNodeStringLiteralExprSyntax = StringLiteralExprSyntax
public typealias LiveASTNodeImportDeclSyntax = ImportDeclSyntax
public typealias ArraySliceASTNodeImportDeclSyntax = ImportDeclSyntax
public typealias LiveASTNodePatternBindingSyntax = PatternBindingSyntax
public typealias ArraySliceASTNodePatternBindingSyntax = PatternBindingSyntax
public typealias LiveASTNodeOperatorDeclSyntax = OperatorDeclSyntax
public typealias ArraySliceASTNodeOperatorDeclSyntax = OperatorDeclSyntax
public typealias LiveASTNodeCustomAttributeSyntax = CustomAttributeSyntax
public typealias ArraySliceASTNodeCustomAttributeSyntax = CustomAttributeSyntax
public typealias LiveASTNodeDifferentiableAttributeArgumentsSyntax = DifferentiableAttributeArgumentsSyntax
public typealias ArraySliceASTNodeDifferentiableAttributeArgumentsSyntax = DifferentiableAttributeArgumentsSyntax
public typealias LiveASTNodeWhileStmtSyntax = WhileStmtSyntax
public typealias ArraySliceASTNodeWhileStmtSyntax = WhileStmtSyntax
public typealias LiveASTNodeDoStmtSyntax = DoStmtSyntax
public typealias ArraySliceASTNodeDoStmtSyntax = DoStmtSyntax
public typealias LiveASTNodeGenericParameterSyntax = GenericParameterSyntax
public typealias ArraySliceASTNodeGenericParameterSyntax = GenericParameterSyntax
public typealias LiveASTNodeDictionaryTypeSyntax = DictionaryTypeSyntax
public typealias ArraySliceASTNodeDictionaryTypeSyntax = DictionaryTypeSyntax
public typealias LiveASTNodeFunctionCallExprSyntax = FunctionCallExprSyntax
public typealias ArraySliceASTNodeFunctionCallExprSyntax = FunctionCallExprSyntax
public typealias LiveASTNodeSubscriptExprSyntax = SubscriptExprSyntax
public typealias ArraySliceASTNodeSubscriptExprSyntax = SubscriptExprSyntax
public typealias LiveASTNodeObjcSelectorExprSyntax = ObjcSelectorExprSyntax
public typealias ArraySliceASTNodeObjcSelectorExprSyntax = ObjcSelectorExprSyntax
public typealias LiveASTNodeAttributeSyntax = AttributeSyntax
public typealias ArraySliceASTNodeAttributeSyntax = AttributeSyntax
public typealias LiveASTNodeRepeatWhileStmtSyntax = RepeatWhileStmtSyntax
public typealias ArraySliceASTNodeRepeatWhileStmtSyntax = RepeatWhileStmtSyntax
public typealias LiveASTNodePoundAssertStmtSyntax = PoundAssertStmtSyntax
public typealias ArraySliceASTNodePoundAssertStmtSyntax = PoundAssertStmtSyntax
public typealias LiveASTNodeClosureSignatureSyntax = ClosureSignatureSyntax
public typealias ArraySliceASTNodeClosureSignatureSyntax = ClosureSignatureSyntax
public typealias LiveASTNodeTypealiasDeclSyntax = TypealiasDeclSyntax
public typealias ArraySliceASTNodeTypealiasDeclSyntax = TypealiasDeclSyntax
public typealias LiveASTNodeAssociatedtypeDeclSyntax = AssociatedtypeDeclSyntax
public typealias ArraySliceASTNodeAssociatedtypeDeclSyntax = AssociatedtypeDeclSyntax
public typealias LiveASTNodePoundSourceLocationArgsSyntax = PoundSourceLocationArgsSyntax
public typealias ArraySliceASTNodePoundSourceLocationArgsSyntax = PoundSourceLocationArgsSyntax
public typealias LiveASTNodeProtocolDeclSyntax = ProtocolDeclSyntax
public typealias ArraySliceASTNodeProtocolDeclSyntax = ProtocolDeclSyntax
public typealias LiveASTNodeExtensionDeclSyntax = ExtensionDeclSyntax
public typealias ArraySliceASTNodeExtensionDeclSyntax = ExtensionDeclSyntax
public typealias LiveASTNodeAccessorDeclSyntax = AccessorDeclSyntax
public typealias ArraySliceASTNodeAccessorDeclSyntax = AccessorDeclSyntax
public typealias LiveASTNodePrecedenceGroupDeclSyntax = PrecedenceGroupDeclSyntax
public typealias ArraySliceASTNodePrecedenceGroupDeclSyntax = PrecedenceGroupDeclSyntax
public typealias LiveASTNodeDerivativeRegistrationAttributeArgumentsSyntax = DerivativeRegistrationAttributeArgumentsSyntax
public typealias ArraySliceASTNodeDerivativeRegistrationAttributeArgumentsSyntax = DerivativeRegistrationAttributeArgumentsSyntax
public typealias LiveASTNodeSwitchStmtSyntax = SwitchStmtSyntax
public typealias ArraySliceASTNodeSwitchStmtSyntax = SwitchStmtSyntax
public typealias LiveASTNodeIfStmtSyntax = IfStmtSyntax
public typealias ArraySliceASTNodeIfStmtSyntax = IfStmtSyntax
public typealias LiveASTNodeFunctionTypeSyntax = FunctionTypeSyntax
public typealias ArraySliceASTNodeFunctionTypeSyntax = FunctionTypeSyntax
public typealias LiveASTNodeClassDeclSyntax = ClassDeclSyntax
public typealias ArraySliceASTNodeClassDeclSyntax = ClassDeclSyntax
public typealias LiveASTNodeStructDeclSyntax = StructDeclSyntax
public typealias ArraySliceASTNodeStructDeclSyntax = StructDeclSyntax
public typealias LiveASTNodeFunctionParameterSyntax = FunctionParameterSyntax
public typealias ArraySliceASTNodeFunctionParameterSyntax = FunctionParameterSyntax
public typealias LiveASTNodeFunctionDeclSyntax = FunctionDeclSyntax
public typealias ArraySliceASTNodeFunctionDeclSyntax = FunctionDeclSyntax
public typealias LiveASTNodeSubscriptDeclSyntax = SubscriptDeclSyntax
public typealias ArraySliceASTNodeSubscriptDeclSyntax = SubscriptDeclSyntax
public typealias LiveASTNodeEnumDeclSyntax = EnumDeclSyntax
public typealias ArraySliceASTNodeEnumDeclSyntax = EnumDeclSyntax
public typealias LiveASTNodeTupleTypeElementSyntax = TupleTypeElementSyntax
public typealias ArraySliceASTNodeTupleTypeElementSyntax = TupleTypeElementSyntax
public typealias LiveASTNodeInitializerDeclSyntax = InitializerDeclSyntax
public typealias ArraySliceASTNodeInitializerDeclSyntax = InitializerDeclSyntax
public typealias LiveASTNodeForInStmtSyntax = ForInStmtSyntax
public typealias ArraySliceASTNodeForInStmtSyntax = ForInStmtSyntax
public typealias LiveASTNodeUnknownDeclSyntax = UnknownDeclSyntax
public typealias ArraySliceASTNodeUnknownDeclSyntax = UnknownDeclSyntax
public typealias LiveASTNodeUnknownExprSyntax = UnknownExprSyntax
public typealias ArraySliceASTNodeUnknownExprSyntax = UnknownExprSyntax
public typealias LiveASTNodeUnknownStmtSyntax = UnknownStmtSyntax
public typealias ArraySliceASTNodeUnknownStmtSyntax = UnknownStmtSyntax
public typealias LiveASTNodeUnknownTypeSyntax = UnknownTypeSyntax
public typealias ArraySliceASTNodeUnknownTypeSyntax = UnknownTypeSyntax
public typealias LiveASTNodeUnknownPatternSyntax = UnknownPatternSyntax
public typealias ArraySliceASTNodeUnknownPatternSyntax = UnknownPatternSyntax



//
// extensions
//
// SyntaxWrapper Extensions
public extension SyntaxWrapper {
    /// Only use if you are SURE it is TokenSyntax
    var _cast_asTokenSyntaxLiveASTNode: TokenSyntax? {
        return _cast_asTokenSyntax
    }
    /// Only use if you are SURE it is TokenSyntax
    var _cast_asTokenSyntaxArraySliceASTNode: TokenSyntax? {
        return _cast_asTokenSyntax
    }
    /// Only use if you are SURE it is CodeBlockItemListSyntax
    var _cast_asCodeBlockItemListSyntaxLiveASTNode: CodeBlockItemListSyntax? {
        return _cast_asCodeBlockItemListSyntax
    }
    var _cast_asCodeBlockItemListSyntaxArraySliceASTNode: CodeBlockItemListSyntax? {
        return _cast_asCodeBlockItemListSyntax
    }
    /// Only use if you are SURE it is TupleExprElementListSyntax
    var _cast_asTupleExprElementListSyntaxLiveASTNode: TupleExprElementListSyntax? {
        return _cast_asTupleExprElementListSyntax
    }
    var _cast_asTupleExprElementListSyntaxArraySliceASTNode: TupleExprElementListSyntax? {
        return _cast_asTupleExprElementListSyntax
    }
    /// Only use if you are SURE it is ArrayElementListSyntax
    var _cast_asArrayElementListSyntaxLiveASTNode: ArrayElementListSyntax? {
        return _cast_asArrayElementListSyntax
    }
    var _cast_asArrayElementListSyntaxArraySliceASTNode: ArrayElementListSyntax? {
        return _cast_asArrayElementListSyntax
    }
    /// Only use if you are SURE it is DictionaryElementListSyntax
    var _cast_asDictionaryElementListSyntaxLiveASTNode: DictionaryElementListSyntax? {
        return _cast_asDictionaryElementListSyntax
    }
    var _cast_asDictionaryElementListSyntaxArraySliceASTNode: DictionaryElementListSyntax? {
        return _cast_asDictionaryElementListSyntax
    }
    /// Only use if you are SURE it is StringLiteralSegmentsSyntax
    var _cast_asStringLiteralSegmentsSyntaxLiveASTNode: StringLiteralSegmentsSyntax? {
        return _cast_asStringLiteralSegmentsSyntax
    }
    var _cast_asStringLiteralSegmentsSyntaxArraySliceASTNode: StringLiteralSegmentsSyntax? {
        return _cast_asStringLiteralSegmentsSyntax
    }
    /// Only use if you are SURE it is DeclNameArgumentListSyntax
    var _cast_asDeclNameArgumentListSyntaxLiveASTNode: DeclNameArgumentListSyntax? {
        return _cast_asDeclNameArgumentListSyntax
    }
    var _cast_asDeclNameArgumentListSyntaxArraySliceASTNode: DeclNameArgumentListSyntax? {
        return _cast_asDeclNameArgumentListSyntax
    }
    /// Only use if you are SURE it is ExprListSyntax
    var _cast_asExprListSyntaxLiveASTNode: ExprListSyntax? {
        return _cast_asExprListSyntax
    }
    var _cast_asExprListSyntaxArraySliceASTNode: ExprListSyntax? {
        return _cast_asExprListSyntax
    }
    /// Only use if you are SURE it is ClosureCaptureItemListSyntax
    var _cast_asClosureCaptureItemListSyntaxLiveASTNode: ClosureCaptureItemListSyntax? {
        return _cast_asClosureCaptureItemListSyntax
    }
    var _cast_asClosureCaptureItemListSyntaxArraySliceASTNode: ClosureCaptureItemListSyntax? {
        return _cast_asClosureCaptureItemListSyntax
    }
    /// Only use if you are SURE it is ClosureParamListSyntax
    var _cast_asClosureParamListSyntaxLiveASTNode: ClosureParamListSyntax? {
        return _cast_asClosureParamListSyntax
    }
    var _cast_asClosureParamListSyntaxArraySliceASTNode: ClosureParamListSyntax? {
        return _cast_asClosureParamListSyntax
    }
    /// Only use if you are SURE it is MultipleTrailingClosureElementListSyntax
    var _cast_asMultipleTrailingClosureElementListSyntaxLiveASTNode: MultipleTrailingClosureElementListSyntax? {
        return _cast_asMultipleTrailingClosureElementListSyntax
    }
    var _cast_asMultipleTrailingClosureElementListSyntaxArraySliceASTNode: MultipleTrailingClosureElementListSyntax? {
        return _cast_asMultipleTrailingClosureElementListSyntax
    }
    /// Only use if you are SURE it is ObjcNameSyntax
    var _cast_asObjcNameSyntaxLiveASTNode: ObjcNameSyntax? {
        return _cast_asObjcNameSyntax
    }
    var _cast_asObjcNameSyntaxArraySliceASTNode: ObjcNameSyntax? {
        return _cast_asObjcNameSyntax
    }
    /// Only use if you are SURE it is FunctionParameterListSyntax
    var _cast_asFunctionParameterListSyntaxLiveASTNode: FunctionParameterListSyntax? {
        return _cast_asFunctionParameterListSyntax
    }
    var _cast_asFunctionParameterListSyntaxArraySliceASTNode: FunctionParameterListSyntax? {
        return _cast_asFunctionParameterListSyntax
    }
    /// Only use if you are SURE it is IfConfigClauseListSyntax
    var _cast_asIfConfigClauseListSyntaxLiveASTNode: IfConfigClauseListSyntax? {
        return _cast_asIfConfigClauseListSyntax
    }
    var _cast_asIfConfigClauseListSyntaxArraySliceASTNode: IfConfigClauseListSyntax? {
        return _cast_asIfConfigClauseListSyntax
    }
    /// Only use if you are SURE it is InheritedTypeListSyntax
    var _cast_asInheritedTypeListSyntaxLiveASTNode: InheritedTypeListSyntax? {
        return _cast_asInheritedTypeListSyntax
    }
    var _cast_asInheritedTypeListSyntaxArraySliceASTNode: InheritedTypeListSyntax? {
        return _cast_asInheritedTypeListSyntax
    }
    /// Only use if you are SURE it is MemberDeclListSyntax
    var _cast_asMemberDeclListSyntaxLiveASTNode: MemberDeclListSyntax? {
        return _cast_asMemberDeclListSyntax
    }
    var _cast_asMemberDeclListSyntaxArraySliceASTNode: MemberDeclListSyntax? {
        return _cast_asMemberDeclListSyntax
    }
    /// Only use if you are SURE it is ModifierListSyntax
    var _cast_asModifierListSyntaxLiveASTNode: ModifierListSyntax? {
        return _cast_asModifierListSyntax
    }
    var _cast_asModifierListSyntaxArraySliceASTNode: ModifierListSyntax? {
        return _cast_asModifierListSyntax
    }
    /// Only use if you are SURE it is AccessPathSyntax
    var _cast_asAccessPathSyntaxLiveASTNode: AccessPathSyntax? {
        return _cast_asAccessPathSyntax
    }
    var _cast_asAccessPathSyntaxArraySliceASTNode: AccessPathSyntax? {
        return _cast_asAccessPathSyntax
    }
    /// Only use if you are SURE it is AccessorListSyntax
    var _cast_asAccessorListSyntaxLiveASTNode: AccessorListSyntax? {
        return _cast_asAccessorListSyntax
    }
    var _cast_asAccessorListSyntaxArraySliceASTNode: AccessorListSyntax? {
        return _cast_asAccessorListSyntax
    }
    /// Only use if you are SURE it is PatternBindingListSyntax
    var _cast_asPatternBindingListSyntaxLiveASTNode: PatternBindingListSyntax? {
        return _cast_asPatternBindingListSyntax
    }
    var _cast_asPatternBindingListSyntaxArraySliceASTNode: PatternBindingListSyntax? {
        return _cast_asPatternBindingListSyntax
    }
    /// Only use if you are SURE it is EnumCaseElementListSyntax
    var _cast_asEnumCaseElementListSyntaxLiveASTNode: EnumCaseElementListSyntax? {
        return _cast_asEnumCaseElementListSyntax
    }
    var _cast_asEnumCaseElementListSyntaxArraySliceASTNode: EnumCaseElementListSyntax? {
        return _cast_asEnumCaseElementListSyntax
    }
    /// Only use if you are SURE it is IdentifierListSyntax
    var _cast_asIdentifierListSyntaxLiveASTNode: IdentifierListSyntax? {
        return _cast_asIdentifierListSyntax
    }
    var _cast_asIdentifierListSyntaxArraySliceASTNode: IdentifierListSyntax? {
        return _cast_asIdentifierListSyntax
    }
    /// Only use if you are SURE it is PrecedenceGroupAttributeListSyntax
    var _cast_asPrecedenceGroupAttributeListSyntaxLiveASTNode: PrecedenceGroupAttributeListSyntax? {
        return _cast_asPrecedenceGroupAttributeListSyntax
    }
    var _cast_asPrecedenceGroupAttributeListSyntaxArraySliceASTNode: PrecedenceGroupAttributeListSyntax? {
        return _cast_asPrecedenceGroupAttributeListSyntax
    }
    /// Only use if you are SURE it is PrecedenceGroupNameListSyntax
    var _cast_asPrecedenceGroupNameListSyntaxLiveASTNode: PrecedenceGroupNameListSyntax? {
        return _cast_asPrecedenceGroupNameListSyntax
    }
    var _cast_asPrecedenceGroupNameListSyntaxArraySliceASTNode: PrecedenceGroupNameListSyntax? {
        return _cast_asPrecedenceGroupNameListSyntax
    }
    /// Only use if you are SURE it is TokenListSyntax
    var _cast_asTokenListSyntaxLiveASTNode: TokenListSyntax? {
        return _cast_asTokenListSyntax
    }
    var _cast_asTokenListSyntaxArraySliceASTNode: TokenListSyntax? {
        return _cast_asTokenListSyntax
    }
    /// Only use if you are SURE it is NonEmptyTokenListSyntax
    var _cast_asNonEmptyTokenListSyntaxLiveASTNode: NonEmptyTokenListSyntax? {
        return _cast_asNonEmptyTokenListSyntax
    }
    var _cast_asNonEmptyTokenListSyntaxArraySliceASTNode: NonEmptyTokenListSyntax? {
        return _cast_asNonEmptyTokenListSyntax
    }
    /// Only use if you are SURE it is AttributeListSyntax
    var _cast_asAttributeListSyntaxLiveASTNode: AttributeListSyntax? {
        return _cast_asAttributeListSyntax
    }
    var _cast_asAttributeListSyntaxArraySliceASTNode: AttributeListSyntax? {
        return _cast_asAttributeListSyntax
    }
    /// Only use if you are SURE it is SpecializeAttributeSpecListSyntax
    var _cast_asSpecializeAttributeSpecListSyntaxLiveASTNode: SpecializeAttributeSpecListSyntax? {
        return _cast_asSpecializeAttributeSpecListSyntax
    }
    var _cast_asSpecializeAttributeSpecListSyntaxArraySliceASTNode: SpecializeAttributeSpecListSyntax? {
        return _cast_asSpecializeAttributeSpecListSyntax
    }
    /// Only use if you are SURE it is ObjCSelectorSyntax
    var _cast_asObjCSelectorSyntaxLiveASTNode: ObjCSelectorSyntax? {
        return _cast_asObjCSelectorSyntax
    }
    var _cast_asObjCSelectorSyntaxArraySliceASTNode: ObjCSelectorSyntax? {
        return _cast_asObjCSelectorSyntax
    }
    /// Only use if you are SURE it is DifferentiabilityParamListSyntax
    var _cast_asDifferentiabilityParamListSyntaxLiveASTNode: DifferentiabilityParamListSyntax? {
        return _cast_asDifferentiabilityParamListSyntax
    }
    var _cast_asDifferentiabilityParamListSyntaxArraySliceASTNode: DifferentiabilityParamListSyntax? {
        return _cast_asDifferentiabilityParamListSyntax
    }
    /// Only use if you are SURE it is SwitchCaseListSyntax
    var _cast_asSwitchCaseListSyntaxLiveASTNode: SwitchCaseListSyntax? {
        return _cast_asSwitchCaseListSyntax
    }
    var _cast_asSwitchCaseListSyntaxArraySliceASTNode: SwitchCaseListSyntax? {
        return _cast_asSwitchCaseListSyntax
    }
    /// Only use if you are SURE it is CatchClauseListSyntax
    var _cast_asCatchClauseListSyntaxLiveASTNode: CatchClauseListSyntax? {
        return _cast_asCatchClauseListSyntax
    }
    var _cast_asCatchClauseListSyntaxArraySliceASTNode: CatchClauseListSyntax? {
        return _cast_asCatchClauseListSyntax
    }
    /// Only use if you are SURE it is CaseItemListSyntax
    var _cast_asCaseItemListSyntaxLiveASTNode: CaseItemListSyntax? {
        return _cast_asCaseItemListSyntax
    }
    var _cast_asCaseItemListSyntaxArraySliceASTNode: CaseItemListSyntax? {
        return _cast_asCaseItemListSyntax
    }
    /// Only use if you are SURE it is CatchItemListSyntax
    var _cast_asCatchItemListSyntaxLiveASTNode: CatchItemListSyntax? {
        return _cast_asCatchItemListSyntax
    }
    var _cast_asCatchItemListSyntaxArraySliceASTNode: CatchItemListSyntax? {
        return _cast_asCatchItemListSyntax
    }
    /// Only use if you are SURE it is ConditionElementListSyntax
    var _cast_asConditionElementListSyntaxLiveASTNode: ConditionElementListSyntax? {
        return _cast_asConditionElementListSyntax
    }
    var _cast_asConditionElementListSyntaxArraySliceASTNode: ConditionElementListSyntax? {
        return _cast_asConditionElementListSyntax
    }
    /// Only use if you are SURE it is GenericRequirementListSyntax
    var _cast_asGenericRequirementListSyntaxLiveASTNode: GenericRequirementListSyntax? {
        return _cast_asGenericRequirementListSyntax
    }
    var _cast_asGenericRequirementListSyntaxArraySliceASTNode: GenericRequirementListSyntax? {
        return _cast_asGenericRequirementListSyntax
    }
    /// Only use if you are SURE it is GenericParameterListSyntax
    var _cast_asGenericParameterListSyntaxLiveASTNode: GenericParameterListSyntax? {
        return _cast_asGenericParameterListSyntax
    }
    var _cast_asGenericParameterListSyntaxArraySliceASTNode: GenericParameterListSyntax? {
        return _cast_asGenericParameterListSyntax
    }
    /// Only use if you are SURE it is CompositionTypeElementListSyntax
    var _cast_asCompositionTypeElementListSyntaxLiveASTNode: CompositionTypeElementListSyntax? {
        return _cast_asCompositionTypeElementListSyntax
    }
    var _cast_asCompositionTypeElementListSyntaxArraySliceASTNode: CompositionTypeElementListSyntax? {
        return _cast_asCompositionTypeElementListSyntax
    }
    /// Only use if you are SURE it is TupleTypeElementListSyntax
    var _cast_asTupleTypeElementListSyntaxLiveASTNode: TupleTypeElementListSyntax? {
        return _cast_asTupleTypeElementListSyntax
    }
    var _cast_asTupleTypeElementListSyntaxArraySliceASTNode: TupleTypeElementListSyntax? {
        return _cast_asTupleTypeElementListSyntax
    }
    /// Only use if you are SURE it is GenericArgumentListSyntax
    var _cast_asGenericArgumentListSyntaxLiveASTNode: GenericArgumentListSyntax? {
        return _cast_asGenericArgumentListSyntax
    }
    var _cast_asGenericArgumentListSyntaxArraySliceASTNode: GenericArgumentListSyntax? {
        return _cast_asGenericArgumentListSyntax
    }
    /// Only use if you are SURE it is TuplePatternElementListSyntax
    var _cast_asTuplePatternElementListSyntaxLiveASTNode: TuplePatternElementListSyntax? {
        return _cast_asTuplePatternElementListSyntax
    }
    var _cast_asTuplePatternElementListSyntaxArraySliceASTNode: TuplePatternElementListSyntax? {
        return _cast_asTuplePatternElementListSyntax
    }
    /// Only use if you are SURE it is AvailabilitySpecListSyntax
    var _cast_asAvailabilitySpecListSyntaxLiveASTNode: AvailabilitySpecListSyntax? {
        return _cast_asAvailabilitySpecListSyntax
    }
    var _cast_asAvailabilitySpecListSyntaxArraySliceASTNode: AvailabilitySpecListSyntax? {
        return _cast_asAvailabilitySpecListSyntax
    }
    /// Only use if you are SURE it is PoundColumnExprSyntax
    var _cast_asPoundColumnExprSyntaxLiveASTNode: PoundColumnExprSyntax? {
        return _cast_asPoundColumnExprSyntax
    }
    var _cast_asPoundColumnExprSyntaxArraySliceASTNode: PoundColumnExprSyntax? {
        return _cast_asPoundColumnExprSyntax
    }
    /// Only use if you are SURE it is SuperRefExprSyntax
    var _cast_asSuperRefExprSyntaxLiveASTNode: SuperRefExprSyntax? {
        return _cast_asSuperRefExprSyntax
    }
    var _cast_asSuperRefExprSyntaxArraySliceASTNode: SuperRefExprSyntax? {
        return _cast_asSuperRefExprSyntax
    }
    /// Only use if you are SURE it is NilLiteralExprSyntax
    var _cast_asNilLiteralExprSyntaxLiveASTNode: NilLiteralExprSyntax? {
        return _cast_asNilLiteralExprSyntax
    }
    var _cast_asNilLiteralExprSyntaxArraySliceASTNode: NilLiteralExprSyntax? {
        return _cast_asNilLiteralExprSyntax
    }
    /// Only use if you are SURE it is DiscardAssignmentExprSyntax
    var _cast_asDiscardAssignmentExprSyntaxLiveASTNode: DiscardAssignmentExprSyntax? {
        return _cast_asDiscardAssignmentExprSyntax
    }
    var _cast_asDiscardAssignmentExprSyntaxArraySliceASTNode: DiscardAssignmentExprSyntax? {
        return _cast_asDiscardAssignmentExprSyntax
    }
    /// Only use if you are SURE it is AssignmentExprSyntax
    var _cast_asAssignmentExprSyntaxLiveASTNode: AssignmentExprSyntax? {
        return _cast_asAssignmentExprSyntax
    }
    var _cast_asAssignmentExprSyntaxArraySliceASTNode: AssignmentExprSyntax? {
        return _cast_asAssignmentExprSyntax
    }
    /// Only use if you are SURE it is SequenceExprSyntax
    var _cast_asSequenceExprSyntaxLiveASTNode: SequenceExprSyntax? {
        return _cast_asSequenceExprSyntax
    }
    var _cast_asSequenceExprSyntaxArraySliceASTNode: SequenceExprSyntax? {
        return _cast_asSequenceExprSyntax
    }
    /// Only use if you are SURE it is PoundLineExprSyntax
    var _cast_asPoundLineExprSyntaxLiveASTNode: PoundLineExprSyntax? {
        return _cast_asPoundLineExprSyntax
    }
    var _cast_asPoundLineExprSyntaxArraySliceASTNode: PoundLineExprSyntax? {
        return _cast_asPoundLineExprSyntax
    }
    /// Only use if you are SURE it is PoundFileExprSyntax
    var _cast_asPoundFileExprSyntaxLiveASTNode: PoundFileExprSyntax? {
        return _cast_asPoundFileExprSyntax
    }
    var _cast_asPoundFileExprSyntaxArraySliceASTNode: PoundFileExprSyntax? {
        return _cast_asPoundFileExprSyntax
    }
    /// Only use if you are SURE it is PoundFileIDExprSyntax
    var _cast_asPoundFileIDExprSyntaxLiveASTNode: PoundFileIDExprSyntax? {
        return _cast_asPoundFileIDExprSyntax
    }
    var _cast_asPoundFileIDExprSyntaxArraySliceASTNode: PoundFileIDExprSyntax? {
        return _cast_asPoundFileIDExprSyntax
    }
    /// Only use if you are SURE it is PoundFilePathExprSyntax
    var _cast_asPoundFilePathExprSyntaxLiveASTNode: PoundFilePathExprSyntax? {
        return _cast_asPoundFilePathExprSyntax
    }
    var _cast_asPoundFilePathExprSyntaxArraySliceASTNode: PoundFilePathExprSyntax? {
        return _cast_asPoundFilePathExprSyntax
    }
    /// Only use if you are SURE it is PoundFunctionExprSyntax
    var _cast_asPoundFunctionExprSyntaxLiveASTNode: PoundFunctionExprSyntax? {
        return _cast_asPoundFunctionExprSyntax
    }
    var _cast_asPoundFunctionExprSyntaxArraySliceASTNode: PoundFunctionExprSyntax? {
        return _cast_asPoundFunctionExprSyntax
    }
    /// Only use if you are SURE it is PoundDsohandleExprSyntax
    var _cast_asPoundDsohandleExprSyntaxLiveASTNode: PoundDsohandleExprSyntax? {
        return _cast_asPoundDsohandleExprSyntax
    }
    var _cast_asPoundDsohandleExprSyntaxArraySliceASTNode: PoundDsohandleExprSyntax? {
        return _cast_asPoundDsohandleExprSyntax
    }
    /// Only use if you are SURE it is BinaryOperatorExprSyntax
    var _cast_asBinaryOperatorExprSyntaxLiveASTNode: BinaryOperatorExprSyntax? {
        return _cast_asBinaryOperatorExprSyntax
    }
    var _cast_asBinaryOperatorExprSyntaxArraySliceASTNode: BinaryOperatorExprSyntax? {
        return _cast_asBinaryOperatorExprSyntax
    }
    /// Only use if you are SURE it is FloatLiteralExprSyntax
    var _cast_asFloatLiteralExprSyntaxLiveASTNode: FloatLiteralExprSyntax? {
        return _cast_asFloatLiteralExprSyntax
    }
    var _cast_asFloatLiteralExprSyntaxArraySliceASTNode: FloatLiteralExprSyntax? {
        return _cast_asFloatLiteralExprSyntax
    }
    /// Only use if you are SURE it is IntegerLiteralExprSyntax
    var _cast_asIntegerLiteralExprSyntaxLiveASTNode: IntegerLiteralExprSyntax? {
        return _cast_asIntegerLiteralExprSyntax
    }
    var _cast_asIntegerLiteralExprSyntaxArraySliceASTNode: IntegerLiteralExprSyntax? {
        return _cast_asIntegerLiteralExprSyntax
    }
    /// Only use if you are SURE it is BooleanLiteralExprSyntax
    var _cast_asBooleanLiteralExprSyntaxLiveASTNode: BooleanLiteralExprSyntax? {
        return _cast_asBooleanLiteralExprSyntax
    }
    var _cast_asBooleanLiteralExprSyntaxArraySliceASTNode: BooleanLiteralExprSyntax? {
        return _cast_asBooleanLiteralExprSyntax
    }
    /// Only use if you are SURE it is TypeExprSyntax
    var _cast_asTypeExprSyntaxLiveASTNode: TypeExprSyntax? {
        return _cast_asTypeExprSyntax
    }
    var _cast_asTypeExprSyntaxArraySliceASTNode: TypeExprSyntax? {
        return _cast_asTypeExprSyntax
    }
    /// Only use if you are SURE it is UnresolvedPatternExprSyntax
    var _cast_asUnresolvedPatternExprSyntaxLiveASTNode: UnresolvedPatternExprSyntax? {
        return _cast_asUnresolvedPatternExprSyntax
    }
    var _cast_asUnresolvedPatternExprSyntaxArraySliceASTNode: UnresolvedPatternExprSyntax? {
        return _cast_asUnresolvedPatternExprSyntax
    }
    /// Only use if you are SURE it is StringSegmentSyntax
    var _cast_asStringSegmentSyntaxLiveASTNode: StringSegmentSyntax? {
        return _cast_asStringSegmentSyntax
    }
    var _cast_asStringSegmentSyntaxArraySliceASTNode: StringSegmentSyntax? {
        return _cast_asStringSegmentSyntax
    }
    /// Only use if you are SURE it is KeyPathBaseExprSyntax
    var _cast_asKeyPathBaseExprSyntaxLiveASTNode: KeyPathBaseExprSyntax? {
        return _cast_asKeyPathBaseExprSyntax
    }
    var _cast_asKeyPathBaseExprSyntaxArraySliceASTNode: KeyPathBaseExprSyntax? {
        return _cast_asKeyPathBaseExprSyntax
    }
    /// Only use if you are SURE it is EditorPlaceholderExprSyntax
    var _cast_asEditorPlaceholderExprSyntaxLiveASTNode: EditorPlaceholderExprSyntax? {
        return _cast_asEditorPlaceholderExprSyntax
    }
    var _cast_asEditorPlaceholderExprSyntaxArraySliceASTNode: EditorPlaceholderExprSyntax? {
        return _cast_asEditorPlaceholderExprSyntax
    }
    /// Only use if you are SURE it is ExpressionStmtSyntax
    var _cast_asExpressionStmtSyntaxLiveASTNode: ExpressionStmtSyntax? {
        return _cast_asExpressionStmtSyntax
    }
    var _cast_asExpressionStmtSyntaxArraySliceASTNode: ExpressionStmtSyntax? {
        return _cast_asExpressionStmtSyntax
    }
    /// Only use if you are SURE it is FallthroughStmtSyntax
    var _cast_asFallthroughStmtSyntaxLiveASTNode: FallthroughStmtSyntax? {
        return _cast_asFallthroughStmtSyntax
    }
    var _cast_asFallthroughStmtSyntaxArraySliceASTNode: FallthroughStmtSyntax? {
        return _cast_asFallthroughStmtSyntax
    }
    /// Only use if you are SURE it is DeclarationStmtSyntax
    var _cast_asDeclarationStmtSyntaxLiveASTNode: DeclarationStmtSyntax? {
        return _cast_asDeclarationStmtSyntax
    }
    var _cast_asDeclarationStmtSyntaxArraySliceASTNode: DeclarationStmtSyntax? {
        return _cast_asDeclarationStmtSyntax
    }
    /// Only use if you are SURE it is ElseIfContinuationSyntax
    var _cast_asElseIfContinuationSyntaxLiveASTNode: ElseIfContinuationSyntax? {
        return _cast_asElseIfContinuationSyntax
    }
    var _cast_asElseIfContinuationSyntaxArraySliceASTNode: ElseIfContinuationSyntax? {
        return _cast_asElseIfContinuationSyntax
    }
    /// Only use if you are SURE it is ClassRestrictionTypeSyntax
    var _cast_asClassRestrictionTypeSyntaxLiveASTNode: ClassRestrictionTypeSyntax? {
        return _cast_asClassRestrictionTypeSyntax
    }
    var _cast_asClassRestrictionTypeSyntaxArraySliceASTNode: ClassRestrictionTypeSyntax? {
        return _cast_asClassRestrictionTypeSyntax
    }
    /// Only use if you are SURE it is CompositionTypeSyntax
    var _cast_asCompositionTypeSyntaxLiveASTNode: CompositionTypeSyntax? {
        return _cast_asCompositionTypeSyntax
    }
    var _cast_asCompositionTypeSyntaxArraySliceASTNode: CompositionTypeSyntax? {
        return _cast_asCompositionTypeSyntax
    }
    /// Only use if you are SURE it is IdentifierPatternSyntax
    var _cast_asIdentifierPatternSyntaxLiveASTNode: IdentifierPatternSyntax? {
        return _cast_asIdentifierPatternSyntax
    }
    var _cast_asIdentifierPatternSyntaxArraySliceASTNode: IdentifierPatternSyntax? {
        return _cast_asIdentifierPatternSyntax
    }
    /// Only use if you are SURE it is ExpressionPatternSyntax
    var _cast_asExpressionPatternSyntaxLiveASTNode: ExpressionPatternSyntax? {
        return _cast_asExpressionPatternSyntax
    }
    var _cast_asExpressionPatternSyntaxArraySliceASTNode: ExpressionPatternSyntax? {
        return _cast_asExpressionPatternSyntax
    }
    /// Only use if you are SURE it is InOutExprSyntax
    var _cast_asInOutExprSyntaxLiveASTNode: InOutExprSyntax? {
        return _cast_asInOutExprSyntax
    }
    var _cast_asInOutExprSyntaxArraySliceASTNode: InOutExprSyntax? {
        return _cast_asInOutExprSyntax
    }
    /// Only use if you are SURE it is AwaitExprSyntax
    var _cast_asAwaitExprSyntaxLiveASTNode: AwaitExprSyntax? {
        return _cast_asAwaitExprSyntax
    }
    var _cast_asAwaitExprSyntaxArraySliceASTNode: AwaitExprSyntax? {
        return _cast_asAwaitExprSyntax
    }
    /// Only use if you are SURE it is DeclNameArgumentSyntax
    var _cast_asDeclNameArgumentSyntaxLiveASTNode: DeclNameArgumentSyntax? {
        return _cast_asDeclNameArgumentSyntax
    }
    var _cast_asDeclNameArgumentSyntaxArraySliceASTNode: DeclNameArgumentSyntax? {
        return _cast_asDeclNameArgumentSyntax
    }
    /// Only use if you are SURE it is IdentifierExprSyntax
    var _cast_asIdentifierExprSyntaxLiveASTNode: IdentifierExprSyntax? {
        return _cast_asIdentifierExprSyntax
    }
    var _cast_asIdentifierExprSyntaxArraySliceASTNode: IdentifierExprSyntax? {
        return _cast_asIdentifierExprSyntax
    }
    /// Only use if you are SURE it is SymbolicReferenceExprSyntax
    var _cast_asSymbolicReferenceExprSyntaxLiveASTNode: SymbolicReferenceExprSyntax? {
        return _cast_asSymbolicReferenceExprSyntax
    }
    var _cast_asSymbolicReferenceExprSyntaxArraySliceASTNode: SymbolicReferenceExprSyntax? {
        return _cast_asSymbolicReferenceExprSyntax
    }
    /// Only use if you are SURE it is PrefixOperatorExprSyntax
    var _cast_asPrefixOperatorExprSyntaxLiveASTNode: PrefixOperatorExprSyntax? {
        return _cast_asPrefixOperatorExprSyntax
    }
    var _cast_asPrefixOperatorExprSyntaxArraySliceASTNode: PrefixOperatorExprSyntax? {
        return _cast_asPrefixOperatorExprSyntax
    }
    /// Only use if you are SURE it is ArrayElementSyntax
    var _cast_asArrayElementSyntaxLiveASTNode: ArrayElementSyntax? {
        return _cast_asArrayElementSyntax
    }
    var _cast_asArrayElementSyntaxArraySliceASTNode: ArrayElementSyntax? {
        return _cast_asArrayElementSyntax
    }
    /// Only use if you are SURE it is IsExprSyntax
    var _cast_asIsExprSyntaxLiveASTNode: IsExprSyntax? {
        return _cast_asIsExprSyntax
    }
    var _cast_asIsExprSyntaxArraySliceASTNode: IsExprSyntax? {
        return _cast_asIsExprSyntax
    }
    /// Only use if you are SURE it is ClosureParamSyntax
    var _cast_asClosureParamSyntaxLiveASTNode: ClosureParamSyntax? {
        return _cast_asClosureParamSyntax
    }
    var _cast_asClosureParamSyntaxArraySliceASTNode: ClosureParamSyntax? {
        return _cast_asClosureParamSyntax
    }
    /// Only use if you are SURE it is OptionalChainingExprSyntax
    var _cast_asOptionalChainingExprSyntaxLiveASTNode: OptionalChainingExprSyntax? {
        return _cast_asOptionalChainingExprSyntax
    }
    var _cast_asOptionalChainingExprSyntaxArraySliceASTNode: OptionalChainingExprSyntax? {
        return _cast_asOptionalChainingExprSyntax
    }
    /// Only use if you are SURE it is ForcedValueExprSyntax
    var _cast_asForcedValueExprSyntaxLiveASTNode: ForcedValueExprSyntax? {
        return _cast_asForcedValueExprSyntax
    }
    var _cast_asForcedValueExprSyntaxArraySliceASTNode: ForcedValueExprSyntax? {
        return _cast_asForcedValueExprSyntax
    }
    /// Only use if you are SURE it is PostfixUnaryExprSyntax
    var _cast_asPostfixUnaryExprSyntaxLiveASTNode: PostfixUnaryExprSyntax? {
        return _cast_asPostfixUnaryExprSyntax
    }
    var _cast_asPostfixUnaryExprSyntaxArraySliceASTNode: PostfixUnaryExprSyntax? {
        return _cast_asPostfixUnaryExprSyntax
    }
    /// Only use if you are SURE it is SpecializeExprSyntax
    var _cast_asSpecializeExprSyntaxLiveASTNode: SpecializeExprSyntax? {
        return _cast_asSpecializeExprSyntax
    }
    var _cast_asSpecializeExprSyntaxArraySliceASTNode: SpecializeExprSyntax? {
        return _cast_asSpecializeExprSyntax
    }
    /// Only use if you are SURE it is ObjcNamePieceSyntax
    var _cast_asObjcNamePieceSyntaxLiveASTNode: ObjcNamePieceSyntax? {
        return _cast_asObjcNamePieceSyntax
    }
    var _cast_asObjcNamePieceSyntaxArraySliceASTNode: ObjcNamePieceSyntax? {
        return _cast_asObjcNamePieceSyntax
    }
    /// Only use if you are SURE it is PostfixIfConfigExprSyntax
    var _cast_asPostfixIfConfigExprSyntaxLiveASTNode: PostfixIfConfigExprSyntax? {
        return _cast_asPostfixIfConfigExprSyntax
    }
    var _cast_asPostfixIfConfigExprSyntaxArraySliceASTNode: PostfixIfConfigExprSyntax? {
        return _cast_asPostfixIfConfigExprSyntax
    }
    /// Only use if you are SURE it is TypeInitializerClauseSyntax
    var _cast_asTypeInitializerClauseSyntaxLiveASTNode: TypeInitializerClauseSyntax? {
        return _cast_asTypeInitializerClauseSyntax
    }
    var _cast_asTypeInitializerClauseSyntaxArraySliceASTNode: TypeInitializerClauseSyntax? {
        return _cast_asTypeInitializerClauseSyntax
    }
    /// Only use if you are SURE it is ReturnClauseSyntax
    var _cast_asReturnClauseSyntaxLiveASTNode: ReturnClauseSyntax? {
        return _cast_asReturnClauseSyntax
    }
    var _cast_asReturnClauseSyntaxArraySliceASTNode: ReturnClauseSyntax? {
        return _cast_asReturnClauseSyntax
    }
    /// Only use if you are SURE it is IfConfigDeclSyntax
    var _cast_asIfConfigDeclSyntaxLiveASTNode: IfConfigDeclSyntax? {
        return _cast_asIfConfigDeclSyntax
    }
    var _cast_asIfConfigDeclSyntaxArraySliceASTNode: IfConfigDeclSyntax? {
        return _cast_asIfConfigDeclSyntax
    }
    /// Only use if you are SURE it is InheritedTypeSyntax
    var _cast_asInheritedTypeSyntaxLiveASTNode: InheritedTypeSyntax? {
        return _cast_asInheritedTypeSyntax
    }
    var _cast_asInheritedTypeSyntaxArraySliceASTNode: InheritedTypeSyntax? {
        return _cast_asInheritedTypeSyntax
    }
    /// Only use if you are SURE it is TypeInheritanceClauseSyntax
    var _cast_asTypeInheritanceClauseSyntaxLiveASTNode: TypeInheritanceClauseSyntax? {
        return _cast_asTypeInheritanceClauseSyntax
    }
    var _cast_asTypeInheritanceClauseSyntaxArraySliceASTNode: TypeInheritanceClauseSyntax? {
        return _cast_asTypeInheritanceClauseSyntax
    }
    /// Only use if you are SURE it is MemberDeclListItemSyntax
    var _cast_asMemberDeclListItemSyntaxLiveASTNode: MemberDeclListItemSyntax? {
        return _cast_asMemberDeclListItemSyntax
    }
    var _cast_asMemberDeclListItemSyntaxArraySliceASTNode: MemberDeclListItemSyntax? {
        return _cast_asMemberDeclListItemSyntax
    }
    /// Only use if you are SURE it is SourceFileSyntax
    var _cast_asSourceFileSyntaxLiveASTNode: SourceFileSyntax? {
        return _cast_asSourceFileSyntax
    }
    var _cast_asSourceFileSyntaxArraySliceASTNode: SourceFileSyntax? {
        return _cast_asSourceFileSyntax
    }
    /// Only use if you are SURE it is InitializerClauseSyntax
    var _cast_asInitializerClauseSyntaxLiveASTNode: InitializerClauseSyntax? {
        return _cast_asInitializerClauseSyntax
    }
    var _cast_asInitializerClauseSyntaxArraySliceASTNode: InitializerClauseSyntax? {
        return _cast_asInitializerClauseSyntax
    }
    /// Only use if you are SURE it is AccessPathComponentSyntax
    var _cast_asAccessPathComponentSyntaxLiveASTNode: AccessPathComponentSyntax? {
        return _cast_asAccessPathComponentSyntax
    }
    var _cast_asAccessPathComponentSyntaxArraySliceASTNode: AccessPathComponentSyntax? {
        return _cast_asAccessPathComponentSyntax
    }
    /// Only use if you are SURE it is OperatorPrecedenceAndTypesSyntax
    var _cast_asOperatorPrecedenceAndTypesSyntaxLiveASTNode: OperatorPrecedenceAndTypesSyntax? {
        return _cast_asOperatorPrecedenceAndTypesSyntax
    }
    var _cast_asOperatorPrecedenceAndTypesSyntaxArraySliceASTNode: OperatorPrecedenceAndTypesSyntax? {
        return _cast_asOperatorPrecedenceAndTypesSyntax
    }
    /// Only use if you are SURE it is PrecedenceGroupNameElementSyntax
    var _cast_asPrecedenceGroupNameElementSyntaxLiveASTNode: PrecedenceGroupNameElementSyntax? {
        return _cast_asPrecedenceGroupNameElementSyntax
    }
    var _cast_asPrecedenceGroupNameElementSyntaxArraySliceASTNode: PrecedenceGroupNameElementSyntax? {
        return _cast_asPrecedenceGroupNameElementSyntax
    }
    /// Only use if you are SURE it is DeclNameSyntax
    var _cast_asDeclNameSyntaxLiveASTNode: DeclNameSyntax? {
        return _cast_asDeclNameSyntax
    }
    var _cast_asDeclNameSyntaxArraySliceASTNode: DeclNameSyntax? {
        return _cast_asDeclNameSyntax
    }
    /// Only use if you are SURE it is ObjCSelectorPieceSyntax
    var _cast_asObjCSelectorPieceSyntaxLiveASTNode: ObjCSelectorPieceSyntax? {
        return _cast_asObjCSelectorPieceSyntax
    }
    var _cast_asObjCSelectorPieceSyntaxArraySliceASTNode: ObjCSelectorPieceSyntax? {
        return _cast_asObjCSelectorPieceSyntax
    }
    /// Only use if you are SURE it is DifferentiabilityParamSyntax
    var _cast_asDifferentiabilityParamSyntaxLiveASTNode: DifferentiabilityParamSyntax? {
        return _cast_asDifferentiabilityParamSyntax
    }
    var _cast_asDifferentiabilityParamSyntaxArraySliceASTNode: DifferentiabilityParamSyntax? {
        return _cast_asDifferentiabilityParamSyntax
    }
    /// Only use if you are SURE it is FunctionDeclNameSyntax
    var _cast_asFunctionDeclNameSyntaxLiveASTNode: FunctionDeclNameSyntax? {
        return _cast_asFunctionDeclNameSyntax
    }
    var _cast_asFunctionDeclNameSyntaxArraySliceASTNode: FunctionDeclNameSyntax? {
        return _cast_asFunctionDeclNameSyntax
    }
    /// Only use if you are SURE it is ContinueStmtSyntax
    var _cast_asContinueStmtSyntaxLiveASTNode: ContinueStmtSyntax? {
        return _cast_asContinueStmtSyntax
    }
    var _cast_asContinueStmtSyntaxArraySliceASTNode: ContinueStmtSyntax? {
        return _cast_asContinueStmtSyntax
    }
    /// Only use if you are SURE it is DeferStmtSyntax
    var _cast_asDeferStmtSyntaxLiveASTNode: DeferStmtSyntax? {
        return _cast_asDeferStmtSyntax
    }
    var _cast_asDeferStmtSyntaxArraySliceASTNode: DeferStmtSyntax? {
        return _cast_asDeferStmtSyntax
    }
    /// Only use if you are SURE it is WhereClauseSyntax
    var _cast_asWhereClauseSyntaxLiveASTNode: WhereClauseSyntax? {
        return _cast_asWhereClauseSyntax
    }
    var _cast_asWhereClauseSyntaxArraySliceASTNode: WhereClauseSyntax? {
        return _cast_asWhereClauseSyntax
    }
    /// Only use if you are SURE it is ReturnStmtSyntax
    var _cast_asReturnStmtSyntaxLiveASTNode: ReturnStmtSyntax? {
        return _cast_asReturnStmtSyntax
    }
    var _cast_asReturnStmtSyntaxArraySliceASTNode: ReturnStmtSyntax? {
        return _cast_asReturnStmtSyntax
    }
    /// Only use if you are SURE it is YieldStmtSyntax
    var _cast_asYieldStmtSyntaxLiveASTNode: YieldStmtSyntax? {
        return _cast_asYieldStmtSyntax
    }
    var _cast_asYieldStmtSyntaxArraySliceASTNode: YieldStmtSyntax? {
        return _cast_asYieldStmtSyntax
    }
    /// Only use if you are SURE it is BreakStmtSyntax
    var _cast_asBreakStmtSyntaxLiveASTNode: BreakStmtSyntax? {
        return _cast_asBreakStmtSyntax
    }
    var _cast_asBreakStmtSyntaxArraySliceASTNode: BreakStmtSyntax? {
        return _cast_asBreakStmtSyntax
    }
    /// Only use if you are SURE it is ConditionElementSyntax
    var _cast_asConditionElementSyntaxLiveASTNode: ConditionElementSyntax? {
        return _cast_asConditionElementSyntax
    }
    var _cast_asConditionElementSyntaxArraySliceASTNode: ConditionElementSyntax? {
        return _cast_asConditionElementSyntax
    }
    /// Only use if you are SURE it is ThrowStmtSyntax
    var _cast_asThrowStmtSyntaxLiveASTNode: ThrowStmtSyntax? {
        return _cast_asThrowStmtSyntax
    }
    var _cast_asThrowStmtSyntaxArraySliceASTNode: ThrowStmtSyntax? {
        return _cast_asThrowStmtSyntax
    }
    /// Only use if you are SURE it is ElseBlockSyntax
    var _cast_asElseBlockSyntaxLiveASTNode: ElseBlockSyntax? {
        return _cast_asElseBlockSyntax
    }
    var _cast_asElseBlockSyntaxArraySliceASTNode: ElseBlockSyntax? {
        return _cast_asElseBlockSyntax
    }
    /// Only use if you are SURE it is SwitchDefaultLabelSyntax
    var _cast_asSwitchDefaultLabelSyntaxLiveASTNode: SwitchDefaultLabelSyntax? {
        return _cast_asSwitchDefaultLabelSyntax
    }
    var _cast_asSwitchDefaultLabelSyntaxArraySliceASTNode: SwitchDefaultLabelSyntax? {
        return _cast_asSwitchDefaultLabelSyntax
    }
    /// Only use if you are SURE it is GenericWhereClauseSyntax
    var _cast_asGenericWhereClauseSyntaxLiveASTNode: GenericWhereClauseSyntax? {
        return _cast_asGenericWhereClauseSyntax
    }
    var _cast_asGenericWhereClauseSyntaxArraySliceASTNode: GenericWhereClauseSyntax? {
        return _cast_asGenericWhereClauseSyntax
    }
    /// Only use if you are SURE it is GenericRequirementSyntax
    var _cast_asGenericRequirementSyntaxLiveASTNode: GenericRequirementSyntax? {
        return _cast_asGenericRequirementSyntax
    }
    var _cast_asGenericRequirementSyntaxArraySliceASTNode: GenericRequirementSyntax? {
        return _cast_asGenericRequirementSyntax
    }
    /// Only use if you are SURE it is SimpleTypeIdentifierSyntax
    var _cast_asSimpleTypeIdentifierSyntaxLiveASTNode: SimpleTypeIdentifierSyntax? {
        return _cast_asSimpleTypeIdentifierSyntax
    }
    var _cast_asSimpleTypeIdentifierSyntaxArraySliceASTNode: SimpleTypeIdentifierSyntax? {
        return _cast_asSimpleTypeIdentifierSyntax
    }
    /// Only use if you are SURE it is OptionalTypeSyntax
    var _cast_asOptionalTypeSyntaxLiveASTNode: OptionalTypeSyntax? {
        return _cast_asOptionalTypeSyntax
    }
    var _cast_asOptionalTypeSyntaxArraySliceASTNode: OptionalTypeSyntax? {
        return _cast_asOptionalTypeSyntax
    }
    /// Only use if you are SURE it is SomeTypeSyntax
    var _cast_asSomeTypeSyntaxLiveASTNode: SomeTypeSyntax? {
        return _cast_asSomeTypeSyntax
    }
    var _cast_asSomeTypeSyntaxArraySliceASTNode: SomeTypeSyntax? {
        return _cast_asSomeTypeSyntax
    }
    /// Only use if you are SURE it is ImplicitlyUnwrappedOptionalTypeSyntax
    var _cast_asImplicitlyUnwrappedOptionalTypeSyntaxLiveASTNode: ImplicitlyUnwrappedOptionalTypeSyntax? {
        return _cast_asImplicitlyUnwrappedOptionalTypeSyntax
    }
    var _cast_asImplicitlyUnwrappedOptionalTypeSyntaxArraySliceASTNode: ImplicitlyUnwrappedOptionalTypeSyntax? {
        return _cast_asImplicitlyUnwrappedOptionalTypeSyntax
    }
    /// Only use if you are SURE it is CompositionTypeElementSyntax
    var _cast_asCompositionTypeElementSyntaxLiveASTNode: CompositionTypeElementSyntax? {
        return _cast_asCompositionTypeElementSyntax
    }
    var _cast_asCompositionTypeElementSyntaxArraySliceASTNode: CompositionTypeElementSyntax? {
        return _cast_asCompositionTypeElementSyntax
    }
    /// Only use if you are SURE it is GenericArgumentSyntax
    var _cast_asGenericArgumentSyntaxLiveASTNode: GenericArgumentSyntax? {
        return _cast_asGenericArgumentSyntax
    }
    var _cast_asGenericArgumentSyntaxArraySliceASTNode: GenericArgumentSyntax? {
        return _cast_asGenericArgumentSyntax
    }
    /// Only use if you are SURE it is TypeAnnotationSyntax
    var _cast_asTypeAnnotationSyntaxLiveASTNode: TypeAnnotationSyntax? {
        return _cast_asTypeAnnotationSyntax
    }
    var _cast_asTypeAnnotationSyntaxArraySliceASTNode: TypeAnnotationSyntax? {
        return _cast_asTypeAnnotationSyntax
    }
    /// Only use if you are SURE it is IsTypePatternSyntax
    var _cast_asIsTypePatternSyntaxLiveASTNode: IsTypePatternSyntax? {
        return _cast_asIsTypePatternSyntax
    }
    var _cast_asIsTypePatternSyntaxArraySliceASTNode: IsTypePatternSyntax? {
        return _cast_asIsTypePatternSyntax
    }
    /// Only use if you are SURE it is OptionalPatternSyntax
    var _cast_asOptionalPatternSyntaxLiveASTNode: OptionalPatternSyntax? {
        return _cast_asOptionalPatternSyntax
    }
    var _cast_asOptionalPatternSyntaxArraySliceASTNode: OptionalPatternSyntax? {
        return _cast_asOptionalPatternSyntax
    }
    /// Only use if you are SURE it is WildcardPatternSyntax
    var _cast_asWildcardPatternSyntaxLiveASTNode: WildcardPatternSyntax? {
        return _cast_asWildcardPatternSyntax
    }
    var _cast_asWildcardPatternSyntaxArraySliceASTNode: WildcardPatternSyntax? {
        return _cast_asWildcardPatternSyntax
    }
    /// Only use if you are SURE it is ValueBindingPatternSyntax
    var _cast_asValueBindingPatternSyntaxLiveASTNode: ValueBindingPatternSyntax? {
        return _cast_asValueBindingPatternSyntax
    }
    var _cast_asValueBindingPatternSyntaxArraySliceASTNode: ValueBindingPatternSyntax? {
        return _cast_asValueBindingPatternSyntax
    }
    /// Only use if you are SURE it is AvailabilityArgumentSyntax
    var _cast_asAvailabilityArgumentSyntaxLiveASTNode: AvailabilityArgumentSyntax? {
        return _cast_asAvailabilityArgumentSyntax
    }
    var _cast_asAvailabilityArgumentSyntaxArraySliceASTNode: AvailabilityArgumentSyntax? {
        return _cast_asAvailabilityArgumentSyntax
    }
    /// Only use if you are SURE it is AvailabilityVersionRestrictionSyntax
    var _cast_asAvailabilityVersionRestrictionSyntaxLiveASTNode: AvailabilityVersionRestrictionSyntax? {
        return _cast_asAvailabilityVersionRestrictionSyntax
    }
    var _cast_asAvailabilityVersionRestrictionSyntaxArraySliceASTNode: AvailabilityVersionRestrictionSyntax? {
        return _cast_asAvailabilityVersionRestrictionSyntax
    }
    /// Only use if you are SURE it is CodeBlockItemSyntax
    var _cast_asCodeBlockItemSyntaxLiveASTNode: CodeBlockItemSyntax? {
        return _cast_asCodeBlockItemSyntax
    }
    var _cast_asCodeBlockItemSyntaxArraySliceASTNode: CodeBlockItemSyntax? {
        return _cast_asCodeBlockItemSyntax
    }
    /// Only use if you are SURE it is CodeBlockSyntax
    var _cast_asCodeBlockSyntaxLiveASTNode: CodeBlockSyntax? {
        return _cast_asCodeBlockSyntax
    }
    var _cast_asCodeBlockSyntaxArraySliceASTNode: CodeBlockSyntax? {
        return _cast_asCodeBlockSyntax
    }
    /// Only use if you are SURE it is TryExprSyntax
    var _cast_asTryExprSyntaxLiveASTNode: TryExprSyntax? {
        return _cast_asTryExprSyntax
    }
    var _cast_asTryExprSyntaxArraySliceASTNode: TryExprSyntax? {
        return _cast_asTryExprSyntax
    }
    /// Only use if you are SURE it is DeclNameArgumentsSyntax
    var _cast_asDeclNameArgumentsSyntaxLiveASTNode: DeclNameArgumentsSyntax? {
        return _cast_asDeclNameArgumentsSyntax
    }
    var _cast_asDeclNameArgumentsSyntaxArraySliceASTNode: DeclNameArgumentsSyntax? {
        return _cast_asDeclNameArgumentsSyntax
    }
    /// Only use if you are SURE it is ArrowExprSyntax
    var _cast_asArrowExprSyntaxLiveASTNode: ArrowExprSyntax? {
        return _cast_asArrowExprSyntax
    }
    var _cast_asArrowExprSyntaxArraySliceASTNode: ArrowExprSyntax? {
        return _cast_asArrowExprSyntax
    }
    /// Only use if you are SURE it is TupleExprSyntax
    var _cast_asTupleExprSyntaxLiveASTNode: TupleExprSyntax? {
        return _cast_asTupleExprSyntax
    }
    var _cast_asTupleExprSyntaxArraySliceASTNode: TupleExprSyntax? {
        return _cast_asTupleExprSyntax
    }
    /// Only use if you are SURE it is ArrayExprSyntax
    var _cast_asArrayExprSyntaxLiveASTNode: ArrayExprSyntax? {
        return _cast_asArrayExprSyntax
    }
    var _cast_asArrayExprSyntaxArraySliceASTNode: ArrayExprSyntax? {
        return _cast_asArrayExprSyntax
    }
    /// Only use if you are SURE it is DictionaryExprSyntax
    var _cast_asDictionaryExprSyntaxLiveASTNode: DictionaryExprSyntax? {
        return _cast_asDictionaryExprSyntax
    }
    var _cast_asDictionaryExprSyntaxArraySliceASTNode: DictionaryExprSyntax? {
        return _cast_asDictionaryExprSyntax
    }
    /// Only use if you are SURE it is AsExprSyntax
    var _cast_asAsExprSyntaxLiveASTNode: AsExprSyntax? {
        return _cast_asAsExprSyntax
    }
    var _cast_asAsExprSyntaxArraySliceASTNode: AsExprSyntax? {
        return _cast_asAsExprSyntax
    }
    /// Only use if you are SURE it is ClosureCaptureSignatureSyntax
    var _cast_asClosureCaptureSignatureSyntaxLiveASTNode: ClosureCaptureSignatureSyntax? {
        return _cast_asClosureCaptureSignatureSyntax
    }
    var _cast_asClosureCaptureSignatureSyntaxArraySliceASTNode: ClosureCaptureSignatureSyntax? {
        return _cast_asClosureCaptureSignatureSyntax
    }
    /// Only use if you are SURE it is MultipleTrailingClosureElementSyntax
    var _cast_asMultipleTrailingClosureElementSyntaxLiveASTNode: MultipleTrailingClosureElementSyntax? {
        return _cast_asMultipleTrailingClosureElementSyntax
    }
    var _cast_asMultipleTrailingClosureElementSyntaxArraySliceASTNode: MultipleTrailingClosureElementSyntax? {
        return _cast_asMultipleTrailingClosureElementSyntax
    }
    /// Only use if you are SURE it is KeyPathExprSyntax
    var _cast_asKeyPathExprSyntaxLiveASTNode: KeyPathExprSyntax? {
        return _cast_asKeyPathExprSyntax
    }
    var _cast_asKeyPathExprSyntaxArraySliceASTNode: KeyPathExprSyntax? {
        return _cast_asKeyPathExprSyntax
    }
    /// Only use if you are SURE it is ParameterClauseSyntax
    var _cast_asParameterClauseSyntaxLiveASTNode: ParameterClauseSyntax? {
        return _cast_asParameterClauseSyntax
    }
    var _cast_asParameterClauseSyntaxArraySliceASTNode: ParameterClauseSyntax? {
        return _cast_asParameterClauseSyntax
    }
    /// Only use if you are SURE it is IfConfigClauseSyntax
    var _cast_asIfConfigClauseSyntaxLiveASTNode: IfConfigClauseSyntax? {
        return _cast_asIfConfigClauseSyntax
    }
    var _cast_asIfConfigClauseSyntaxArraySliceASTNode: IfConfigClauseSyntax? {
        return _cast_asIfConfigClauseSyntax
    }
    /// Only use if you are SURE it is MemberDeclBlockSyntax
    var _cast_asMemberDeclBlockSyntaxLiveASTNode: MemberDeclBlockSyntax? {
        return _cast_asMemberDeclBlockSyntax
    }
    var _cast_asMemberDeclBlockSyntaxArraySliceASTNode: MemberDeclBlockSyntax? {
        return _cast_asMemberDeclBlockSyntax
    }
    /// Only use if you are SURE it is AccessorParameterSyntax
    var _cast_asAccessorParameterSyntaxLiveASTNode: AccessorParameterSyntax? {
        return _cast_asAccessorParameterSyntax
    }
    var _cast_asAccessorParameterSyntaxArraySliceASTNode: AccessorParameterSyntax? {
        return _cast_asAccessorParameterSyntax
    }
    /// Only use if you are SURE it is AccessorBlockSyntax
    var _cast_asAccessorBlockSyntaxLiveASTNode: AccessorBlockSyntax? {
        return _cast_asAccessorBlockSyntax
    }
    var _cast_asAccessorBlockSyntaxArraySliceASTNode: AccessorBlockSyntax? {
        return _cast_asAccessorBlockSyntax
    }
    /// Only use if you are SURE it is PrecedenceGroupRelationSyntax
    var _cast_asPrecedenceGroupRelationSyntaxLiveASTNode: PrecedenceGroupRelationSyntax? {
        return _cast_asPrecedenceGroupRelationSyntax
    }
    var _cast_asPrecedenceGroupRelationSyntaxArraySliceASTNode: PrecedenceGroupRelationSyntax? {
        return _cast_asPrecedenceGroupRelationSyntax
    }
    /// Only use if you are SURE it is PrecedenceGroupAssignmentSyntax
    var _cast_asPrecedenceGroupAssignmentSyntaxLiveASTNode: PrecedenceGroupAssignmentSyntax? {
        return _cast_asPrecedenceGroupAssignmentSyntax
    }
    var _cast_asPrecedenceGroupAssignmentSyntaxArraySliceASTNode: PrecedenceGroupAssignmentSyntax? {
        return _cast_asPrecedenceGroupAssignmentSyntax
    }
    /// Only use if you are SURE it is PrecedenceGroupAssociativitySyntax
    var _cast_asPrecedenceGroupAssociativitySyntaxLiveASTNode: PrecedenceGroupAssociativitySyntax? {
        return _cast_asPrecedenceGroupAssociativitySyntax
    }
    var _cast_asPrecedenceGroupAssociativitySyntaxArraySliceASTNode: PrecedenceGroupAssociativitySyntax? {
        return _cast_asPrecedenceGroupAssociativitySyntax
    }
    /// Only use if you are SURE it is NamedAttributeStringArgumentSyntax
    var _cast_asNamedAttributeStringArgumentSyntaxLiveASTNode: NamedAttributeStringArgumentSyntax? {
        return _cast_asNamedAttributeStringArgumentSyntax
    }
    var _cast_asNamedAttributeStringArgumentSyntaxArraySliceASTNode: NamedAttributeStringArgumentSyntax? {
        return _cast_asNamedAttributeStringArgumentSyntax
    }
    /// Only use if you are SURE it is DifferentiabilityParamsClauseSyntax
    var _cast_asDifferentiabilityParamsClauseSyntaxLiveASTNode: DifferentiabilityParamsClauseSyntax? {
        return _cast_asDifferentiabilityParamsClauseSyntax
    }
    var _cast_asDifferentiabilityParamsClauseSyntaxArraySliceASTNode: DifferentiabilityParamsClauseSyntax? {
        return _cast_asDifferentiabilityParamsClauseSyntax
    }
    /// Only use if you are SURE it is DifferentiabilityParamsSyntax
    var _cast_asDifferentiabilityParamsSyntaxLiveASTNode: DifferentiabilityParamsSyntax? {
        return _cast_asDifferentiabilityParamsSyntax
    }
    var _cast_asDifferentiabilityParamsSyntaxArraySliceASTNode: DifferentiabilityParamsSyntax? {
        return _cast_asDifferentiabilityParamsSyntax
    }
    /// Only use if you are SURE it is SwitchCaseSyntax
    var _cast_asSwitchCaseSyntaxLiveASTNode: SwitchCaseSyntax? {
        return _cast_asSwitchCaseSyntax
    }
    var _cast_asSwitchCaseSyntaxArraySliceASTNode: SwitchCaseSyntax? {
        return _cast_asSwitchCaseSyntax
    }
    /// Only use if you are SURE it is CaseItemSyntax
    var _cast_asCaseItemSyntaxLiveASTNode: CaseItemSyntax? {
        return _cast_asCaseItemSyntax
    }
    var _cast_asCaseItemSyntaxArraySliceASTNode: CaseItemSyntax? {
        return _cast_asCaseItemSyntax
    }
    /// Only use if you are SURE it is CatchItemSyntax
    var _cast_asCatchItemSyntaxLiveASTNode: CatchItemSyntax? {
        return _cast_asCatchItemSyntax
    }
    var _cast_asCatchItemSyntaxArraySliceASTNode: CatchItemSyntax? {
        return _cast_asCatchItemSyntax
    }
    /// Only use if you are SURE it is SwitchCaseLabelSyntax
    var _cast_asSwitchCaseLabelSyntaxLiveASTNode: SwitchCaseLabelSyntax? {
        return _cast_asSwitchCaseLabelSyntax
    }
    var _cast_asSwitchCaseLabelSyntaxArraySliceASTNode: SwitchCaseLabelSyntax? {
        return _cast_asSwitchCaseLabelSyntax
    }
    /// Only use if you are SURE it is CatchClauseSyntax
    var _cast_asCatchClauseSyntaxLiveASTNode: CatchClauseSyntax? {
        return _cast_asCatchClauseSyntax
    }
    var _cast_asCatchClauseSyntaxArraySliceASTNode: CatchClauseSyntax? {
        return _cast_asCatchClauseSyntax
    }
    /// Only use if you are SURE it is SameTypeRequirementSyntax
    var _cast_asSameTypeRequirementSyntaxLiveASTNode: SameTypeRequirementSyntax? {
        return _cast_asSameTypeRequirementSyntax
    }
    var _cast_asSameTypeRequirementSyntaxArraySliceASTNode: SameTypeRequirementSyntax? {
        return _cast_asSameTypeRequirementSyntax
    }
    /// Only use if you are SURE it is GenericParameterClauseSyntax
    var _cast_asGenericParameterClauseSyntaxLiveASTNode: GenericParameterClauseSyntax? {
        return _cast_asGenericParameterClauseSyntax
    }
    var _cast_asGenericParameterClauseSyntaxArraySliceASTNode: GenericParameterClauseSyntax? {
        return _cast_asGenericParameterClauseSyntax
    }
    /// Only use if you are SURE it is ConformanceRequirementSyntax
    var _cast_asConformanceRequirementSyntaxLiveASTNode: ConformanceRequirementSyntax? {
        return _cast_asConformanceRequirementSyntax
    }
    var _cast_asConformanceRequirementSyntaxArraySliceASTNode: ConformanceRequirementSyntax? {
        return _cast_asConformanceRequirementSyntax
    }
    /// Only use if you are SURE it is ArrayTypeSyntax
    var _cast_asArrayTypeSyntaxLiveASTNode: ArrayTypeSyntax? {
        return _cast_asArrayTypeSyntax
    }
    var _cast_asArrayTypeSyntaxArraySliceASTNode: ArrayTypeSyntax? {
        return _cast_asArrayTypeSyntax
    }
    /// Only use if you are SURE it is MetatypeTypeSyntax
    var _cast_asMetatypeTypeSyntaxLiveASTNode: MetatypeTypeSyntax? {
        return _cast_asMetatypeTypeSyntax
    }
    var _cast_asMetatypeTypeSyntaxArraySliceASTNode: MetatypeTypeSyntax? {
        return _cast_asMetatypeTypeSyntax
    }
    /// Only use if you are SURE it is TupleTypeSyntax
    var _cast_asTupleTypeSyntaxLiveASTNode: TupleTypeSyntax? {
        return _cast_asTupleTypeSyntax
    }
    var _cast_asTupleTypeSyntaxArraySliceASTNode: TupleTypeSyntax? {
        return _cast_asTupleTypeSyntax
    }
    /// Only use if you are SURE it is AttributedTypeSyntax
    var _cast_asAttributedTypeSyntaxLiveASTNode: AttributedTypeSyntax? {
        return _cast_asAttributedTypeSyntax
    }
    var _cast_asAttributedTypeSyntaxArraySliceASTNode: AttributedTypeSyntax? {
        return _cast_asAttributedTypeSyntax
    }
    /// Only use if you are SURE it is GenericArgumentClauseSyntax
    var _cast_asGenericArgumentClauseSyntaxLiveASTNode: GenericArgumentClauseSyntax? {
        return _cast_asGenericArgumentClauseSyntax
    }
    var _cast_asGenericArgumentClauseSyntaxArraySliceASTNode: GenericArgumentClauseSyntax? {
        return _cast_asGenericArgumentClauseSyntax
    }
    /// Only use if you are SURE it is AsTypePatternSyntax
    var _cast_asAsTypePatternSyntaxLiveASTNode: AsTypePatternSyntax? {
        return _cast_asAsTypePatternSyntax
    }
    var _cast_asAsTypePatternSyntaxArraySliceASTNode: AsTypePatternSyntax? {
        return _cast_asAsTypePatternSyntax
    }
    /// Only use if you are SURE it is TuplePatternSyntax
    var _cast_asTuplePatternSyntaxLiveASTNode: TuplePatternSyntax? {
        return _cast_asTuplePatternSyntax
    }
    var _cast_asTuplePatternSyntaxArraySliceASTNode: TuplePatternSyntax? {
        return _cast_asTuplePatternSyntax
    }
    /// Only use if you are SURE it is AvailabilityLabeledArgumentSyntax
    var _cast_asAvailabilityLabeledArgumentSyntaxLiveASTNode: AvailabilityLabeledArgumentSyntax? {
        return _cast_asAvailabilityLabeledArgumentSyntax
    }
    var _cast_asAvailabilityLabeledArgumentSyntaxArraySliceASTNode: AvailabilityLabeledArgumentSyntax? {
        return _cast_asAvailabilityLabeledArgumentSyntax
    }
    /// Only use if you are SURE it is VersionTupleSyntax
    var _cast_asVersionTupleSyntaxLiveASTNode: VersionTupleSyntax? {
        return _cast_asVersionTupleSyntax
    }
    var _cast_asVersionTupleSyntaxArraySliceASTNode: VersionTupleSyntax? {
        return _cast_asVersionTupleSyntax
    }
    /// Only use if you are SURE it is TupleExprElementSyntax
    var _cast_asTupleExprElementSyntaxLiveASTNode: TupleExprElementSyntax? {
        return _cast_asTupleExprElementSyntax
    }
    var _cast_asTupleExprElementSyntaxArraySliceASTNode: TupleExprElementSyntax? {
        return _cast_asTupleExprElementSyntax
    }
    /// Only use if you are SURE it is DictionaryElementSyntax
    var _cast_asDictionaryElementSyntaxLiveASTNode: DictionaryElementSyntax? {
        return _cast_asDictionaryElementSyntax
    }
    var _cast_asDictionaryElementSyntaxArraySliceASTNode: DictionaryElementSyntax? {
        return _cast_asDictionaryElementSyntax
    }
    /// Only use if you are SURE it is MemberAccessExprSyntax
    var _cast_asMemberAccessExprSyntaxLiveASTNode: MemberAccessExprSyntax? {
        return _cast_asMemberAccessExprSyntax
    }
    var _cast_asMemberAccessExprSyntaxArraySliceASTNode: MemberAccessExprSyntax? {
        return _cast_asMemberAccessExprSyntax
    }
    /// Only use if you are SURE it is ClosureExprSyntax
    var _cast_asClosureExprSyntaxLiveASTNode: ClosureExprSyntax? {
        return _cast_asClosureExprSyntax
    }
    var _cast_asClosureExprSyntaxArraySliceASTNode: ClosureExprSyntax? {
        return _cast_asClosureExprSyntax
    }
    /// Only use if you are SURE it is ObjcKeyPathExprSyntax
    var _cast_asObjcKeyPathExprSyntaxLiveASTNode: ObjcKeyPathExprSyntax? {
        return _cast_asObjcKeyPathExprSyntax
    }
    var _cast_asObjcKeyPathExprSyntaxArraySliceASTNode: ObjcKeyPathExprSyntax? {
        return _cast_asObjcKeyPathExprSyntax
    }
    /// Only use if you are SURE it is ObjectLiteralExprSyntax
    var _cast_asObjectLiteralExprSyntaxLiveASTNode: ObjectLiteralExprSyntax? {
        return _cast_asObjectLiteralExprSyntax
    }
    var _cast_asObjectLiteralExprSyntaxArraySliceASTNode: ObjectLiteralExprSyntax? {
        return _cast_asObjectLiteralExprSyntax
    }
    /// Only use if you are SURE it is FunctionSignatureSyntax
    var _cast_asFunctionSignatureSyntaxLiveASTNode: FunctionSignatureSyntax? {
        return _cast_asFunctionSignatureSyntax
    }
    var _cast_asFunctionSignatureSyntaxArraySliceASTNode: FunctionSignatureSyntax? {
        return _cast_asFunctionSignatureSyntax
    }
    /// Only use if you are SURE it is PoundErrorDeclSyntax
    var _cast_asPoundErrorDeclSyntaxLiveASTNode: PoundErrorDeclSyntax? {
        return _cast_asPoundErrorDeclSyntax
    }
    var _cast_asPoundErrorDeclSyntaxArraySliceASTNode: PoundErrorDeclSyntax? {
        return _cast_asPoundErrorDeclSyntax
    }
    /// Only use if you are SURE it is PoundWarningDeclSyntax
    var _cast_asPoundWarningDeclSyntaxLiveASTNode: PoundWarningDeclSyntax? {
        return _cast_asPoundWarningDeclSyntax
    }
    var _cast_asPoundWarningDeclSyntaxArraySliceASTNode: PoundWarningDeclSyntax? {
        return _cast_asPoundWarningDeclSyntax
    }
    /// Only use if you are SURE it is PoundSourceLocationSyntax
    var _cast_asPoundSourceLocationSyntaxLiveASTNode: PoundSourceLocationSyntax? {
        return _cast_asPoundSourceLocationSyntax
    }
    var _cast_asPoundSourceLocationSyntaxArraySliceASTNode: PoundSourceLocationSyntax? {
        return _cast_asPoundSourceLocationSyntax
    }
    /// Only use if you are SURE it is DeclModifierSyntax
    var _cast_asDeclModifierSyntaxLiveASTNode: DeclModifierSyntax? {
        return _cast_asDeclModifierSyntax
    }
    var _cast_asDeclModifierSyntaxArraySliceASTNode: DeclModifierSyntax? {
        return _cast_asDeclModifierSyntax
    }
    /// Only use if you are SURE it is DeinitializerDeclSyntax
    var _cast_asDeinitializerDeclSyntaxLiveASTNode: DeinitializerDeclSyntax? {
        return _cast_asDeinitializerDeclSyntax
    }
    var _cast_asDeinitializerDeclSyntaxArraySliceASTNode: DeinitializerDeclSyntax? {
        return _cast_asDeinitializerDeclSyntax
    }
    /// Only use if you are SURE it is AccessLevelModifierSyntax
    var _cast_asAccessLevelModifierSyntaxLiveASTNode: AccessLevelModifierSyntax? {
        return _cast_asAccessLevelModifierSyntax
    }
    var _cast_asAccessLevelModifierSyntaxArraySliceASTNode: AccessLevelModifierSyntax? {
        return _cast_asAccessLevelModifierSyntax
    }
    /// Only use if you are SURE it is VariableDeclSyntax
    var _cast_asVariableDeclSyntaxLiveASTNode: VariableDeclSyntax? {
        return _cast_asVariableDeclSyntax
    }
    var _cast_asVariableDeclSyntaxArraySliceASTNode: VariableDeclSyntax? {
        return _cast_asVariableDeclSyntax
    }
    /// Only use if you are SURE it is EnumCaseElementSyntax
    var _cast_asEnumCaseElementSyntaxLiveASTNode: EnumCaseElementSyntax? {
        return _cast_asEnumCaseElementSyntax
    }
    var _cast_asEnumCaseElementSyntaxArraySliceASTNode: EnumCaseElementSyntax? {
        return _cast_asEnumCaseElementSyntax
    }
    /// Only use if you are SURE it is EnumCaseDeclSyntax
    var _cast_asEnumCaseDeclSyntaxLiveASTNode: EnumCaseDeclSyntax? {
        return _cast_asEnumCaseDeclSyntax
    }
    var _cast_asEnumCaseDeclSyntaxArraySliceASTNode: EnumCaseDeclSyntax? {
        return _cast_asEnumCaseDeclSyntax
    }
    /// Only use if you are SURE it is LabeledSpecializeEntrySyntax
    var _cast_asLabeledSpecializeEntrySyntaxLiveASTNode: LabeledSpecializeEntrySyntax? {
        return _cast_asLabeledSpecializeEntrySyntax
    }
    var _cast_asLabeledSpecializeEntrySyntaxArraySliceASTNode: LabeledSpecializeEntrySyntax? {
        return _cast_asLabeledSpecializeEntrySyntax
    }
    /// Only use if you are SURE it is TargetFunctionEntrySyntax
    var _cast_asTargetFunctionEntrySyntaxLiveASTNode: TargetFunctionEntrySyntax? {
        return _cast_asTargetFunctionEntrySyntax
    }
    var _cast_asTargetFunctionEntrySyntaxArraySliceASTNode: TargetFunctionEntrySyntax? {
        return _cast_asTargetFunctionEntrySyntax
    }
    /// Only use if you are SURE it is ImplementsAttributeArgumentsSyntax
    var _cast_asImplementsAttributeArgumentsSyntaxLiveASTNode: ImplementsAttributeArgumentsSyntax? {
        return _cast_asImplementsAttributeArgumentsSyntax
    }
    var _cast_asImplementsAttributeArgumentsSyntaxArraySliceASTNode: ImplementsAttributeArgumentsSyntax? {
        return _cast_asImplementsAttributeArgumentsSyntax
    }
    /// Only use if you are SURE it is QualifiedDeclNameSyntax
    var _cast_asQualifiedDeclNameSyntaxLiveASTNode: QualifiedDeclNameSyntax? {
        return _cast_asQualifiedDeclNameSyntax
    }
    var _cast_asQualifiedDeclNameSyntaxArraySliceASTNode: QualifiedDeclNameSyntax? {
        return _cast_asQualifiedDeclNameSyntax
    }
    /// Only use if you are SURE it is GuardStmtSyntax
    var _cast_asGuardStmtSyntaxLiveASTNode: GuardStmtSyntax? {
        return _cast_asGuardStmtSyntax
    }
    var _cast_asGuardStmtSyntaxArraySliceASTNode: GuardStmtSyntax? {
        return _cast_asGuardStmtSyntax
    }
    /// Only use if you are SURE it is YieldListSyntax
    var _cast_asYieldListSyntaxLiveASTNode: YieldListSyntax? {
        return _cast_asYieldListSyntax
    }
    var _cast_asYieldListSyntaxArraySliceASTNode: YieldListSyntax? {
        return _cast_asYieldListSyntax
    }
    /// Only use if you are SURE it is AvailabilityConditionSyntax
    var _cast_asAvailabilityConditionSyntaxLiveASTNode: AvailabilityConditionSyntax? {
        return _cast_asAvailabilityConditionSyntax
    }
    var _cast_asAvailabilityConditionSyntaxArraySliceASTNode: AvailabilityConditionSyntax? {
        return _cast_asAvailabilityConditionSyntax
    }
    /// Only use if you are SURE it is MatchingPatternConditionSyntax
    var _cast_asMatchingPatternConditionSyntaxLiveASTNode: MatchingPatternConditionSyntax? {
        return _cast_asMatchingPatternConditionSyntax
    }
    var _cast_asMatchingPatternConditionSyntaxArraySliceASTNode: MatchingPatternConditionSyntax? {
        return _cast_asMatchingPatternConditionSyntax
    }
    /// Only use if you are SURE it is OptionalBindingConditionSyntax
    var _cast_asOptionalBindingConditionSyntaxLiveASTNode: OptionalBindingConditionSyntax? {
        return _cast_asOptionalBindingConditionSyntax
    }
    var _cast_asOptionalBindingConditionSyntaxArraySliceASTNode: OptionalBindingConditionSyntax? {
        return _cast_asOptionalBindingConditionSyntax
    }
    /// Only use if you are SURE it is MemberTypeIdentifierSyntax
    var _cast_asMemberTypeIdentifierSyntaxLiveASTNode: MemberTypeIdentifierSyntax? {
        return _cast_asMemberTypeIdentifierSyntax
    }
    var _cast_asMemberTypeIdentifierSyntaxArraySliceASTNode: MemberTypeIdentifierSyntax? {
        return _cast_asMemberTypeIdentifierSyntax
    }
    /// Only use if you are SURE it is EnumCasePatternSyntax
    var _cast_asEnumCasePatternSyntaxLiveASTNode: EnumCasePatternSyntax? {
        return _cast_asEnumCasePatternSyntax
    }
    var _cast_asEnumCasePatternSyntaxArraySliceASTNode: EnumCasePatternSyntax? {
        return _cast_asEnumCasePatternSyntax
    }
    /// Only use if you are SURE it is TuplePatternElementSyntax
    var _cast_asTuplePatternElementSyntaxLiveASTNode: TuplePatternElementSyntax? {
        return _cast_asTuplePatternElementSyntax
    }
    var _cast_asTuplePatternElementSyntaxArraySliceASTNode: TuplePatternElementSyntax? {
        return _cast_asTuplePatternElementSyntax
    }
    /// Only use if you are SURE it is TernaryExprSyntax
    var _cast_asTernaryExprSyntaxLiveASTNode: TernaryExprSyntax? {
        return _cast_asTernaryExprSyntax
    }
    var _cast_asTernaryExprSyntaxArraySliceASTNode: TernaryExprSyntax? {
        return _cast_asTernaryExprSyntax
    }
    /// Only use if you are SURE it is ClosureCaptureItemSyntax
    var _cast_asClosureCaptureItemSyntaxLiveASTNode: ClosureCaptureItemSyntax? {
        return _cast_asClosureCaptureItemSyntax
    }
    var _cast_asClosureCaptureItemSyntaxArraySliceASTNode: ClosureCaptureItemSyntax? {
        return _cast_asClosureCaptureItemSyntax
    }
    /// Only use if you are SURE it is ExpressionSegmentSyntax
    var _cast_asExpressionSegmentSyntaxLiveASTNode: ExpressionSegmentSyntax? {
        return _cast_asExpressionSegmentSyntax
    }
    var _cast_asExpressionSegmentSyntaxArraySliceASTNode: ExpressionSegmentSyntax? {
        return _cast_asExpressionSegmentSyntax
    }
    /// Only use if you are SURE it is StringLiteralExprSyntax
    var _cast_asStringLiteralExprSyntaxLiveASTNode: StringLiteralExprSyntax? {
        return _cast_asStringLiteralExprSyntax
    }
    var _cast_asStringLiteralExprSyntaxArraySliceASTNode: StringLiteralExprSyntax? {
        return _cast_asStringLiteralExprSyntax
    }
    /// Only use if you are SURE it is ImportDeclSyntax
    var _cast_asImportDeclSyntaxLiveASTNode: ImportDeclSyntax? {
        return _cast_asImportDeclSyntax
    }
    var _cast_asImportDeclSyntaxArraySliceASTNode: ImportDeclSyntax? {
        return _cast_asImportDeclSyntax
    }
    /// Only use if you are SURE it is PatternBindingSyntax
    var _cast_asPatternBindingSyntaxLiveASTNode: PatternBindingSyntax? {
        return _cast_asPatternBindingSyntax
    }
    var _cast_asPatternBindingSyntaxArraySliceASTNode: PatternBindingSyntax? {
        return _cast_asPatternBindingSyntax
    }
    /// Only use if you are SURE it is OperatorDeclSyntax
    var _cast_asOperatorDeclSyntaxLiveASTNode: OperatorDeclSyntax? {
        return _cast_asOperatorDeclSyntax
    }
    var _cast_asOperatorDeclSyntaxArraySliceASTNode: OperatorDeclSyntax? {
        return _cast_asOperatorDeclSyntax
    }
    /// Only use if you are SURE it is CustomAttributeSyntax
    var _cast_asCustomAttributeSyntaxLiveASTNode: CustomAttributeSyntax? {
        return _cast_asCustomAttributeSyntax
    }
    var _cast_asCustomAttributeSyntaxArraySliceASTNode: CustomAttributeSyntax? {
        return _cast_asCustomAttributeSyntax
    }
    /// Only use if you are SURE it is DifferentiableAttributeArgumentsSyntax
    var _cast_asDifferentiableAttributeArgumentsSyntaxLiveASTNode: DifferentiableAttributeArgumentsSyntax? {
        return _cast_asDifferentiableAttributeArgumentsSyntax
    }
    var _cast_asDifferentiableAttributeArgumentsSyntaxArraySliceASTNode: DifferentiableAttributeArgumentsSyntax? {
        return _cast_asDifferentiableAttributeArgumentsSyntax
    }
    /// Only use if you are SURE it is WhileStmtSyntax
    var _cast_asWhileStmtSyntaxLiveASTNode: WhileStmtSyntax? {
        return _cast_asWhileStmtSyntax
    }
    var _cast_asWhileStmtSyntaxArraySliceASTNode: WhileStmtSyntax? {
        return _cast_asWhileStmtSyntax
    }
    /// Only use if you are SURE it is DoStmtSyntax
    var _cast_asDoStmtSyntaxLiveASTNode: DoStmtSyntax? {
        return _cast_asDoStmtSyntax
    }
    var _cast_asDoStmtSyntaxArraySliceASTNode: DoStmtSyntax? {
        return _cast_asDoStmtSyntax
    }
    /// Only use if you are SURE it is GenericParameterSyntax
    var _cast_asGenericParameterSyntaxLiveASTNode: GenericParameterSyntax? {
        return _cast_asGenericParameterSyntax
    }
    var _cast_asGenericParameterSyntaxArraySliceASTNode: GenericParameterSyntax? {
        return _cast_asGenericParameterSyntax
    }
    /// Only use if you are SURE it is DictionaryTypeSyntax
    var _cast_asDictionaryTypeSyntaxLiveASTNode: DictionaryTypeSyntax? {
        return _cast_asDictionaryTypeSyntax
    }
    var _cast_asDictionaryTypeSyntaxArraySliceASTNode: DictionaryTypeSyntax? {
        return _cast_asDictionaryTypeSyntax
    }
    /// Only use if you are SURE it is FunctionCallExprSyntax
    var _cast_asFunctionCallExprSyntaxLiveASTNode: FunctionCallExprSyntax? {
        return _cast_asFunctionCallExprSyntax
    }
    var _cast_asFunctionCallExprSyntaxArraySliceASTNode: FunctionCallExprSyntax? {
        return _cast_asFunctionCallExprSyntax
    }
    /// Only use if you are SURE it is SubscriptExprSyntax
    var _cast_asSubscriptExprSyntaxLiveASTNode: SubscriptExprSyntax? {
        return _cast_asSubscriptExprSyntax
    }
    var _cast_asSubscriptExprSyntaxArraySliceASTNode: SubscriptExprSyntax? {
        return _cast_asSubscriptExprSyntax
    }
    /// Only use if you are SURE it is ObjcSelectorExprSyntax
    var _cast_asObjcSelectorExprSyntaxLiveASTNode: ObjcSelectorExprSyntax? {
        return _cast_asObjcSelectorExprSyntax
    }
    var _cast_asObjcSelectorExprSyntaxArraySliceASTNode: ObjcSelectorExprSyntax? {
        return _cast_asObjcSelectorExprSyntax
    }
    /// Only use if you are SURE it is AttributeSyntax
    var _cast_asAttributeSyntaxLiveASTNode: AttributeSyntax? {
        return _cast_asAttributeSyntax
    }
    var _cast_asAttributeSyntaxArraySliceASTNode: AttributeSyntax? {
        return _cast_asAttributeSyntax
    }
    /// Only use if you are SURE it is RepeatWhileStmtSyntax
    var _cast_asRepeatWhileStmtSyntaxLiveASTNode: RepeatWhileStmtSyntax? {
        return _cast_asRepeatWhileStmtSyntax
    }
    var _cast_asRepeatWhileStmtSyntaxArraySliceASTNode: RepeatWhileStmtSyntax? {
        return _cast_asRepeatWhileStmtSyntax
    }
    /// Only use if you are SURE it is PoundAssertStmtSyntax
    var _cast_asPoundAssertStmtSyntaxLiveASTNode: PoundAssertStmtSyntax? {
        return _cast_asPoundAssertStmtSyntax
    }
    var _cast_asPoundAssertStmtSyntaxArraySliceASTNode: PoundAssertStmtSyntax? {
        return _cast_asPoundAssertStmtSyntax
    }
    /// Only use if you are SURE it is ClosureSignatureSyntax
    var _cast_asClosureSignatureSyntaxLiveASTNode: ClosureSignatureSyntax? {
        return _cast_asClosureSignatureSyntax
    }
    var _cast_asClosureSignatureSyntaxArraySliceASTNode: ClosureSignatureSyntax? {
        return _cast_asClosureSignatureSyntax
    }
    /// Only use if you are SURE it is TypealiasDeclSyntax
    var _cast_asTypealiasDeclSyntaxLiveASTNode: TypealiasDeclSyntax? {
        return _cast_asTypealiasDeclSyntax
    }
    var _cast_asTypealiasDeclSyntaxArraySliceASTNode: TypealiasDeclSyntax? {
        return _cast_asTypealiasDeclSyntax
    }
    /// Only use if you are SURE it is AssociatedtypeDeclSyntax
    var _cast_asAssociatedtypeDeclSyntaxLiveASTNode: AssociatedtypeDeclSyntax? {
        return _cast_asAssociatedtypeDeclSyntax
    }
    var _cast_asAssociatedtypeDeclSyntaxArraySliceASTNode: AssociatedtypeDeclSyntax? {
        return _cast_asAssociatedtypeDeclSyntax
    }
    /// Only use if you are SURE it is PoundSourceLocationArgsSyntax
    var _cast_asPoundSourceLocationArgsSyntaxLiveASTNode: PoundSourceLocationArgsSyntax? {
        return _cast_asPoundSourceLocationArgsSyntax
    }
    var _cast_asPoundSourceLocationArgsSyntaxArraySliceASTNode: PoundSourceLocationArgsSyntax? {
        return _cast_asPoundSourceLocationArgsSyntax
    }
    /// Only use if you are SURE it is ProtocolDeclSyntax
    var _cast_asProtocolDeclSyntaxLiveASTNode: ProtocolDeclSyntax? {
        return _cast_asProtocolDeclSyntax
    }
    var _cast_asProtocolDeclSyntaxArraySliceASTNode: ProtocolDeclSyntax? {
        return _cast_asProtocolDeclSyntax
    }
    /// Only use if you are SURE it is ExtensionDeclSyntax
    var _cast_asExtensionDeclSyntaxLiveASTNode: ExtensionDeclSyntax? {
        return _cast_asExtensionDeclSyntax
    }
    var _cast_asExtensionDeclSyntaxArraySliceASTNode: ExtensionDeclSyntax? {
        return _cast_asExtensionDeclSyntax
    }
    /// Only use if you are SURE it is AccessorDeclSyntax
    var _cast_asAccessorDeclSyntaxLiveASTNode: AccessorDeclSyntax? {
        return _cast_asAccessorDeclSyntax
    }
    var _cast_asAccessorDeclSyntaxArraySliceASTNode: AccessorDeclSyntax? {
        return _cast_asAccessorDeclSyntax
    }
    /// Only use if you are SURE it is PrecedenceGroupDeclSyntax
    var _cast_asPrecedenceGroupDeclSyntaxLiveASTNode: PrecedenceGroupDeclSyntax? {
        return _cast_asPrecedenceGroupDeclSyntax
    }
    var _cast_asPrecedenceGroupDeclSyntaxArraySliceASTNode: PrecedenceGroupDeclSyntax? {
        return _cast_asPrecedenceGroupDeclSyntax
    }
    /// Only use if you are SURE it is DerivativeRegistrationAttributeArgumentsSyntax
    var _cast_asDerivativeRegistrationAttributeArgumentsSyntaxLiveASTNode: DerivativeRegistrationAttributeArgumentsSyntax? {
        return _cast_asDerivativeRegistrationAttributeArgumentsSyntax
    }
    var _cast_asDerivativeRegistrationAttributeArgumentsSyntaxArraySliceASTNode: DerivativeRegistrationAttributeArgumentsSyntax? {
        return _cast_asDerivativeRegistrationAttributeArgumentsSyntax
    }
    /// Only use if you are SURE it is SwitchStmtSyntax
    var _cast_asSwitchStmtSyntaxLiveASTNode: SwitchStmtSyntax? {
        return _cast_asSwitchStmtSyntax
    }
    var _cast_asSwitchStmtSyntaxArraySliceASTNode: SwitchStmtSyntax? {
        return _cast_asSwitchStmtSyntax
    }
    /// Only use if you are SURE it is IfStmtSyntax
    var _cast_asIfStmtSyntaxLiveASTNode: IfStmtSyntax? {
        return _cast_asIfStmtSyntax
    }
    var _cast_asIfStmtSyntaxArraySliceASTNode: IfStmtSyntax? {
        return _cast_asIfStmtSyntax
    }
    /// Only use if you are SURE it is FunctionTypeSyntax
    var _cast_asFunctionTypeSyntaxLiveASTNode: FunctionTypeSyntax? {
        return _cast_asFunctionTypeSyntax
    }
    var _cast_asFunctionTypeSyntaxArraySliceASTNode: FunctionTypeSyntax? {
        return _cast_asFunctionTypeSyntax
    }
    /// Only use if you are SURE it is ClassDeclSyntax
    var _cast_asClassDeclSyntaxLiveASTNode: ClassDeclSyntax? {
        return _cast_asClassDeclSyntax
    }
    var _cast_asClassDeclSyntaxArraySliceASTNode: ClassDeclSyntax? {
        return _cast_asClassDeclSyntax
    }
    /// Only use if you are SURE it is StructDeclSyntax
    var _cast_asStructDeclSyntaxLiveASTNode: StructDeclSyntax? {
        return _cast_asStructDeclSyntax
    }
    var _cast_asStructDeclSyntaxArraySliceASTNode: StructDeclSyntax? {
        return _cast_asStructDeclSyntax
    }
    /// Only use if you are SURE it is FunctionParameterSyntax
    var _cast_asFunctionParameterSyntaxLiveASTNode: FunctionParameterSyntax? {
        return _cast_asFunctionParameterSyntax
    }
    var _cast_asFunctionParameterSyntaxArraySliceASTNode: FunctionParameterSyntax? {
        return _cast_asFunctionParameterSyntax
    }
    /// Only use if you are SURE it is FunctionDeclSyntax
    var _cast_asFunctionDeclSyntaxLiveASTNode: FunctionDeclSyntax? {
        return _cast_asFunctionDeclSyntax
    }
    var _cast_asFunctionDeclSyntaxArraySliceASTNode: FunctionDeclSyntax? {
        return _cast_asFunctionDeclSyntax
    }
    /// Only use if you are SURE it is SubscriptDeclSyntax
    var _cast_asSubscriptDeclSyntaxLiveASTNode: SubscriptDeclSyntax? {
        return _cast_asSubscriptDeclSyntax
    }
    var _cast_asSubscriptDeclSyntaxArraySliceASTNode: SubscriptDeclSyntax? {
        return _cast_asSubscriptDeclSyntax
    }
    /// Only use if you are SURE it is EnumDeclSyntax
    var _cast_asEnumDeclSyntaxLiveASTNode: EnumDeclSyntax? {
        return _cast_asEnumDeclSyntax
    }
    var _cast_asEnumDeclSyntaxArraySliceASTNode: EnumDeclSyntax? {
        return _cast_asEnumDeclSyntax
    }
    /// Only use if you are SURE it is TupleTypeElementSyntax
    var _cast_asTupleTypeElementSyntaxLiveASTNode: TupleTypeElementSyntax? {
        return _cast_asTupleTypeElementSyntax
    }
    var _cast_asTupleTypeElementSyntaxArraySliceASTNode: TupleTypeElementSyntax? {
        return _cast_asTupleTypeElementSyntax
    }
    /// Only use if you are SURE it is InitializerDeclSyntax
    var _cast_asInitializerDeclSyntaxLiveASTNode: InitializerDeclSyntax? {
        return _cast_asInitializerDeclSyntax
    }
    var _cast_asInitializerDeclSyntaxArraySliceASTNode: InitializerDeclSyntax? {
        return _cast_asInitializerDeclSyntax
    }
    /// Only use if you are SURE it is ForInStmtSyntax
    var _cast_asForInStmtSyntaxLiveASTNode: ForInStmtSyntax? {
        return _cast_asForInStmtSyntax
    }
    var _cast_asForInStmtSyntaxArraySliceASTNode: ForInStmtSyntax? {
        return _cast_asForInStmtSyntax
    }
    /// Only use if you are SURE it is UnknownDeclSyntax
    var _cast_asUnknownDeclSyntaxLiveASTNode: UnknownDeclSyntax? {
        return _cast_asUnknownDeclSyntax
    }
    var _cast_asUnknownDeclSyntaxArraySliceASTNode: UnknownDeclSyntax? {
        return _cast_asUnknownDeclSyntax
    }
    /// Only use if you are SURE it is UnknownExprSyntax
    var _cast_asUnknownExprSyntaxLiveASTNode: UnknownExprSyntax? {
        return _cast_asUnknownExprSyntax
    }
    var _cast_asUnknownExprSyntaxArraySliceASTNode: UnknownExprSyntax? {
        return _cast_asUnknownExprSyntax
    }
    /// Only use if you are SURE it is UnknownStmtSyntax
    var _cast_asUnknownStmtSyntaxLiveASTNode: UnknownStmtSyntax? {
        return _cast_asUnknownStmtSyntax
    }
    var _cast_asUnknownStmtSyntaxArraySliceASTNode: UnknownStmtSyntax? {
        return _cast_asUnknownStmtSyntax
    }
    /// Only use if you are SURE it is UnknownTypeSyntax
    var _cast_asUnknownTypeSyntaxLiveASTNode: UnknownTypeSyntax? {
        return _cast_asUnknownTypeSyntax
    }
    var _cast_asUnknownTypeSyntaxArraySliceASTNode: UnknownTypeSyntax? {
        return _cast_asUnknownTypeSyntax
    }
    /// Only use if you are SURE it is UnknownPatternSyntax
    var _cast_asUnknownPatternSyntaxLiveASTNode: UnknownPatternSyntax? {
        return _cast_asUnknownPatternSyntax
    }
    var _cast_asUnknownPatternSyntaxArraySliceASTNode: UnknownPatternSyntax? {
        return _cast_asUnknownPatternSyntax
    }
}
public extension AnySyntax {
    var _asTokenSyntaxLiveASTNode: TokenSyntax? {
        return _asTokenSyntax
    }
    var _asTokenSyntaxArraySliceASTNode: TokenSyntax? {
        return _asTokenSyntax
    }
    var _asCodeBlockItemListSyntaxLiveASTNode: CodeBlockItemListSyntax? {
        return _asCodeBlockItemListSyntax
    }
    var _asCodeBlockItemListSyntaxArraySliceASTNode: CodeBlockItemListSyntax? {
        return _asCodeBlockItemListSyntax
    }
    var _asTupleExprElementListSyntaxLiveASTNode: TupleExprElementListSyntax? {
        return _asTupleExprElementListSyntax
    }
    var _asTupleExprElementListSyntaxArraySliceASTNode: TupleExprElementListSyntax? {
        return _asTupleExprElementListSyntax
    }
    var _asArrayElementListSyntaxLiveASTNode: ArrayElementListSyntax? {
        return _asArrayElementListSyntax
    }
    var _asArrayElementListSyntaxArraySliceASTNode: ArrayElementListSyntax? {
        return _asArrayElementListSyntax
    }
    var _asDictionaryElementListSyntaxLiveASTNode: DictionaryElementListSyntax? {
        return _asDictionaryElementListSyntax
    }
    var _asDictionaryElementListSyntaxArraySliceASTNode: DictionaryElementListSyntax? {
        return _asDictionaryElementListSyntax
    }
    var _asStringLiteralSegmentsSyntaxLiveASTNode: StringLiteralSegmentsSyntax? {
        return _asStringLiteralSegmentsSyntax
    }
    var _asStringLiteralSegmentsSyntaxArraySliceASTNode: StringLiteralSegmentsSyntax? {
        return _asStringLiteralSegmentsSyntax
    }
    var _asDeclNameArgumentListSyntaxLiveASTNode: DeclNameArgumentListSyntax? {
        return _asDeclNameArgumentListSyntax
    }
    var _asDeclNameArgumentListSyntaxArraySliceASTNode: DeclNameArgumentListSyntax? {
        return _asDeclNameArgumentListSyntax
    }
    var _asExprListSyntaxLiveASTNode: ExprListSyntax? {
        return _asExprListSyntax
    }
    var _asExprListSyntaxArraySliceASTNode: ExprListSyntax? {
        return _asExprListSyntax
    }
    var _asClosureCaptureItemListSyntaxLiveASTNode: ClosureCaptureItemListSyntax? {
        return _asClosureCaptureItemListSyntax
    }
    var _asClosureCaptureItemListSyntaxArraySliceASTNode: ClosureCaptureItemListSyntax? {
        return _asClosureCaptureItemListSyntax
    }
    var _asClosureParamListSyntaxLiveASTNode: ClosureParamListSyntax? {
        return _asClosureParamListSyntax
    }
    var _asClosureParamListSyntaxArraySliceASTNode: ClosureParamListSyntax? {
        return _asClosureParamListSyntax
    }
    var _asMultipleTrailingClosureElementListSyntaxLiveASTNode: MultipleTrailingClosureElementListSyntax? {
        return _asMultipleTrailingClosureElementListSyntax
    }
    var _asMultipleTrailingClosureElementListSyntaxArraySliceASTNode: MultipleTrailingClosureElementListSyntax? {
        return _asMultipleTrailingClosureElementListSyntax
    }
    var _asObjcNameSyntaxLiveASTNode: ObjcNameSyntax? {
        return _asObjcNameSyntax
    }
    var _asObjcNameSyntaxArraySliceASTNode: ObjcNameSyntax? {
        return _asObjcNameSyntax
    }
    var _asFunctionParameterListSyntaxLiveASTNode: FunctionParameterListSyntax? {
        return _asFunctionParameterListSyntax
    }
    var _asFunctionParameterListSyntaxArraySliceASTNode: FunctionParameterListSyntax? {
        return _asFunctionParameterListSyntax
    }
    var _asIfConfigClauseListSyntaxLiveASTNode: IfConfigClauseListSyntax? {
        return _asIfConfigClauseListSyntax
    }
    var _asIfConfigClauseListSyntaxArraySliceASTNode: IfConfigClauseListSyntax? {
        return _asIfConfigClauseListSyntax
    }
    var _asInheritedTypeListSyntaxLiveASTNode: InheritedTypeListSyntax? {
        return _asInheritedTypeListSyntax
    }
    var _asInheritedTypeListSyntaxArraySliceASTNode: InheritedTypeListSyntax? {
        return _asInheritedTypeListSyntax
    }
    var _asMemberDeclListSyntaxLiveASTNode: MemberDeclListSyntax? {
        return _asMemberDeclListSyntax
    }
    var _asMemberDeclListSyntaxArraySliceASTNode: MemberDeclListSyntax? {
        return _asMemberDeclListSyntax
    }
    var _asModifierListSyntaxLiveASTNode: ModifierListSyntax? {
        return _asModifierListSyntax
    }
    var _asModifierListSyntaxArraySliceASTNode: ModifierListSyntax? {
        return _asModifierListSyntax
    }
    var _asAccessPathSyntaxLiveASTNode: AccessPathSyntax? {
        return _asAccessPathSyntax
    }
    var _asAccessPathSyntaxArraySliceASTNode: AccessPathSyntax? {
        return _asAccessPathSyntax
    }
    var _asAccessorListSyntaxLiveASTNode: AccessorListSyntax? {
        return _asAccessorListSyntax
    }
    var _asAccessorListSyntaxArraySliceASTNode: AccessorListSyntax? {
        return _asAccessorListSyntax
    }
    var _asPatternBindingListSyntaxLiveASTNode: PatternBindingListSyntax? {
        return _asPatternBindingListSyntax
    }
    var _asPatternBindingListSyntaxArraySliceASTNode: PatternBindingListSyntax? {
        return _asPatternBindingListSyntax
    }
    var _asEnumCaseElementListSyntaxLiveASTNode: EnumCaseElementListSyntax? {
        return _asEnumCaseElementListSyntax
    }
    var _asEnumCaseElementListSyntaxArraySliceASTNode: EnumCaseElementListSyntax? {
        return _asEnumCaseElementListSyntax
    }
    var _asIdentifierListSyntaxLiveASTNode: IdentifierListSyntax? {
        return _asIdentifierListSyntax
    }
    var _asIdentifierListSyntaxArraySliceASTNode: IdentifierListSyntax? {
        return _asIdentifierListSyntax
    }
    var _asPrecedenceGroupAttributeListSyntaxLiveASTNode: PrecedenceGroupAttributeListSyntax? {
        return _asPrecedenceGroupAttributeListSyntax
    }
    var _asPrecedenceGroupAttributeListSyntaxArraySliceASTNode: PrecedenceGroupAttributeListSyntax? {
        return _asPrecedenceGroupAttributeListSyntax
    }
    var _asPrecedenceGroupNameListSyntaxLiveASTNode: PrecedenceGroupNameListSyntax? {
        return _asPrecedenceGroupNameListSyntax
    }
    var _asPrecedenceGroupNameListSyntaxArraySliceASTNode: PrecedenceGroupNameListSyntax? {
        return _asPrecedenceGroupNameListSyntax
    }
    var _asTokenListSyntaxLiveASTNode: TokenListSyntax? {
        return _asTokenListSyntax
    }
    var _asTokenListSyntaxArraySliceASTNode: TokenListSyntax? {
        return _asTokenListSyntax
    }
    var _asNonEmptyTokenListSyntaxLiveASTNode: NonEmptyTokenListSyntax? {
        return _asNonEmptyTokenListSyntax
    }
    var _asNonEmptyTokenListSyntaxArraySliceASTNode: NonEmptyTokenListSyntax? {
        return _asNonEmptyTokenListSyntax
    }
    var _asAttributeListSyntaxLiveASTNode: AttributeListSyntax? {
        return _asAttributeListSyntax
    }
    var _asAttributeListSyntaxArraySliceASTNode: AttributeListSyntax? {
        return _asAttributeListSyntax
    }
    var _asSpecializeAttributeSpecListSyntaxLiveASTNode: SpecializeAttributeSpecListSyntax? {
        return _asSpecializeAttributeSpecListSyntax
    }
    var _asSpecializeAttributeSpecListSyntaxArraySliceASTNode: SpecializeAttributeSpecListSyntax? {
        return _asSpecializeAttributeSpecListSyntax
    }
    var _asObjCSelectorSyntaxLiveASTNode: ObjCSelectorSyntax? {
        return _asObjCSelectorSyntax
    }
    var _asObjCSelectorSyntaxArraySliceASTNode: ObjCSelectorSyntax? {
        return _asObjCSelectorSyntax
    }
    var _asDifferentiabilityParamListSyntaxLiveASTNode: DifferentiabilityParamListSyntax? {
        return _asDifferentiabilityParamListSyntax
    }
    var _asDifferentiabilityParamListSyntaxArraySliceASTNode: DifferentiabilityParamListSyntax? {
        return _asDifferentiabilityParamListSyntax
    }
    var _asSwitchCaseListSyntaxLiveASTNode: SwitchCaseListSyntax? {
        return _asSwitchCaseListSyntax
    }
    var _asSwitchCaseListSyntaxArraySliceASTNode: SwitchCaseListSyntax? {
        return _asSwitchCaseListSyntax
    }
    var _asCatchClauseListSyntaxLiveASTNode: CatchClauseListSyntax? {
        return _asCatchClauseListSyntax
    }
    var _asCatchClauseListSyntaxArraySliceASTNode: CatchClauseListSyntax? {
        return _asCatchClauseListSyntax
    }
    var _asCaseItemListSyntaxLiveASTNode: CaseItemListSyntax? {
        return _asCaseItemListSyntax
    }
    var _asCaseItemListSyntaxArraySliceASTNode: CaseItemListSyntax? {
        return _asCaseItemListSyntax
    }
    var _asCatchItemListSyntaxLiveASTNode: CatchItemListSyntax? {
        return _asCatchItemListSyntax
    }
    var _asCatchItemListSyntaxArraySliceASTNode: CatchItemListSyntax? {
        return _asCatchItemListSyntax
    }
    var _asConditionElementListSyntaxLiveASTNode: ConditionElementListSyntax? {
        return _asConditionElementListSyntax
    }
    var _asConditionElementListSyntaxArraySliceASTNode: ConditionElementListSyntax? {
        return _asConditionElementListSyntax
    }
    var _asGenericRequirementListSyntaxLiveASTNode: GenericRequirementListSyntax? {
        return _asGenericRequirementListSyntax
    }
    var _asGenericRequirementListSyntaxArraySliceASTNode: GenericRequirementListSyntax? {
        return _asGenericRequirementListSyntax
    }
    var _asGenericParameterListSyntaxLiveASTNode: GenericParameterListSyntax? {
        return _asGenericParameterListSyntax
    }
    var _asGenericParameterListSyntaxArraySliceASTNode: GenericParameterListSyntax? {
        return _asGenericParameterListSyntax
    }
    var _asCompositionTypeElementListSyntaxLiveASTNode: CompositionTypeElementListSyntax? {
        return _asCompositionTypeElementListSyntax
    }
    var _asCompositionTypeElementListSyntaxArraySliceASTNode: CompositionTypeElementListSyntax? {
        return _asCompositionTypeElementListSyntax
    }
    var _asTupleTypeElementListSyntaxLiveASTNode: TupleTypeElementListSyntax? {
        return _asTupleTypeElementListSyntax
    }
    var _asTupleTypeElementListSyntaxArraySliceASTNode: TupleTypeElementListSyntax? {
        return _asTupleTypeElementListSyntax
    }
    var _asGenericArgumentListSyntaxLiveASTNode: GenericArgumentListSyntax? {
        return _asGenericArgumentListSyntax
    }
    var _asGenericArgumentListSyntaxArraySliceASTNode: GenericArgumentListSyntax? {
        return _asGenericArgumentListSyntax
    }
    var _asTuplePatternElementListSyntaxLiveASTNode: TuplePatternElementListSyntax? {
        return _asTuplePatternElementListSyntax
    }
    var _asTuplePatternElementListSyntaxArraySliceASTNode: TuplePatternElementListSyntax? {
        return _asTuplePatternElementListSyntax
    }
    var _asAvailabilitySpecListSyntaxLiveASTNode: AvailabilitySpecListSyntax? {
        return _asAvailabilitySpecListSyntax
    }
    var _asAvailabilitySpecListSyntaxArraySliceASTNode: AvailabilitySpecListSyntax? {
        return _asAvailabilitySpecListSyntax
    }
    var _asPoundColumnExprSyntaxLiveASTNode: PoundColumnExprSyntax? {
        return _asPoundColumnExprSyntax
    }
    var _asPoundColumnExprSyntaxArraySliceASTNode: PoundColumnExprSyntax? {
        return _asPoundColumnExprSyntax
    }
    var _asSuperRefExprSyntaxLiveASTNode: SuperRefExprSyntax? {
        return _asSuperRefExprSyntax
    }
    var _asSuperRefExprSyntaxArraySliceASTNode: SuperRefExprSyntax? {
        return _asSuperRefExprSyntax
    }
    var _asNilLiteralExprSyntaxLiveASTNode: NilLiteralExprSyntax? {
        return _asNilLiteralExprSyntax
    }
    var _asNilLiteralExprSyntaxArraySliceASTNode: NilLiteralExprSyntax? {
        return _asNilLiteralExprSyntax
    }
    var _asDiscardAssignmentExprSyntaxLiveASTNode: DiscardAssignmentExprSyntax? {
        return _asDiscardAssignmentExprSyntax
    }
    var _asDiscardAssignmentExprSyntaxArraySliceASTNode: DiscardAssignmentExprSyntax? {
        return _asDiscardAssignmentExprSyntax
    }
    var _asAssignmentExprSyntaxLiveASTNode: AssignmentExprSyntax? {
        return _asAssignmentExprSyntax
    }
    var _asAssignmentExprSyntaxArraySliceASTNode: AssignmentExprSyntax? {
        return _asAssignmentExprSyntax
    }
    var _asSequenceExprSyntaxLiveASTNode: SequenceExprSyntax? {
        return _asSequenceExprSyntax
    }
    var _asSequenceExprSyntaxArraySliceASTNode: SequenceExprSyntax? {
        return _asSequenceExprSyntax
    }
    var _asPoundLineExprSyntaxLiveASTNode: PoundLineExprSyntax? {
        return _asPoundLineExprSyntax
    }
    var _asPoundLineExprSyntaxArraySliceASTNode: PoundLineExprSyntax? {
        return _asPoundLineExprSyntax
    }
    var _asPoundFileExprSyntaxLiveASTNode: PoundFileExprSyntax? {
        return _asPoundFileExprSyntax
    }
    var _asPoundFileExprSyntaxArraySliceASTNode: PoundFileExprSyntax? {
        return _asPoundFileExprSyntax
    }
    var _asPoundFileIDExprSyntaxLiveASTNode: PoundFileIDExprSyntax? {
        return _asPoundFileIDExprSyntax
    }
    var _asPoundFileIDExprSyntaxArraySliceASTNode: PoundFileIDExprSyntax? {
        return _asPoundFileIDExprSyntax
    }
    var _asPoundFilePathExprSyntaxLiveASTNode: PoundFilePathExprSyntax? {
        return _asPoundFilePathExprSyntax
    }
    var _asPoundFilePathExprSyntaxArraySliceASTNode: PoundFilePathExprSyntax? {
        return _asPoundFilePathExprSyntax
    }
    var _asPoundFunctionExprSyntaxLiveASTNode: PoundFunctionExprSyntax? {
        return _asPoundFunctionExprSyntax
    }
    var _asPoundFunctionExprSyntaxArraySliceASTNode: PoundFunctionExprSyntax? {
        return _asPoundFunctionExprSyntax
    }
    var _asPoundDsohandleExprSyntaxLiveASTNode: PoundDsohandleExprSyntax? {
        return _asPoundDsohandleExprSyntax
    }
    var _asPoundDsohandleExprSyntaxArraySliceASTNode: PoundDsohandleExprSyntax? {
        return _asPoundDsohandleExprSyntax
    }
    var _asBinaryOperatorExprSyntaxLiveASTNode: BinaryOperatorExprSyntax? {
        return _asBinaryOperatorExprSyntax
    }
    var _asBinaryOperatorExprSyntaxArraySliceASTNode: BinaryOperatorExprSyntax? {
        return _asBinaryOperatorExprSyntax
    }
    var _asFloatLiteralExprSyntaxLiveASTNode: FloatLiteralExprSyntax? {
        return _asFloatLiteralExprSyntax
    }
    var _asFloatLiteralExprSyntaxArraySliceASTNode: FloatLiteralExprSyntax? {
        return _asFloatLiteralExprSyntax
    }
    var _asIntegerLiteralExprSyntaxLiveASTNode: IntegerLiteralExprSyntax? {
        return _asIntegerLiteralExprSyntax
    }
    var _asIntegerLiteralExprSyntaxArraySliceASTNode: IntegerLiteralExprSyntax? {
        return _asIntegerLiteralExprSyntax
    }
    var _asBooleanLiteralExprSyntaxLiveASTNode: BooleanLiteralExprSyntax? {
        return _asBooleanLiteralExprSyntax
    }
    var _asBooleanLiteralExprSyntaxArraySliceASTNode: BooleanLiteralExprSyntax? {
        return _asBooleanLiteralExprSyntax
    }
    var _asTypeExprSyntaxLiveASTNode: TypeExprSyntax? {
        return _asTypeExprSyntax
    }
    var _asTypeExprSyntaxArraySliceASTNode: TypeExprSyntax? {
        return _asTypeExprSyntax
    }
    var _asUnresolvedPatternExprSyntaxLiveASTNode: UnresolvedPatternExprSyntax? {
        return _asUnresolvedPatternExprSyntax
    }
    var _asUnresolvedPatternExprSyntaxArraySliceASTNode: UnresolvedPatternExprSyntax? {
        return _asUnresolvedPatternExprSyntax
    }
    var _asStringSegmentSyntaxLiveASTNode: StringSegmentSyntax? {
        return _asStringSegmentSyntax
    }
    var _asStringSegmentSyntaxArraySliceASTNode: StringSegmentSyntax? {
        return _asStringSegmentSyntax
    }
    var _asKeyPathBaseExprSyntaxLiveASTNode: KeyPathBaseExprSyntax? {
        return _asKeyPathBaseExprSyntax
    }
    var _asKeyPathBaseExprSyntaxArraySliceASTNode: KeyPathBaseExprSyntax? {
        return _asKeyPathBaseExprSyntax
    }
    var _asEditorPlaceholderExprSyntaxLiveASTNode: EditorPlaceholderExprSyntax? {
        return _asEditorPlaceholderExprSyntax
    }
    var _asEditorPlaceholderExprSyntaxArraySliceASTNode: EditorPlaceholderExprSyntax? {
        return _asEditorPlaceholderExprSyntax
    }
    var _asExpressionStmtSyntaxLiveASTNode: ExpressionStmtSyntax? {
        return _asExpressionStmtSyntax
    }
    var _asExpressionStmtSyntaxArraySliceASTNode: ExpressionStmtSyntax? {
        return _asExpressionStmtSyntax
    }
    var _asFallthroughStmtSyntaxLiveASTNode: FallthroughStmtSyntax? {
        return _asFallthroughStmtSyntax
    }
    var _asFallthroughStmtSyntaxArraySliceASTNode: FallthroughStmtSyntax? {
        return _asFallthroughStmtSyntax
    }
    var _asDeclarationStmtSyntaxLiveASTNode: DeclarationStmtSyntax? {
        return _asDeclarationStmtSyntax
    }
    var _asDeclarationStmtSyntaxArraySliceASTNode: DeclarationStmtSyntax? {
        return _asDeclarationStmtSyntax
    }
    var _asElseIfContinuationSyntaxLiveASTNode: ElseIfContinuationSyntax? {
        return _asElseIfContinuationSyntax
    }
    var _asElseIfContinuationSyntaxArraySliceASTNode: ElseIfContinuationSyntax? {
        return _asElseIfContinuationSyntax
    }
    var _asClassRestrictionTypeSyntaxLiveASTNode: ClassRestrictionTypeSyntax? {
        return _asClassRestrictionTypeSyntax
    }
    var _asClassRestrictionTypeSyntaxArraySliceASTNode: ClassRestrictionTypeSyntax? {
        return _asClassRestrictionTypeSyntax
    }
    var _asCompositionTypeSyntaxLiveASTNode: CompositionTypeSyntax? {
        return _asCompositionTypeSyntax
    }
    var _asCompositionTypeSyntaxArraySliceASTNode: CompositionTypeSyntax? {
        return _asCompositionTypeSyntax
    }
    var _asIdentifierPatternSyntaxLiveASTNode: IdentifierPatternSyntax? {
        return _asIdentifierPatternSyntax
    }
    var _asIdentifierPatternSyntaxArraySliceASTNode: IdentifierPatternSyntax? {
        return _asIdentifierPatternSyntax
    }
    var _asExpressionPatternSyntaxLiveASTNode: ExpressionPatternSyntax? {
        return _asExpressionPatternSyntax
    }
    var _asExpressionPatternSyntaxArraySliceASTNode: ExpressionPatternSyntax? {
        return _asExpressionPatternSyntax
    }
    var _asInOutExprSyntaxLiveASTNode: InOutExprSyntax? {
        return _asInOutExprSyntax
    }
    var _asInOutExprSyntaxArraySliceASTNode: InOutExprSyntax? {
        return _asInOutExprSyntax
    }
    var _asAwaitExprSyntaxLiveASTNode: AwaitExprSyntax? {
        return _asAwaitExprSyntax
    }
    var _asAwaitExprSyntaxArraySliceASTNode: AwaitExprSyntax? {
        return _asAwaitExprSyntax
    }
    var _asDeclNameArgumentSyntaxLiveASTNode: DeclNameArgumentSyntax? {
        return _asDeclNameArgumentSyntax
    }
    var _asDeclNameArgumentSyntaxArraySliceASTNode: DeclNameArgumentSyntax? {
        return _asDeclNameArgumentSyntax
    }
    var _asIdentifierExprSyntaxLiveASTNode: IdentifierExprSyntax? {
        return _asIdentifierExprSyntax
    }
    var _asIdentifierExprSyntaxArraySliceASTNode: IdentifierExprSyntax? {
        return _asIdentifierExprSyntax
    }
    var _asSymbolicReferenceExprSyntaxLiveASTNode: SymbolicReferenceExprSyntax? {
        return _asSymbolicReferenceExprSyntax
    }
    var _asSymbolicReferenceExprSyntaxArraySliceASTNode: SymbolicReferenceExprSyntax? {
        return _asSymbolicReferenceExprSyntax
    }
    var _asPrefixOperatorExprSyntaxLiveASTNode: PrefixOperatorExprSyntax? {
        return _asPrefixOperatorExprSyntax
    }
    var _asPrefixOperatorExprSyntaxArraySliceASTNode: PrefixOperatorExprSyntax? {
        return _asPrefixOperatorExprSyntax
    }
    var _asArrayElementSyntaxLiveASTNode: ArrayElementSyntax? {
        return _asArrayElementSyntax
    }
    var _asArrayElementSyntaxArraySliceASTNode: ArrayElementSyntax? {
        return _asArrayElementSyntax
    }
    var _asIsExprSyntaxLiveASTNode: IsExprSyntax? {
        return _asIsExprSyntax
    }
    var _asIsExprSyntaxArraySliceASTNode: IsExprSyntax? {
        return _asIsExprSyntax
    }
    var _asClosureParamSyntaxLiveASTNode: ClosureParamSyntax? {
        return _asClosureParamSyntax
    }
    var _asClosureParamSyntaxArraySliceASTNode: ClosureParamSyntax? {
        return _asClosureParamSyntax
    }
    var _asOptionalChainingExprSyntaxLiveASTNode: OptionalChainingExprSyntax? {
        return _asOptionalChainingExprSyntax
    }
    var _asOptionalChainingExprSyntaxArraySliceASTNode: OptionalChainingExprSyntax? {
        return _asOptionalChainingExprSyntax
    }
    var _asForcedValueExprSyntaxLiveASTNode: ForcedValueExprSyntax? {
        return _asForcedValueExprSyntax
    }
    var _asForcedValueExprSyntaxArraySliceASTNode: ForcedValueExprSyntax? {
        return _asForcedValueExprSyntax
    }
    var _asPostfixUnaryExprSyntaxLiveASTNode: PostfixUnaryExprSyntax? {
        return _asPostfixUnaryExprSyntax
    }
    var _asPostfixUnaryExprSyntaxArraySliceASTNode: PostfixUnaryExprSyntax? {
        return _asPostfixUnaryExprSyntax
    }
    var _asSpecializeExprSyntaxLiveASTNode: SpecializeExprSyntax? {
        return _asSpecializeExprSyntax
    }
    var _asSpecializeExprSyntaxArraySliceASTNode: SpecializeExprSyntax? {
        return _asSpecializeExprSyntax
    }
    var _asObjcNamePieceSyntaxLiveASTNode: ObjcNamePieceSyntax? {
        return _asObjcNamePieceSyntax
    }
    var _asObjcNamePieceSyntaxArraySliceASTNode: ObjcNamePieceSyntax? {
        return _asObjcNamePieceSyntax
    }
    var _asPostfixIfConfigExprSyntaxLiveASTNode: PostfixIfConfigExprSyntax? {
        return _asPostfixIfConfigExprSyntax
    }
    var _asPostfixIfConfigExprSyntaxArraySliceASTNode: PostfixIfConfigExprSyntax? {
        return _asPostfixIfConfigExprSyntax
    }
    var _asTypeInitializerClauseSyntaxLiveASTNode: TypeInitializerClauseSyntax? {
        return _asTypeInitializerClauseSyntax
    }
    var _asTypeInitializerClauseSyntaxArraySliceASTNode: TypeInitializerClauseSyntax? {
        return _asTypeInitializerClauseSyntax
    }
    var _asReturnClauseSyntaxLiveASTNode: ReturnClauseSyntax? {
        return _asReturnClauseSyntax
    }
    var _asReturnClauseSyntaxArraySliceASTNode: ReturnClauseSyntax? {
        return _asReturnClauseSyntax
    }
    var _asIfConfigDeclSyntaxLiveASTNode: IfConfigDeclSyntax? {
        return _asIfConfigDeclSyntax
    }
    var _asIfConfigDeclSyntaxArraySliceASTNode: IfConfigDeclSyntax? {
        return _asIfConfigDeclSyntax
    }
    var _asInheritedTypeSyntaxLiveASTNode: InheritedTypeSyntax? {
        return _asInheritedTypeSyntax
    }
    var _asInheritedTypeSyntaxArraySliceASTNode: InheritedTypeSyntax? {
        return _asInheritedTypeSyntax
    }
    var _asTypeInheritanceClauseSyntaxLiveASTNode: TypeInheritanceClauseSyntax? {
        return _asTypeInheritanceClauseSyntax
    }
    var _asTypeInheritanceClauseSyntaxArraySliceASTNode: TypeInheritanceClauseSyntax? {
        return _asTypeInheritanceClauseSyntax
    }
    var _asMemberDeclListItemSyntaxLiveASTNode: MemberDeclListItemSyntax? {
        return _asMemberDeclListItemSyntax
    }
    var _asMemberDeclListItemSyntaxArraySliceASTNode: MemberDeclListItemSyntax? {
        return _asMemberDeclListItemSyntax
    }
    var _asSourceFileSyntaxLiveASTNode: SourceFileSyntax? {
        return _asSourceFileSyntax
    }
    var _asSourceFileSyntaxArraySliceASTNode: SourceFileSyntax? {
        return _asSourceFileSyntax
    }
    var _asInitializerClauseSyntaxLiveASTNode: InitializerClauseSyntax? {
        return _asInitializerClauseSyntax
    }
    var _asInitializerClauseSyntaxArraySliceASTNode: InitializerClauseSyntax? {
        return _asInitializerClauseSyntax
    }
    var _asAccessPathComponentSyntaxLiveASTNode: AccessPathComponentSyntax? {
        return _asAccessPathComponentSyntax
    }
    var _asAccessPathComponentSyntaxArraySliceASTNode: AccessPathComponentSyntax? {
        return _asAccessPathComponentSyntax
    }
    var _asOperatorPrecedenceAndTypesSyntaxLiveASTNode: OperatorPrecedenceAndTypesSyntax? {
        return _asOperatorPrecedenceAndTypesSyntax
    }
    var _asOperatorPrecedenceAndTypesSyntaxArraySliceASTNode: OperatorPrecedenceAndTypesSyntax? {
        return _asOperatorPrecedenceAndTypesSyntax
    }
    var _asPrecedenceGroupNameElementSyntaxLiveASTNode: PrecedenceGroupNameElementSyntax? {
        return _asPrecedenceGroupNameElementSyntax
    }
    var _asPrecedenceGroupNameElementSyntaxArraySliceASTNode: PrecedenceGroupNameElementSyntax? {
        return _asPrecedenceGroupNameElementSyntax
    }
    var _asDeclNameSyntaxLiveASTNode: DeclNameSyntax? {
        return _asDeclNameSyntax
    }
    var _asDeclNameSyntaxArraySliceASTNode: DeclNameSyntax? {
        return _asDeclNameSyntax
    }
    var _asObjCSelectorPieceSyntaxLiveASTNode: ObjCSelectorPieceSyntax? {
        return _asObjCSelectorPieceSyntax
    }
    var _asObjCSelectorPieceSyntaxArraySliceASTNode: ObjCSelectorPieceSyntax? {
        return _asObjCSelectorPieceSyntax
    }
    var _asDifferentiabilityParamSyntaxLiveASTNode: DifferentiabilityParamSyntax? {
        return _asDifferentiabilityParamSyntax
    }
    var _asDifferentiabilityParamSyntaxArraySliceASTNode: DifferentiabilityParamSyntax? {
        return _asDifferentiabilityParamSyntax
    }
    var _asFunctionDeclNameSyntaxLiveASTNode: FunctionDeclNameSyntax? {
        return _asFunctionDeclNameSyntax
    }
    var _asFunctionDeclNameSyntaxArraySliceASTNode: FunctionDeclNameSyntax? {
        return _asFunctionDeclNameSyntax
    }
    var _asContinueStmtSyntaxLiveASTNode: ContinueStmtSyntax? {
        return _asContinueStmtSyntax
    }
    var _asContinueStmtSyntaxArraySliceASTNode: ContinueStmtSyntax? {
        return _asContinueStmtSyntax
    }
    var _asDeferStmtSyntaxLiveASTNode: DeferStmtSyntax? {
        return _asDeferStmtSyntax
    }
    var _asDeferStmtSyntaxArraySliceASTNode: DeferStmtSyntax? {
        return _asDeferStmtSyntax
    }
    var _asWhereClauseSyntaxLiveASTNode: WhereClauseSyntax? {
        return _asWhereClauseSyntax
    }
    var _asWhereClauseSyntaxArraySliceASTNode: WhereClauseSyntax? {
        return _asWhereClauseSyntax
    }
    var _asReturnStmtSyntaxLiveASTNode: ReturnStmtSyntax? {
        return _asReturnStmtSyntax
    }
    var _asReturnStmtSyntaxArraySliceASTNode: ReturnStmtSyntax? {
        return _asReturnStmtSyntax
    }
    var _asYieldStmtSyntaxLiveASTNode: YieldStmtSyntax? {
        return _asYieldStmtSyntax
    }
    var _asYieldStmtSyntaxArraySliceASTNode: YieldStmtSyntax? {
        return _asYieldStmtSyntax
    }
    var _asBreakStmtSyntaxLiveASTNode: BreakStmtSyntax? {
        return _asBreakStmtSyntax
    }
    var _asBreakStmtSyntaxArraySliceASTNode: BreakStmtSyntax? {
        return _asBreakStmtSyntax
    }
    var _asConditionElementSyntaxLiveASTNode: ConditionElementSyntax? {
        return _asConditionElementSyntax
    }
    var _asConditionElementSyntaxArraySliceASTNode: ConditionElementSyntax? {
        return _asConditionElementSyntax
    }
    var _asThrowStmtSyntaxLiveASTNode: ThrowStmtSyntax? {
        return _asThrowStmtSyntax
    }
    var _asThrowStmtSyntaxArraySliceASTNode: ThrowStmtSyntax? {
        return _asThrowStmtSyntax
    }
    var _asElseBlockSyntaxLiveASTNode: ElseBlockSyntax? {
        return _asElseBlockSyntax
    }
    var _asElseBlockSyntaxArraySliceASTNode: ElseBlockSyntax? {
        return _asElseBlockSyntax
    }
    var _asSwitchDefaultLabelSyntaxLiveASTNode: SwitchDefaultLabelSyntax? {
        return _asSwitchDefaultLabelSyntax
    }
    var _asSwitchDefaultLabelSyntaxArraySliceASTNode: SwitchDefaultLabelSyntax? {
        return _asSwitchDefaultLabelSyntax
    }
    var _asGenericWhereClauseSyntaxLiveASTNode: GenericWhereClauseSyntax? {
        return _asGenericWhereClauseSyntax
    }
    var _asGenericWhereClauseSyntaxArraySliceASTNode: GenericWhereClauseSyntax? {
        return _asGenericWhereClauseSyntax
    }
    var _asGenericRequirementSyntaxLiveASTNode: GenericRequirementSyntax? {
        return _asGenericRequirementSyntax
    }
    var _asGenericRequirementSyntaxArraySliceASTNode: GenericRequirementSyntax? {
        return _asGenericRequirementSyntax
    }
    var _asSimpleTypeIdentifierSyntaxLiveASTNode: SimpleTypeIdentifierSyntax? {
        return _asSimpleTypeIdentifierSyntax
    }
    var _asSimpleTypeIdentifierSyntaxArraySliceASTNode: SimpleTypeIdentifierSyntax? {
        return _asSimpleTypeIdentifierSyntax
    }
    var _asOptionalTypeSyntaxLiveASTNode: OptionalTypeSyntax? {
        return _asOptionalTypeSyntax
    }
    var _asOptionalTypeSyntaxArraySliceASTNode: OptionalTypeSyntax? {
        return _asOptionalTypeSyntax
    }
    var _asSomeTypeSyntaxLiveASTNode: SomeTypeSyntax? {
        return _asSomeTypeSyntax
    }
    var _asSomeTypeSyntaxArraySliceASTNode: SomeTypeSyntax? {
        return _asSomeTypeSyntax
    }
    var _asImplicitlyUnwrappedOptionalTypeSyntaxLiveASTNode: ImplicitlyUnwrappedOptionalTypeSyntax? {
        return _asImplicitlyUnwrappedOptionalTypeSyntax
    }
    var _asImplicitlyUnwrappedOptionalTypeSyntaxArraySliceASTNode: ImplicitlyUnwrappedOptionalTypeSyntax? {
        return _asImplicitlyUnwrappedOptionalTypeSyntax
    }
    var _asCompositionTypeElementSyntaxLiveASTNode: CompositionTypeElementSyntax? {
        return _asCompositionTypeElementSyntax
    }
    var _asCompositionTypeElementSyntaxArraySliceASTNode: CompositionTypeElementSyntax? {
        return _asCompositionTypeElementSyntax
    }
    var _asGenericArgumentSyntaxLiveASTNode: GenericArgumentSyntax? {
        return _asGenericArgumentSyntax
    }
    var _asGenericArgumentSyntaxArraySliceASTNode: GenericArgumentSyntax? {
        return _asGenericArgumentSyntax
    }
    var _asTypeAnnotationSyntaxLiveASTNode: TypeAnnotationSyntax? {
        return _asTypeAnnotationSyntax
    }
    var _asTypeAnnotationSyntaxArraySliceASTNode: TypeAnnotationSyntax? {
        return _asTypeAnnotationSyntax
    }
    var _asIsTypePatternSyntaxLiveASTNode: IsTypePatternSyntax? {
        return _asIsTypePatternSyntax
    }
    var _asIsTypePatternSyntaxArraySliceASTNode: IsTypePatternSyntax? {
        return _asIsTypePatternSyntax
    }
    var _asOptionalPatternSyntaxLiveASTNode: OptionalPatternSyntax? {
        return _asOptionalPatternSyntax
    }
    var _asOptionalPatternSyntaxArraySliceASTNode: OptionalPatternSyntax? {
        return _asOptionalPatternSyntax
    }
    var _asWildcardPatternSyntaxLiveASTNode: WildcardPatternSyntax? {
        return _asWildcardPatternSyntax
    }
    var _asWildcardPatternSyntaxArraySliceASTNode: WildcardPatternSyntax? {
        return _asWildcardPatternSyntax
    }
    var _asValueBindingPatternSyntaxLiveASTNode: ValueBindingPatternSyntax? {
        return _asValueBindingPatternSyntax
    }
    var _asValueBindingPatternSyntaxArraySliceASTNode: ValueBindingPatternSyntax? {
        return _asValueBindingPatternSyntax
    }
    var _asAvailabilityArgumentSyntaxLiveASTNode: AvailabilityArgumentSyntax? {
        return _asAvailabilityArgumentSyntax
    }
    var _asAvailabilityArgumentSyntaxArraySliceASTNode: AvailabilityArgumentSyntax? {
        return _asAvailabilityArgumentSyntax
    }
    var _asAvailabilityVersionRestrictionSyntaxLiveASTNode: AvailabilityVersionRestrictionSyntax? {
        return _asAvailabilityVersionRestrictionSyntax
    }
    var _asAvailabilityVersionRestrictionSyntaxArraySliceASTNode: AvailabilityVersionRestrictionSyntax? {
        return _asAvailabilityVersionRestrictionSyntax
    }
    var _asCodeBlockItemSyntaxLiveASTNode: CodeBlockItemSyntax? {
        return _asCodeBlockItemSyntax
    }
    var _asCodeBlockItemSyntaxArraySliceASTNode: CodeBlockItemSyntax? {
        return _asCodeBlockItemSyntax
    }
    var _asCodeBlockSyntaxLiveASTNode: CodeBlockSyntax? {
        return _asCodeBlockSyntax
    }
    var _asCodeBlockSyntaxArraySliceASTNode: CodeBlockSyntax? {
        return _asCodeBlockSyntax
    }
    var _asTryExprSyntaxLiveASTNode: TryExprSyntax? {
        return _asTryExprSyntax
    }
    var _asTryExprSyntaxArraySliceASTNode: TryExprSyntax? {
        return _asTryExprSyntax
    }
    var _asDeclNameArgumentsSyntaxLiveASTNode: DeclNameArgumentsSyntax? {
        return _asDeclNameArgumentsSyntax
    }
    var _asDeclNameArgumentsSyntaxArraySliceASTNode: DeclNameArgumentsSyntax? {
        return _asDeclNameArgumentsSyntax
    }
    var _asArrowExprSyntaxLiveASTNode: ArrowExprSyntax? {
        return _asArrowExprSyntax
    }
    var _asArrowExprSyntaxArraySliceASTNode: ArrowExprSyntax? {
        return _asArrowExprSyntax
    }
    var _asTupleExprSyntaxLiveASTNode: TupleExprSyntax? {
        return _asTupleExprSyntax
    }
    var _asTupleExprSyntaxArraySliceASTNode: TupleExprSyntax? {
        return _asTupleExprSyntax
    }
    var _asArrayExprSyntaxLiveASTNode: ArrayExprSyntax? {
        return _asArrayExprSyntax
    }
    var _asArrayExprSyntaxArraySliceASTNode: ArrayExprSyntax? {
        return _asArrayExprSyntax
    }
    var _asDictionaryExprSyntaxLiveASTNode: DictionaryExprSyntax? {
        return _asDictionaryExprSyntax
    }
    var _asDictionaryExprSyntaxArraySliceASTNode: DictionaryExprSyntax? {
        return _asDictionaryExprSyntax
    }
    var _asAsExprSyntaxLiveASTNode: AsExprSyntax? {
        return _asAsExprSyntax
    }
    var _asAsExprSyntaxArraySliceASTNode: AsExprSyntax? {
        return _asAsExprSyntax
    }
    var _asClosureCaptureSignatureSyntaxLiveASTNode: ClosureCaptureSignatureSyntax? {
        return _asClosureCaptureSignatureSyntax
    }
    var _asClosureCaptureSignatureSyntaxArraySliceASTNode: ClosureCaptureSignatureSyntax? {
        return _asClosureCaptureSignatureSyntax
    }
    var _asMultipleTrailingClosureElementSyntaxLiveASTNode: MultipleTrailingClosureElementSyntax? {
        return _asMultipleTrailingClosureElementSyntax
    }
    var _asMultipleTrailingClosureElementSyntaxArraySliceASTNode: MultipleTrailingClosureElementSyntax? {
        return _asMultipleTrailingClosureElementSyntax
    }
    var _asKeyPathExprSyntaxLiveASTNode: KeyPathExprSyntax? {
        return _asKeyPathExprSyntax
    }
    var _asKeyPathExprSyntaxArraySliceASTNode: KeyPathExprSyntax? {
        return _asKeyPathExprSyntax
    }
    var _asParameterClauseSyntaxLiveASTNode: ParameterClauseSyntax? {
        return _asParameterClauseSyntax
    }
    var _asParameterClauseSyntaxArraySliceASTNode: ParameterClauseSyntax? {
        return _asParameterClauseSyntax
    }
    var _asIfConfigClauseSyntaxLiveASTNode: IfConfigClauseSyntax? {
        return _asIfConfigClauseSyntax
    }
    var _asIfConfigClauseSyntaxArraySliceASTNode: IfConfigClauseSyntax? {
        return _asIfConfigClauseSyntax
    }
    var _asMemberDeclBlockSyntaxLiveASTNode: MemberDeclBlockSyntax? {
        return _asMemberDeclBlockSyntax
    }
    var _asMemberDeclBlockSyntaxArraySliceASTNode: MemberDeclBlockSyntax? {
        return _asMemberDeclBlockSyntax
    }
    var _asAccessorParameterSyntaxLiveASTNode: AccessorParameterSyntax? {
        return _asAccessorParameterSyntax
    }
    var _asAccessorParameterSyntaxArraySliceASTNode: AccessorParameterSyntax? {
        return _asAccessorParameterSyntax
    }
    var _asAccessorBlockSyntaxLiveASTNode: AccessorBlockSyntax? {
        return _asAccessorBlockSyntax
    }
    var _asAccessorBlockSyntaxArraySliceASTNode: AccessorBlockSyntax? {
        return _asAccessorBlockSyntax
    }
    var _asPrecedenceGroupRelationSyntaxLiveASTNode: PrecedenceGroupRelationSyntax? {
        return _asPrecedenceGroupRelationSyntax
    }
    var _asPrecedenceGroupRelationSyntaxArraySliceASTNode: PrecedenceGroupRelationSyntax? {
        return _asPrecedenceGroupRelationSyntax
    }
    var _asPrecedenceGroupAssignmentSyntaxLiveASTNode: PrecedenceGroupAssignmentSyntax? {
        return _asPrecedenceGroupAssignmentSyntax
    }
    var _asPrecedenceGroupAssignmentSyntaxArraySliceASTNode: PrecedenceGroupAssignmentSyntax? {
        return _asPrecedenceGroupAssignmentSyntax
    }
    var _asPrecedenceGroupAssociativitySyntaxLiveASTNode: PrecedenceGroupAssociativitySyntax? {
        return _asPrecedenceGroupAssociativitySyntax
    }
    var _asPrecedenceGroupAssociativitySyntaxArraySliceASTNode: PrecedenceGroupAssociativitySyntax? {
        return _asPrecedenceGroupAssociativitySyntax
    }
    var _asNamedAttributeStringArgumentSyntaxLiveASTNode: NamedAttributeStringArgumentSyntax? {
        return _asNamedAttributeStringArgumentSyntax
    }
    var _asNamedAttributeStringArgumentSyntaxArraySliceASTNode: NamedAttributeStringArgumentSyntax? {
        return _asNamedAttributeStringArgumentSyntax
    }
    var _asDifferentiabilityParamsClauseSyntaxLiveASTNode: DifferentiabilityParamsClauseSyntax? {
        return _asDifferentiabilityParamsClauseSyntax
    }
    var _asDifferentiabilityParamsClauseSyntaxArraySliceASTNode: DifferentiabilityParamsClauseSyntax? {
        return _asDifferentiabilityParamsClauseSyntax
    }
    var _asDifferentiabilityParamsSyntaxLiveASTNode: DifferentiabilityParamsSyntax? {
        return _asDifferentiabilityParamsSyntax
    }
    var _asDifferentiabilityParamsSyntaxArraySliceASTNode: DifferentiabilityParamsSyntax? {
        return _asDifferentiabilityParamsSyntax
    }
    var _asSwitchCaseSyntaxLiveASTNode: SwitchCaseSyntax? {
        return _asSwitchCaseSyntax
    }
    var _asSwitchCaseSyntaxArraySliceASTNode: SwitchCaseSyntax? {
        return _asSwitchCaseSyntax
    }
    var _asCaseItemSyntaxLiveASTNode: CaseItemSyntax? {
        return _asCaseItemSyntax
    }
    var _asCaseItemSyntaxArraySliceASTNode: CaseItemSyntax? {
        return _asCaseItemSyntax
    }
    var _asCatchItemSyntaxLiveASTNode: CatchItemSyntax? {
        return _asCatchItemSyntax
    }
    var _asCatchItemSyntaxArraySliceASTNode: CatchItemSyntax? {
        return _asCatchItemSyntax
    }
    var _asSwitchCaseLabelSyntaxLiveASTNode: SwitchCaseLabelSyntax? {
        return _asSwitchCaseLabelSyntax
    }
    var _asSwitchCaseLabelSyntaxArraySliceASTNode: SwitchCaseLabelSyntax? {
        return _asSwitchCaseLabelSyntax
    }
    var _asCatchClauseSyntaxLiveASTNode: CatchClauseSyntax? {
        return _asCatchClauseSyntax
    }
    var _asCatchClauseSyntaxArraySliceASTNode: CatchClauseSyntax? {
        return _asCatchClauseSyntax
    }
    var _asSameTypeRequirementSyntaxLiveASTNode: SameTypeRequirementSyntax? {
        return _asSameTypeRequirementSyntax
    }
    var _asSameTypeRequirementSyntaxArraySliceASTNode: SameTypeRequirementSyntax? {
        return _asSameTypeRequirementSyntax
    }
    var _asGenericParameterClauseSyntaxLiveASTNode: GenericParameterClauseSyntax? {
        return _asGenericParameterClauseSyntax
    }
    var _asGenericParameterClauseSyntaxArraySliceASTNode: GenericParameterClauseSyntax? {
        return _asGenericParameterClauseSyntax
    }
    var _asConformanceRequirementSyntaxLiveASTNode: ConformanceRequirementSyntax? {
        return _asConformanceRequirementSyntax
    }
    var _asConformanceRequirementSyntaxArraySliceASTNode: ConformanceRequirementSyntax? {
        return _asConformanceRequirementSyntax
    }
    var _asArrayTypeSyntaxLiveASTNode: ArrayTypeSyntax? {
        return _asArrayTypeSyntax
    }
    var _asArrayTypeSyntaxArraySliceASTNode: ArrayTypeSyntax? {
        return _asArrayTypeSyntax
    }
    var _asMetatypeTypeSyntaxLiveASTNode: MetatypeTypeSyntax? {
        return _asMetatypeTypeSyntax
    }
    var _asMetatypeTypeSyntaxArraySliceASTNode: MetatypeTypeSyntax? {
        return _asMetatypeTypeSyntax
    }
    var _asTupleTypeSyntaxLiveASTNode: TupleTypeSyntax? {
        return _asTupleTypeSyntax
    }
    var _asTupleTypeSyntaxArraySliceASTNode: TupleTypeSyntax? {
        return _asTupleTypeSyntax
    }
    var _asAttributedTypeSyntaxLiveASTNode: AttributedTypeSyntax? {
        return _asAttributedTypeSyntax
    }
    var _asAttributedTypeSyntaxArraySliceASTNode: AttributedTypeSyntax? {
        return _asAttributedTypeSyntax
    }
    var _asGenericArgumentClauseSyntaxLiveASTNode: GenericArgumentClauseSyntax? {
        return _asGenericArgumentClauseSyntax
    }
    var _asGenericArgumentClauseSyntaxArraySliceASTNode: GenericArgumentClauseSyntax? {
        return _asGenericArgumentClauseSyntax
    }
    var _asAsTypePatternSyntaxLiveASTNode: AsTypePatternSyntax? {
        return _asAsTypePatternSyntax
    }
    var _asAsTypePatternSyntaxArraySliceASTNode: AsTypePatternSyntax? {
        return _asAsTypePatternSyntax
    }
    var _asTuplePatternSyntaxLiveASTNode: TuplePatternSyntax? {
        return _asTuplePatternSyntax
    }
    var _asTuplePatternSyntaxArraySliceASTNode: TuplePatternSyntax? {
        return _asTuplePatternSyntax
    }
    var _asAvailabilityLabeledArgumentSyntaxLiveASTNode: AvailabilityLabeledArgumentSyntax? {
        return _asAvailabilityLabeledArgumentSyntax
    }
    var _asAvailabilityLabeledArgumentSyntaxArraySliceASTNode: AvailabilityLabeledArgumentSyntax? {
        return _asAvailabilityLabeledArgumentSyntax
    }
    var _asVersionTupleSyntaxLiveASTNode: VersionTupleSyntax? {
        return _asVersionTupleSyntax
    }
    var _asVersionTupleSyntaxArraySliceASTNode: VersionTupleSyntax? {
        return _asVersionTupleSyntax
    }
    var _asTupleExprElementSyntaxLiveASTNode: TupleExprElementSyntax? {
        return _asTupleExprElementSyntax
    }
    var _asTupleExprElementSyntaxArraySliceASTNode: TupleExprElementSyntax? {
        return _asTupleExprElementSyntax
    }
    var _asDictionaryElementSyntaxLiveASTNode: DictionaryElementSyntax? {
        return _asDictionaryElementSyntax
    }
    var _asDictionaryElementSyntaxArraySliceASTNode: DictionaryElementSyntax? {
        return _asDictionaryElementSyntax
    }
    var _asMemberAccessExprSyntaxLiveASTNode: MemberAccessExprSyntax? {
        return _asMemberAccessExprSyntax
    }
    var _asMemberAccessExprSyntaxArraySliceASTNode: MemberAccessExprSyntax? {
        return _asMemberAccessExprSyntax
    }
    var _asClosureExprSyntaxLiveASTNode: ClosureExprSyntax? {
        return _asClosureExprSyntax
    }
    var _asClosureExprSyntaxArraySliceASTNode: ClosureExprSyntax? {
        return _asClosureExprSyntax
    }
    var _asObjcKeyPathExprSyntaxLiveASTNode: ObjcKeyPathExprSyntax? {
        return _asObjcKeyPathExprSyntax
    }
    var _asObjcKeyPathExprSyntaxArraySliceASTNode: ObjcKeyPathExprSyntax? {
        return _asObjcKeyPathExprSyntax
    }
    var _asObjectLiteralExprSyntaxLiveASTNode: ObjectLiteralExprSyntax? {
        return _asObjectLiteralExprSyntax
    }
    var _asObjectLiteralExprSyntaxArraySliceASTNode: ObjectLiteralExprSyntax? {
        return _asObjectLiteralExprSyntax
    }
    var _asFunctionSignatureSyntaxLiveASTNode: FunctionSignatureSyntax? {
        return _asFunctionSignatureSyntax
    }
    var _asFunctionSignatureSyntaxArraySliceASTNode: FunctionSignatureSyntax? {
        return _asFunctionSignatureSyntax
    }
    var _asPoundErrorDeclSyntaxLiveASTNode: PoundErrorDeclSyntax? {
        return _asPoundErrorDeclSyntax
    }
    var _asPoundErrorDeclSyntaxArraySliceASTNode: PoundErrorDeclSyntax? {
        return _asPoundErrorDeclSyntax
    }
    var _asPoundWarningDeclSyntaxLiveASTNode: PoundWarningDeclSyntax? {
        return _asPoundWarningDeclSyntax
    }
    var _asPoundWarningDeclSyntaxArraySliceASTNode: PoundWarningDeclSyntax? {
        return _asPoundWarningDeclSyntax
    }
    var _asPoundSourceLocationSyntaxLiveASTNode: PoundSourceLocationSyntax? {
        return _asPoundSourceLocationSyntax
    }
    var _asPoundSourceLocationSyntaxArraySliceASTNode: PoundSourceLocationSyntax? {
        return _asPoundSourceLocationSyntax
    }
    var _asDeclModifierSyntaxLiveASTNode: DeclModifierSyntax? {
        return _asDeclModifierSyntax
    }
    var _asDeclModifierSyntaxArraySliceASTNode: DeclModifierSyntax? {
        return _asDeclModifierSyntax
    }
    var _asDeinitializerDeclSyntaxLiveASTNode: DeinitializerDeclSyntax? {
        return _asDeinitializerDeclSyntax
    }
    var _asDeinitializerDeclSyntaxArraySliceASTNode: DeinitializerDeclSyntax? {
        return _asDeinitializerDeclSyntax
    }
    var _asAccessLevelModifierSyntaxLiveASTNode: AccessLevelModifierSyntax? {
        return _asAccessLevelModifierSyntax
    }
    var _asAccessLevelModifierSyntaxArraySliceASTNode: AccessLevelModifierSyntax? {
        return _asAccessLevelModifierSyntax
    }
    var _asVariableDeclSyntaxLiveASTNode: VariableDeclSyntax? {
        return _asVariableDeclSyntax
    }
    var _asVariableDeclSyntaxArraySliceASTNode: VariableDeclSyntax? {
        return _asVariableDeclSyntax
    }
    var _asEnumCaseElementSyntaxLiveASTNode: EnumCaseElementSyntax? {
        return _asEnumCaseElementSyntax
    }
    var _asEnumCaseElementSyntaxArraySliceASTNode: EnumCaseElementSyntax? {
        return _asEnumCaseElementSyntax
    }
    var _asEnumCaseDeclSyntaxLiveASTNode: EnumCaseDeclSyntax? {
        return _asEnumCaseDeclSyntax
    }
    var _asEnumCaseDeclSyntaxArraySliceASTNode: EnumCaseDeclSyntax? {
        return _asEnumCaseDeclSyntax
    }
    var _asLabeledSpecializeEntrySyntaxLiveASTNode: LabeledSpecializeEntrySyntax? {
        return _asLabeledSpecializeEntrySyntax
    }
    var _asLabeledSpecializeEntrySyntaxArraySliceASTNode: LabeledSpecializeEntrySyntax? {
        return _asLabeledSpecializeEntrySyntax
    }
    var _asTargetFunctionEntrySyntaxLiveASTNode: TargetFunctionEntrySyntax? {
        return _asTargetFunctionEntrySyntax
    }
    var _asTargetFunctionEntrySyntaxArraySliceASTNode: TargetFunctionEntrySyntax? {
        return _asTargetFunctionEntrySyntax
    }
    var _asImplementsAttributeArgumentsSyntaxLiveASTNode: ImplementsAttributeArgumentsSyntax? {
        return _asImplementsAttributeArgumentsSyntax
    }
    var _asImplementsAttributeArgumentsSyntaxArraySliceASTNode: ImplementsAttributeArgumentsSyntax? {
        return _asImplementsAttributeArgumentsSyntax
    }
    var _asQualifiedDeclNameSyntaxLiveASTNode: QualifiedDeclNameSyntax? {
        return _asQualifiedDeclNameSyntax
    }
    var _asQualifiedDeclNameSyntaxArraySliceASTNode: QualifiedDeclNameSyntax? {
        return _asQualifiedDeclNameSyntax
    }
    var _asGuardStmtSyntaxLiveASTNode: GuardStmtSyntax? {
        return _asGuardStmtSyntax
    }
    var _asGuardStmtSyntaxArraySliceASTNode: GuardStmtSyntax? {
        return _asGuardStmtSyntax
    }
    var _asYieldListSyntaxLiveASTNode: YieldListSyntax? {
        return _asYieldListSyntax
    }
    var _asYieldListSyntaxArraySliceASTNode: YieldListSyntax? {
        return _asYieldListSyntax
    }
    var _asAvailabilityConditionSyntaxLiveASTNode: AvailabilityConditionSyntax? {
        return _asAvailabilityConditionSyntax
    }
    var _asAvailabilityConditionSyntaxArraySliceASTNode: AvailabilityConditionSyntax? {
        return _asAvailabilityConditionSyntax
    }
    var _asMatchingPatternConditionSyntaxLiveASTNode: MatchingPatternConditionSyntax? {
        return _asMatchingPatternConditionSyntax
    }
    var _asMatchingPatternConditionSyntaxArraySliceASTNode: MatchingPatternConditionSyntax? {
        return _asMatchingPatternConditionSyntax
    }
    var _asOptionalBindingConditionSyntaxLiveASTNode: OptionalBindingConditionSyntax? {
        return _asOptionalBindingConditionSyntax
    }
    var _asOptionalBindingConditionSyntaxArraySliceASTNode: OptionalBindingConditionSyntax? {
        return _asOptionalBindingConditionSyntax
    }
    var _asMemberTypeIdentifierSyntaxLiveASTNode: MemberTypeIdentifierSyntax? {
        return _asMemberTypeIdentifierSyntax
    }
    var _asMemberTypeIdentifierSyntaxArraySliceASTNode: MemberTypeIdentifierSyntax? {
        return _asMemberTypeIdentifierSyntax
    }
    var _asEnumCasePatternSyntaxLiveASTNode: EnumCasePatternSyntax? {
        return _asEnumCasePatternSyntax
    }
    var _asEnumCasePatternSyntaxArraySliceASTNode: EnumCasePatternSyntax? {
        return _asEnumCasePatternSyntax
    }
    var _asTuplePatternElementSyntaxLiveASTNode: TuplePatternElementSyntax? {
        return _asTuplePatternElementSyntax
    }
    var _asTuplePatternElementSyntaxArraySliceASTNode: TuplePatternElementSyntax? {
        return _asTuplePatternElementSyntax
    }
    var _asTernaryExprSyntaxLiveASTNode: TernaryExprSyntax? {
        return _asTernaryExprSyntax
    }
    var _asTernaryExprSyntaxArraySliceASTNode: TernaryExprSyntax? {
        return _asTernaryExprSyntax
    }
    var _asClosureCaptureItemSyntaxLiveASTNode: ClosureCaptureItemSyntax? {
        return _asClosureCaptureItemSyntax
    }
    var _asClosureCaptureItemSyntaxArraySliceASTNode: ClosureCaptureItemSyntax? {
        return _asClosureCaptureItemSyntax
    }
    var _asExpressionSegmentSyntaxLiveASTNode: ExpressionSegmentSyntax? {
        return _asExpressionSegmentSyntax
    }
    var _asExpressionSegmentSyntaxArraySliceASTNode: ExpressionSegmentSyntax? {
        return _asExpressionSegmentSyntax
    }
    var _asStringLiteralExprSyntaxLiveASTNode: StringLiteralExprSyntax? {
        return _asStringLiteralExprSyntax
    }
    var _asStringLiteralExprSyntaxArraySliceASTNode: StringLiteralExprSyntax? {
        return _asStringLiteralExprSyntax
    }
    var _asImportDeclSyntaxLiveASTNode: ImportDeclSyntax? {
        return _asImportDeclSyntax
    }
    var _asImportDeclSyntaxArraySliceASTNode: ImportDeclSyntax? {
        return _asImportDeclSyntax
    }
    var _asPatternBindingSyntaxLiveASTNode: PatternBindingSyntax? {
        return _asPatternBindingSyntax
    }
    var _asPatternBindingSyntaxArraySliceASTNode: PatternBindingSyntax? {
        return _asPatternBindingSyntax
    }
    var _asOperatorDeclSyntaxLiveASTNode: OperatorDeclSyntax? {
        return _asOperatorDeclSyntax
    }
    var _asOperatorDeclSyntaxArraySliceASTNode: OperatorDeclSyntax? {
        return _asOperatorDeclSyntax
    }
    var _asCustomAttributeSyntaxLiveASTNode: CustomAttributeSyntax? {
        return _asCustomAttributeSyntax
    }
    var _asCustomAttributeSyntaxArraySliceASTNode: CustomAttributeSyntax? {
        return _asCustomAttributeSyntax
    }
    var _asDifferentiableAttributeArgumentsSyntaxLiveASTNode: DifferentiableAttributeArgumentsSyntax? {
        return _asDifferentiableAttributeArgumentsSyntax
    }
    var _asDifferentiableAttributeArgumentsSyntaxArraySliceASTNode: DifferentiableAttributeArgumentsSyntax? {
        return _asDifferentiableAttributeArgumentsSyntax
    }
    var _asWhileStmtSyntaxLiveASTNode: WhileStmtSyntax? {
        return _asWhileStmtSyntax
    }
    var _asWhileStmtSyntaxArraySliceASTNode: WhileStmtSyntax? {
        return _asWhileStmtSyntax
    }
    var _asDoStmtSyntaxLiveASTNode: DoStmtSyntax? {
        return _asDoStmtSyntax
    }
    var _asDoStmtSyntaxArraySliceASTNode: DoStmtSyntax? {
        return _asDoStmtSyntax
    }
    var _asGenericParameterSyntaxLiveASTNode: GenericParameterSyntax? {
        return _asGenericParameterSyntax
    }
    var _asGenericParameterSyntaxArraySliceASTNode: GenericParameterSyntax? {
        return _asGenericParameterSyntax
    }
    var _asDictionaryTypeSyntaxLiveASTNode: DictionaryTypeSyntax? {
        return _asDictionaryTypeSyntax
    }
    var _asDictionaryTypeSyntaxArraySliceASTNode: DictionaryTypeSyntax? {
        return _asDictionaryTypeSyntax
    }
    var _asFunctionCallExprSyntaxLiveASTNode: FunctionCallExprSyntax? {
        return _asFunctionCallExprSyntax
    }
    var _asFunctionCallExprSyntaxArraySliceASTNode: FunctionCallExprSyntax? {
        return _asFunctionCallExprSyntax
    }
    var _asSubscriptExprSyntaxLiveASTNode: SubscriptExprSyntax? {
        return _asSubscriptExprSyntax
    }
    var _asSubscriptExprSyntaxArraySliceASTNode: SubscriptExprSyntax? {
        return _asSubscriptExprSyntax
    }
    var _asObjcSelectorExprSyntaxLiveASTNode: ObjcSelectorExprSyntax? {
        return _asObjcSelectorExprSyntax
    }
    var _asObjcSelectorExprSyntaxArraySliceASTNode: ObjcSelectorExprSyntax? {
        return _asObjcSelectorExprSyntax
    }
    var _asAttributeSyntaxLiveASTNode: AttributeSyntax? {
        return _asAttributeSyntax
    }
    var _asAttributeSyntaxArraySliceASTNode: AttributeSyntax? {
        return _asAttributeSyntax
    }
    var _asRepeatWhileStmtSyntaxLiveASTNode: RepeatWhileStmtSyntax? {
        return _asRepeatWhileStmtSyntax
    }
    var _asRepeatWhileStmtSyntaxArraySliceASTNode: RepeatWhileStmtSyntax? {
        return _asRepeatWhileStmtSyntax
    }
    var _asPoundAssertStmtSyntaxLiveASTNode: PoundAssertStmtSyntax? {
        return _asPoundAssertStmtSyntax
    }
    var _asPoundAssertStmtSyntaxArraySliceASTNode: PoundAssertStmtSyntax? {
        return _asPoundAssertStmtSyntax
    }
    var _asClosureSignatureSyntaxLiveASTNode: ClosureSignatureSyntax? {
        return _asClosureSignatureSyntax
    }
    var _asClosureSignatureSyntaxArraySliceASTNode: ClosureSignatureSyntax? {
        return _asClosureSignatureSyntax
    }
    var _asTypealiasDeclSyntaxLiveASTNode: TypealiasDeclSyntax? {
        return _asTypealiasDeclSyntax
    }
    var _asTypealiasDeclSyntaxArraySliceASTNode: TypealiasDeclSyntax? {
        return _asTypealiasDeclSyntax
    }
    var _asAssociatedtypeDeclSyntaxLiveASTNode: AssociatedtypeDeclSyntax? {
        return _asAssociatedtypeDeclSyntax
    }
    var _asAssociatedtypeDeclSyntaxArraySliceASTNode: AssociatedtypeDeclSyntax? {
        return _asAssociatedtypeDeclSyntax
    }
    var _asPoundSourceLocationArgsSyntaxLiveASTNode: PoundSourceLocationArgsSyntax? {
        return _asPoundSourceLocationArgsSyntax
    }
    var _asPoundSourceLocationArgsSyntaxArraySliceASTNode: PoundSourceLocationArgsSyntax? {
        return _asPoundSourceLocationArgsSyntax
    }
    var _asProtocolDeclSyntaxLiveASTNode: ProtocolDeclSyntax? {
        return _asProtocolDeclSyntax
    }
    var _asProtocolDeclSyntaxArraySliceASTNode: ProtocolDeclSyntax? {
        return _asProtocolDeclSyntax
    }
    var _asExtensionDeclSyntaxLiveASTNode: ExtensionDeclSyntax? {
        return _asExtensionDeclSyntax
    }
    var _asExtensionDeclSyntaxArraySliceASTNode: ExtensionDeclSyntax? {
        return _asExtensionDeclSyntax
    }
    var _asAccessorDeclSyntaxLiveASTNode: AccessorDeclSyntax? {
        return _asAccessorDeclSyntax
    }
    var _asAccessorDeclSyntaxArraySliceASTNode: AccessorDeclSyntax? {
        return _asAccessorDeclSyntax
    }
    var _asPrecedenceGroupDeclSyntaxLiveASTNode: PrecedenceGroupDeclSyntax? {
        return _asPrecedenceGroupDeclSyntax
    }
    var _asPrecedenceGroupDeclSyntaxArraySliceASTNode: PrecedenceGroupDeclSyntax? {
        return _asPrecedenceGroupDeclSyntax
    }
    var _asDerivativeRegistrationAttributeArgumentsSyntaxLiveASTNode: DerivativeRegistrationAttributeArgumentsSyntax? {
        return _asDerivativeRegistrationAttributeArgumentsSyntax
    }
    var _asDerivativeRegistrationAttributeArgumentsSyntaxArraySliceASTNode: DerivativeRegistrationAttributeArgumentsSyntax? {
        return _asDerivativeRegistrationAttributeArgumentsSyntax
    }
    var _asSwitchStmtSyntaxLiveASTNode: SwitchStmtSyntax? {
        return _asSwitchStmtSyntax
    }
    var _asSwitchStmtSyntaxArraySliceASTNode: SwitchStmtSyntax? {
        return _asSwitchStmtSyntax
    }
    var _asIfStmtSyntaxLiveASTNode: IfStmtSyntax? {
        return _asIfStmtSyntax
    }
    var _asIfStmtSyntaxArraySliceASTNode: IfStmtSyntax? {
        return _asIfStmtSyntax
    }
    var _asFunctionTypeSyntaxLiveASTNode: FunctionTypeSyntax? {
        return _asFunctionTypeSyntax
    }
    var _asFunctionTypeSyntaxArraySliceASTNode: FunctionTypeSyntax? {
        return _asFunctionTypeSyntax
    }
    var _asClassDeclSyntaxLiveASTNode: ClassDeclSyntax? {
        return _asClassDeclSyntax
    }
    var _asClassDeclSyntaxArraySliceASTNode: ClassDeclSyntax? {
        return _asClassDeclSyntax
    }
    var _asStructDeclSyntaxLiveASTNode: StructDeclSyntax? {
        return _asStructDeclSyntax
    }
    var _asStructDeclSyntaxArraySliceASTNode: StructDeclSyntax? {
        return _asStructDeclSyntax
    }
    var _asFunctionParameterSyntaxLiveASTNode: FunctionParameterSyntax? {
        return _asFunctionParameterSyntax
    }
    var _asFunctionParameterSyntaxArraySliceASTNode: FunctionParameterSyntax? {
        return _asFunctionParameterSyntax
    }
    var _asFunctionDeclSyntaxLiveASTNode: FunctionDeclSyntax? {
        return _asFunctionDeclSyntax
    }
    var _asFunctionDeclSyntaxArraySliceASTNode: FunctionDeclSyntax? {
        return _asFunctionDeclSyntax
    }
    var _asSubscriptDeclSyntaxLiveASTNode: SubscriptDeclSyntax? {
        return _asSubscriptDeclSyntax
    }
    var _asSubscriptDeclSyntaxArraySliceASTNode: SubscriptDeclSyntax? {
        return _asSubscriptDeclSyntax
    }
    var _asEnumDeclSyntaxLiveASTNode: EnumDeclSyntax? {
        return _asEnumDeclSyntax
    }
    var _asEnumDeclSyntaxArraySliceASTNode: EnumDeclSyntax? {
        return _asEnumDeclSyntax
    }
    var _asTupleTypeElementSyntaxLiveASTNode: TupleTypeElementSyntax? {
        return _asTupleTypeElementSyntax
    }
    var _asTupleTypeElementSyntaxArraySliceASTNode: TupleTypeElementSyntax? {
        return _asTupleTypeElementSyntax
    }
    var _asInitializerDeclSyntaxLiveASTNode: InitializerDeclSyntax? {
        return _asInitializerDeclSyntax
    }
    var _asInitializerDeclSyntaxArraySliceASTNode: InitializerDeclSyntax? {
        return _asInitializerDeclSyntax
    }
    var _asForInStmtSyntaxLiveASTNode: ForInStmtSyntax? {
        return _asForInStmtSyntax
    }
    var _asForInStmtSyntaxArraySliceASTNode: ForInStmtSyntax? {
        return _asForInStmtSyntax
    }
    var _asUnknownDeclSyntaxLiveASTNode: UnknownDeclSyntax? {
        return _asUnknownDeclSyntax
    }
    var _asUnknownDeclSyntaxArraySliceASTNode: UnknownDeclSyntax? {
        return _asUnknownDeclSyntax
    }
    var _asUnknownExprSyntaxLiveASTNode: UnknownExprSyntax? {
        return _asUnknownExprSyntax
    }
    var _asUnknownExprSyntaxArraySliceASTNode: UnknownExprSyntax? {
        return _asUnknownExprSyntax
    }
    var _asUnknownStmtSyntaxLiveASTNode: UnknownStmtSyntax? {
        return _asUnknownStmtSyntax
    }
    var _asUnknownStmtSyntaxArraySliceASTNode: UnknownStmtSyntax? {
        return _asUnknownStmtSyntax
    }
    var _asUnknownTypeSyntaxLiveASTNode: UnknownTypeSyntax? {
        return _asUnknownTypeSyntax
    }
    var _asUnknownTypeSyntaxArraySliceASTNode: UnknownTypeSyntax? {
        return _asUnknownTypeSyntax
    }
    var _asUnknownPatternSyntaxLiveASTNode: UnknownPatternSyntax? {
        return _asUnknownPatternSyntax
    }
    var _asUnknownPatternSyntaxArraySliceASTNode: UnknownPatternSyntax? {
        return _asUnknownPatternSyntax
    }
}

public extension AnyDeclSyntax {
    var _asIfConfigDeclSyntaxLiveASTNode: IfConfigDeclSyntax? {
        return _asIfConfigDeclSyntax
    }
    var _asIfConfigDeclSyntaxArraySliceASTNode: IfConfigDeclSyntax? {
        return _asIfConfigDeclSyntax
    }
    var _asPoundErrorDeclSyntaxLiveASTNode: PoundErrorDeclSyntax? {
        return _asPoundErrorDeclSyntax
    }
    var _asPoundErrorDeclSyntaxArraySliceASTNode: PoundErrorDeclSyntax? {
        return _asPoundErrorDeclSyntax
    }
    var _asPoundWarningDeclSyntaxLiveASTNode: PoundWarningDeclSyntax? {
        return _asPoundWarningDeclSyntax
    }
    var _asPoundWarningDeclSyntaxArraySliceASTNode: PoundWarningDeclSyntax? {
        return _asPoundWarningDeclSyntax
    }
    var _asPoundSourceLocationSyntaxLiveASTNode: PoundSourceLocationSyntax? {
        return _asPoundSourceLocationSyntax
    }
    var _asPoundSourceLocationSyntaxArraySliceASTNode: PoundSourceLocationSyntax? {
        return _asPoundSourceLocationSyntax
    }
    var _asDeinitializerDeclSyntaxLiveASTNode: DeinitializerDeclSyntax? {
        return _asDeinitializerDeclSyntax
    }
    var _asDeinitializerDeclSyntaxArraySliceASTNode: DeinitializerDeclSyntax? {
        return _asDeinitializerDeclSyntax
    }
    var _asVariableDeclSyntaxLiveASTNode: VariableDeclSyntax? {
        return _asVariableDeclSyntax
    }
    var _asVariableDeclSyntaxArraySliceASTNode: VariableDeclSyntax? {
        return _asVariableDeclSyntax
    }
    var _asEnumCaseDeclSyntaxLiveASTNode: EnumCaseDeclSyntax? {
        return _asEnumCaseDeclSyntax
    }
    var _asEnumCaseDeclSyntaxArraySliceASTNode: EnumCaseDeclSyntax? {
        return _asEnumCaseDeclSyntax
    }
    var _asImportDeclSyntaxLiveASTNode: ImportDeclSyntax? {
        return _asImportDeclSyntax
    }
    var _asImportDeclSyntaxArraySliceASTNode: ImportDeclSyntax? {
        return _asImportDeclSyntax
    }
    var _asOperatorDeclSyntaxLiveASTNode: OperatorDeclSyntax? {
        return _asOperatorDeclSyntax
    }
    var _asOperatorDeclSyntaxArraySliceASTNode: OperatorDeclSyntax? {
        return _asOperatorDeclSyntax
    }
    var _asTypealiasDeclSyntaxLiveASTNode: TypealiasDeclSyntax? {
        return _asTypealiasDeclSyntax
    }
    var _asTypealiasDeclSyntaxArraySliceASTNode: TypealiasDeclSyntax? {
        return _asTypealiasDeclSyntax
    }
    var _asAssociatedtypeDeclSyntaxLiveASTNode: AssociatedtypeDeclSyntax? {
        return _asAssociatedtypeDeclSyntax
    }
    var _asAssociatedtypeDeclSyntaxArraySliceASTNode: AssociatedtypeDeclSyntax? {
        return _asAssociatedtypeDeclSyntax
    }
    var _asProtocolDeclSyntaxLiveASTNode: ProtocolDeclSyntax? {
        return _asProtocolDeclSyntax
    }
    var _asProtocolDeclSyntaxArraySliceASTNode: ProtocolDeclSyntax? {
        return _asProtocolDeclSyntax
    }
    var _asExtensionDeclSyntaxLiveASTNode: ExtensionDeclSyntax? {
        return _asExtensionDeclSyntax
    }
    var _asExtensionDeclSyntaxArraySliceASTNode: ExtensionDeclSyntax? {
        return _asExtensionDeclSyntax
    }
    var _asAccessorDeclSyntaxLiveASTNode: AccessorDeclSyntax? {
        return _asAccessorDeclSyntax
    }
    var _asAccessorDeclSyntaxArraySliceASTNode: AccessorDeclSyntax? {
        return _asAccessorDeclSyntax
    }
    var _asPrecedenceGroupDeclSyntaxLiveASTNode: PrecedenceGroupDeclSyntax? {
        return _asPrecedenceGroupDeclSyntax
    }
    var _asPrecedenceGroupDeclSyntaxArraySliceASTNode: PrecedenceGroupDeclSyntax? {
        return _asPrecedenceGroupDeclSyntax
    }
    var _asClassDeclSyntaxLiveASTNode: ClassDeclSyntax? {
        return _asClassDeclSyntax
    }
    var _asClassDeclSyntaxArraySliceASTNode: ClassDeclSyntax? {
        return _asClassDeclSyntax
    }
    var _asStructDeclSyntaxLiveASTNode: StructDeclSyntax? {
        return _asStructDeclSyntax
    }
    var _asStructDeclSyntaxArraySliceASTNode: StructDeclSyntax? {
        return _asStructDeclSyntax
    }
    var _asFunctionDeclSyntaxLiveASTNode: FunctionDeclSyntax? {
        return _asFunctionDeclSyntax
    }
    var _asFunctionDeclSyntaxArraySliceASTNode: FunctionDeclSyntax? {
        return _asFunctionDeclSyntax
    }
    var _asSubscriptDeclSyntaxLiveASTNode: SubscriptDeclSyntax? {
        return _asSubscriptDeclSyntax
    }
    var _asSubscriptDeclSyntaxArraySliceASTNode: SubscriptDeclSyntax? {
        return _asSubscriptDeclSyntax
    }
    var _asEnumDeclSyntaxLiveASTNode: EnumDeclSyntax? {
        return _asEnumDeclSyntax
    }
    var _asEnumDeclSyntaxArraySliceASTNode: EnumDeclSyntax? {
        return _asEnumDeclSyntax
    }
    var _asInitializerDeclSyntaxLiveASTNode: InitializerDeclSyntax? {
        return _asInitializerDeclSyntax
    }
    var _asInitializerDeclSyntaxArraySliceASTNode: InitializerDeclSyntax? {
        return _asInitializerDeclSyntax
    }
    var _asUnknownDeclSyntaxLiveASTNode: UnknownDeclSyntax? {
        return _asUnknownDeclSyntax
    }
    var _asUnknownDeclSyntaxArraySliceASTNode: UnknownDeclSyntax? {
        return _asUnknownDeclSyntax
    }
}
public extension CanCastAsAnyPatternSyntax {
    var _asIfConfigDeclSyntaxLive: IfConfigDeclSyntax? {
        _asIfConfigDeclSyntax
    }
    var _asIfConfigDeclSyntaxArraySliceASTNode: IfConfigDeclSyntax? {
        _asIfConfigDeclSyntax
    }
    var _asPoundErrorDeclSyntaxLive: PoundErrorDeclSyntax? {
        _asPoundErrorDeclSyntax
    }
    var _asPoundErrorDeclSyntaxArraySliceASTNode: PoundErrorDeclSyntax? {
        _asPoundErrorDeclSyntax
    }
    var _asPoundWarningDeclSyntaxLive: PoundWarningDeclSyntax? {
        _asPoundWarningDeclSyntax
    }
    var _asPoundWarningDeclSyntaxArraySliceASTNode: PoundWarningDeclSyntax? {
        _asPoundWarningDeclSyntax
    }
    var _asPoundSourceLocationSyntaxLive: PoundSourceLocationSyntax? {
        _asPoundSourceLocationSyntax
    }
    var _asPoundSourceLocationSyntaxArraySliceASTNode: PoundSourceLocationSyntax? {
        _asPoundSourceLocationSyntax
    }
    var _asDeinitializerDeclSyntaxLive: DeinitializerDeclSyntax? {
        _asDeinitializerDeclSyntax
    }
    var _asDeinitializerDeclSyntaxArraySliceASTNode: DeinitializerDeclSyntax? {
        _asDeinitializerDeclSyntax
    }
    var _asVariableDeclSyntaxLive: VariableDeclSyntax? {
        _asVariableDeclSyntax
    }
    var _asVariableDeclSyntaxArraySliceASTNode: VariableDeclSyntax? {
        _asVariableDeclSyntax
    }
    var _asEnumCaseDeclSyntaxLive: EnumCaseDeclSyntax? {
        _asEnumCaseDeclSyntax
    }
    var _asEnumCaseDeclSyntaxArraySliceASTNode: EnumCaseDeclSyntax? {
        _asEnumCaseDeclSyntax
    }
    var _asImportDeclSyntaxLive: ImportDeclSyntax? {
        _asImportDeclSyntax
    }
    var _asImportDeclSyntaxArraySliceASTNode: ImportDeclSyntax? {
        _asImportDeclSyntax
    }
    var _asOperatorDeclSyntaxLive: OperatorDeclSyntax? {
        _asOperatorDeclSyntax
    }
    var _asOperatorDeclSyntaxArraySliceASTNode: OperatorDeclSyntax? {
        _asOperatorDeclSyntax
    }
    var _asTypealiasDeclSyntaxLive: TypealiasDeclSyntax? {
        _asTypealiasDeclSyntax
    }
    var _asTypealiasDeclSyntaxArraySliceASTNode: TypealiasDeclSyntax? {
        _asTypealiasDeclSyntax
    }
    var _asAssociatedtypeDeclSyntaxLive: AssociatedtypeDeclSyntax? {
        _asAssociatedtypeDeclSyntax
    }
    var _asAssociatedtypeDeclSyntaxArraySliceASTNode: AssociatedtypeDeclSyntax? {
        _asAssociatedtypeDeclSyntax
    }
    var _asProtocolDeclSyntaxLive: ProtocolDeclSyntax? {
        _asProtocolDeclSyntax
    }
    var _asProtocolDeclSyntaxArraySliceASTNode: ProtocolDeclSyntax? {
        _asProtocolDeclSyntax
    }
    var _asExtensionDeclSyntaxLive: ExtensionDeclSyntax? {
        _asExtensionDeclSyntax
    }
    var _asExtensionDeclSyntaxArraySliceASTNode: ExtensionDeclSyntax? {
        _asExtensionDeclSyntax
    }
    var _asAccessorDeclSyntaxLive: AccessorDeclSyntax? {
        _asAccessorDeclSyntax
    }
    var _asAccessorDeclSyntaxArraySliceASTNode: AccessorDeclSyntax? {
        _asAccessorDeclSyntax
    }
    var _asPrecedenceGroupDeclSyntaxLive: PrecedenceGroupDeclSyntax? {
        _asPrecedenceGroupDeclSyntax
    }
    var _asPrecedenceGroupDeclSyntaxArraySliceASTNode: PrecedenceGroupDeclSyntax? {
        _asPrecedenceGroupDeclSyntax
    }
    var _asClassDeclSyntaxLive: ClassDeclSyntax? {
        _asClassDeclSyntax
    }
    var _asClassDeclSyntaxArraySliceASTNode: ClassDeclSyntax? {
        _asClassDeclSyntax
    }
    var _asStructDeclSyntaxLive: StructDeclSyntax? {
        _asStructDeclSyntax
    }
    var _asStructDeclSyntaxArraySliceASTNode: StructDeclSyntax? {
        _asStructDeclSyntax
    }
    var _asFunctionDeclSyntaxLive: FunctionDeclSyntax? {
        _asFunctionDeclSyntax
    }
    var _asFunctionDeclSyntaxArraySliceASTNode: FunctionDeclSyntax? {
        _asFunctionDeclSyntax
    }
    var _asSubscriptDeclSyntaxLive: SubscriptDeclSyntax? {
        _asSubscriptDeclSyntax
    }
    var _asSubscriptDeclSyntaxArraySliceASTNode: SubscriptDeclSyntax? {
        _asSubscriptDeclSyntax
    }
    var _asEnumDeclSyntaxLive: EnumDeclSyntax? {
        _asEnumDeclSyntax
    }
    var _asEnumDeclSyntaxArraySliceASTNode: EnumDeclSyntax? {
        _asEnumDeclSyntax
    }
    var _asInitializerDeclSyntaxLive: InitializerDeclSyntax? {
        _asInitializerDeclSyntax
    }
    var _asInitializerDeclSyntaxArraySliceASTNode: InitializerDeclSyntax? {
        _asInitializerDeclSyntax
    }
    var _asUnknownDeclSyntaxLive: UnknownDeclSyntax? {
        _asUnknownDeclSyntax
    }
    var _asUnknownDeclSyntaxArraySliceASTNode: UnknownDeclSyntax? {
        _asUnknownDeclSyntax
    }
}
public extension AnyExprSyntax {
    var _asPoundColumnExprSyntaxLiveASTNode: PoundColumnExprSyntax? {
        return _asPoundColumnExprSyntax
    }
    var _asPoundColumnExprSyntaxArraySliceASTNode: PoundColumnExprSyntax? {
        return _asPoundColumnExprSyntax
    }
    var _asSuperRefExprSyntaxLiveASTNode: SuperRefExprSyntax? {
        return _asSuperRefExprSyntax
    }
    var _asSuperRefExprSyntaxArraySliceASTNode: SuperRefExprSyntax? {
        return _asSuperRefExprSyntax
    }
    var _asNilLiteralExprSyntaxLiveASTNode: NilLiteralExprSyntax? {
        return _asNilLiteralExprSyntax
    }
    var _asNilLiteralExprSyntaxArraySliceASTNode: NilLiteralExprSyntax? {
        return _asNilLiteralExprSyntax
    }
    var _asDiscardAssignmentExprSyntaxLiveASTNode: DiscardAssignmentExprSyntax? {
        return _asDiscardAssignmentExprSyntax
    }
    var _asDiscardAssignmentExprSyntaxArraySliceASTNode: DiscardAssignmentExprSyntax? {
        return _asDiscardAssignmentExprSyntax
    }
    var _asAssignmentExprSyntaxLiveASTNode: AssignmentExprSyntax? {
        return _asAssignmentExprSyntax
    }
    var _asAssignmentExprSyntaxArraySliceASTNode: AssignmentExprSyntax? {
        return _asAssignmentExprSyntax
    }
    var _asSequenceExprSyntaxLiveASTNode: SequenceExprSyntax? {
        return _asSequenceExprSyntax
    }
    var _asSequenceExprSyntaxArraySliceASTNode: SequenceExprSyntax? {
        return _asSequenceExprSyntax
    }
    var _asPoundLineExprSyntaxLiveASTNode: PoundLineExprSyntax? {
        return _asPoundLineExprSyntax
    }
    var _asPoundLineExprSyntaxArraySliceASTNode: PoundLineExprSyntax? {
        return _asPoundLineExprSyntax
    }
    var _asPoundFileExprSyntaxLiveASTNode: PoundFileExprSyntax? {
        return _asPoundFileExprSyntax
    }
    var _asPoundFileExprSyntaxArraySliceASTNode: PoundFileExprSyntax? {
        return _asPoundFileExprSyntax
    }
    var _asPoundFileIDExprSyntaxLiveASTNode: PoundFileIDExprSyntax? {
        return _asPoundFileIDExprSyntax
    }
    var _asPoundFileIDExprSyntaxArraySliceASTNode: PoundFileIDExprSyntax? {
        return _asPoundFileIDExprSyntax
    }
    var _asPoundFilePathExprSyntaxLiveASTNode: PoundFilePathExprSyntax? {
        return _asPoundFilePathExprSyntax
    }
    var _asPoundFilePathExprSyntaxArraySliceASTNode: PoundFilePathExprSyntax? {
        return _asPoundFilePathExprSyntax
    }
    var _asPoundFunctionExprSyntaxLiveASTNode: PoundFunctionExprSyntax? {
        return _asPoundFunctionExprSyntax
    }
    var _asPoundFunctionExprSyntaxArraySliceASTNode: PoundFunctionExprSyntax? {
        return _asPoundFunctionExprSyntax
    }
    var _asPoundDsohandleExprSyntaxLiveASTNode: PoundDsohandleExprSyntax? {
        return _asPoundDsohandleExprSyntax
    }
    var _asPoundDsohandleExprSyntaxArraySliceASTNode: PoundDsohandleExprSyntax? {
        return _asPoundDsohandleExprSyntax
    }
    var _asBinaryOperatorExprSyntaxLiveASTNode: BinaryOperatorExprSyntax? {
        return _asBinaryOperatorExprSyntax
    }
    var _asBinaryOperatorExprSyntaxArraySliceASTNode: BinaryOperatorExprSyntax? {
        return _asBinaryOperatorExprSyntax
    }
    var _asFloatLiteralExprSyntaxLiveASTNode: FloatLiteralExprSyntax? {
        return _asFloatLiteralExprSyntax
    }
    var _asFloatLiteralExprSyntaxArraySliceASTNode: FloatLiteralExprSyntax? {
        return _asFloatLiteralExprSyntax
    }
    var _asIntegerLiteralExprSyntaxLiveASTNode: IntegerLiteralExprSyntax? {
        return _asIntegerLiteralExprSyntax
    }
    var _asIntegerLiteralExprSyntaxArraySliceASTNode: IntegerLiteralExprSyntax? {
        return _asIntegerLiteralExprSyntax
    }
    var _asBooleanLiteralExprSyntaxLiveASTNode: BooleanLiteralExprSyntax? {
        return _asBooleanLiteralExprSyntax
    }
    var _asBooleanLiteralExprSyntaxArraySliceASTNode: BooleanLiteralExprSyntax? {
        return _asBooleanLiteralExprSyntax
    }
    var _asTypeExprSyntaxLiveASTNode: TypeExprSyntax? {
        return _asTypeExprSyntax
    }
    var _asTypeExprSyntaxArraySliceASTNode: TypeExprSyntax? {
        return _asTypeExprSyntax
    }
    var _asUnresolvedPatternExprSyntaxLiveASTNode: UnresolvedPatternExprSyntax? {
        return _asUnresolvedPatternExprSyntax
    }
    var _asUnresolvedPatternExprSyntaxArraySliceASTNode: UnresolvedPatternExprSyntax? {
        return _asUnresolvedPatternExprSyntax
    }
    var _asKeyPathBaseExprSyntaxLiveASTNode: KeyPathBaseExprSyntax? {
        return _asKeyPathBaseExprSyntax
    }
    var _asKeyPathBaseExprSyntaxArraySliceASTNode: KeyPathBaseExprSyntax? {
        return _asKeyPathBaseExprSyntax
    }
    var _asEditorPlaceholderExprSyntaxLiveASTNode: EditorPlaceholderExprSyntax? {
        return _asEditorPlaceholderExprSyntax
    }
    var _asEditorPlaceholderExprSyntaxArraySliceASTNode: EditorPlaceholderExprSyntax? {
        return _asEditorPlaceholderExprSyntax
    }
    var _asInOutExprSyntaxLiveASTNode: InOutExprSyntax? {
        return _asInOutExprSyntax
    }
    var _asInOutExprSyntaxArraySliceASTNode: InOutExprSyntax? {
        return _asInOutExprSyntax
    }
    var _asAwaitExprSyntaxLiveASTNode: AwaitExprSyntax? {
        return _asAwaitExprSyntax
    }
    var _asAwaitExprSyntaxArraySliceASTNode: AwaitExprSyntax? {
        return _asAwaitExprSyntax
    }
    var _asIdentifierExprSyntaxLiveASTNode: IdentifierExprSyntax? {
        return _asIdentifierExprSyntax
    }
    var _asIdentifierExprSyntaxArraySliceASTNode: IdentifierExprSyntax? {
        return _asIdentifierExprSyntax
    }
    var _asSymbolicReferenceExprSyntaxLiveASTNode: SymbolicReferenceExprSyntax? {
        return _asSymbolicReferenceExprSyntax
    }
    var _asSymbolicReferenceExprSyntaxArraySliceASTNode: SymbolicReferenceExprSyntax? {
        return _asSymbolicReferenceExprSyntax
    }
    var _asPrefixOperatorExprSyntaxLiveASTNode: PrefixOperatorExprSyntax? {
        return _asPrefixOperatorExprSyntax
    }
    var _asPrefixOperatorExprSyntaxArraySliceASTNode: PrefixOperatorExprSyntax? {
        return _asPrefixOperatorExprSyntax
    }
    var _asIsExprSyntaxLiveASTNode: IsExprSyntax? {
        return _asIsExprSyntax
    }
    var _asIsExprSyntaxArraySliceASTNode: IsExprSyntax? {
        return _asIsExprSyntax
    }
    var _asOptionalChainingExprSyntaxLiveASTNode: OptionalChainingExprSyntax? {
        return _asOptionalChainingExprSyntax
    }
    var _asOptionalChainingExprSyntaxArraySliceASTNode: OptionalChainingExprSyntax? {
        return _asOptionalChainingExprSyntax
    }
    var _asForcedValueExprSyntaxLiveASTNode: ForcedValueExprSyntax? {
        return _asForcedValueExprSyntax
    }
    var _asForcedValueExprSyntaxArraySliceASTNode: ForcedValueExprSyntax? {
        return _asForcedValueExprSyntax
    }
    var _asPostfixUnaryExprSyntaxLiveASTNode: PostfixUnaryExprSyntax? {
        return _asPostfixUnaryExprSyntax
    }
    var _asPostfixUnaryExprSyntaxArraySliceASTNode: PostfixUnaryExprSyntax? {
        return _asPostfixUnaryExprSyntax
    }
    var _asSpecializeExprSyntaxLiveASTNode: SpecializeExprSyntax? {
        return _asSpecializeExprSyntax
    }
    var _asSpecializeExprSyntaxArraySliceASTNode: SpecializeExprSyntax? {
        return _asSpecializeExprSyntax
    }
    var _asPostfixIfConfigExprSyntaxLiveASTNode: PostfixIfConfigExprSyntax? {
        return _asPostfixIfConfigExprSyntax
    }
    var _asPostfixIfConfigExprSyntaxArraySliceASTNode: PostfixIfConfigExprSyntax? {
        return _asPostfixIfConfigExprSyntax
    }
    var _asTryExprSyntaxLiveASTNode: TryExprSyntax? {
        return _asTryExprSyntax
    }
    var _asTryExprSyntaxArraySliceASTNode: TryExprSyntax? {
        return _asTryExprSyntax
    }
    var _asArrowExprSyntaxLiveASTNode: ArrowExprSyntax? {
        return _asArrowExprSyntax
    }
    var _asArrowExprSyntaxArraySliceASTNode: ArrowExprSyntax? {
        return _asArrowExprSyntax
    }
    var _asTupleExprSyntaxLiveASTNode: TupleExprSyntax? {
        return _asTupleExprSyntax
    }
    var _asTupleExprSyntaxArraySliceASTNode: TupleExprSyntax? {
        return _asTupleExprSyntax
    }
    var _asArrayExprSyntaxLiveASTNode: ArrayExprSyntax? {
        return _asArrayExprSyntax
    }
    var _asArrayExprSyntaxArraySliceASTNode: ArrayExprSyntax? {
        return _asArrayExprSyntax
    }
    var _asDictionaryExprSyntaxLiveASTNode: DictionaryExprSyntax? {
        return _asDictionaryExprSyntax
    }
    var _asDictionaryExprSyntaxArraySliceASTNode: DictionaryExprSyntax? {
        return _asDictionaryExprSyntax
    }
    var _asAsExprSyntaxLiveASTNode: AsExprSyntax? {
        return _asAsExprSyntax
    }
    var _asAsExprSyntaxArraySliceASTNode: AsExprSyntax? {
        return _asAsExprSyntax
    }
    var _asKeyPathExprSyntaxLiveASTNode: KeyPathExprSyntax? {
        return _asKeyPathExprSyntax
    }
    var _asKeyPathExprSyntaxArraySliceASTNode: KeyPathExprSyntax? {
        return _asKeyPathExprSyntax
    }
    var _asMemberAccessExprSyntaxLiveASTNode: MemberAccessExprSyntax? {
        return _asMemberAccessExprSyntax
    }
    var _asMemberAccessExprSyntaxArraySliceASTNode: MemberAccessExprSyntax? {
        return _asMemberAccessExprSyntax
    }
    var _asClosureExprSyntaxLiveASTNode: ClosureExprSyntax? {
        return _asClosureExprSyntax
    }
    var _asClosureExprSyntaxArraySliceASTNode: ClosureExprSyntax? {
        return _asClosureExprSyntax
    }
    var _asObjcKeyPathExprSyntaxLiveASTNode: ObjcKeyPathExprSyntax? {
        return _asObjcKeyPathExprSyntax
    }
    var _asObjcKeyPathExprSyntaxArraySliceASTNode: ObjcKeyPathExprSyntax? {
        return _asObjcKeyPathExprSyntax
    }
    var _asObjectLiteralExprSyntaxLiveASTNode: ObjectLiteralExprSyntax? {
        return _asObjectLiteralExprSyntax
    }
    var _asObjectLiteralExprSyntaxArraySliceASTNode: ObjectLiteralExprSyntax? {
        return _asObjectLiteralExprSyntax
    }
    var _asTernaryExprSyntaxLiveASTNode: TernaryExprSyntax? {
        return _asTernaryExprSyntax
    }
    var _asTernaryExprSyntaxArraySliceASTNode: TernaryExprSyntax? {
        return _asTernaryExprSyntax
    }
    var _asStringLiteralExprSyntaxLiveASTNode: StringLiteralExprSyntax? {
        return _asStringLiteralExprSyntax
    }
    var _asStringLiteralExprSyntaxArraySliceASTNode: StringLiteralExprSyntax? {
        return _asStringLiteralExprSyntax
    }
    var _asFunctionCallExprSyntaxLiveASTNode: FunctionCallExprSyntax? {
        return _asFunctionCallExprSyntax
    }
    var _asFunctionCallExprSyntaxArraySliceASTNode: FunctionCallExprSyntax? {
        return _asFunctionCallExprSyntax
    }
    var _asSubscriptExprSyntaxLiveASTNode: SubscriptExprSyntax? {
        return _asSubscriptExprSyntax
    }
    var _asSubscriptExprSyntaxArraySliceASTNode: SubscriptExprSyntax? {
        return _asSubscriptExprSyntax
    }
    var _asObjcSelectorExprSyntaxLiveASTNode: ObjcSelectorExprSyntax? {
        return _asObjcSelectorExprSyntax
    }
    var _asObjcSelectorExprSyntaxArraySliceASTNode: ObjcSelectorExprSyntax? {
        return _asObjcSelectorExprSyntax
    }
    var _asUnknownExprSyntaxLiveASTNode: UnknownExprSyntax? {
        return _asUnknownExprSyntax
    }
    var _asUnknownExprSyntaxArraySliceASTNode: UnknownExprSyntax? {
        return _asUnknownExprSyntax
    }
}
public extension CanCastAsAnyPatternSyntax {
    var _asPoundColumnExprSyntaxLive: PoundColumnExprSyntax? {
        _asPoundColumnExprSyntax
    }
    var _asPoundColumnExprSyntaxArraySliceASTNode: PoundColumnExprSyntax? {
        _asPoundColumnExprSyntax
    }
    var _asSuperRefExprSyntaxLive: SuperRefExprSyntax? {
        _asSuperRefExprSyntax
    }
    var _asSuperRefExprSyntaxArraySliceASTNode: SuperRefExprSyntax? {
        _asSuperRefExprSyntax
    }
    var _asNilLiteralExprSyntaxLive: NilLiteralExprSyntax? {
        _asNilLiteralExprSyntax
    }
    var _asNilLiteralExprSyntaxArraySliceASTNode: NilLiteralExprSyntax? {
        _asNilLiteralExprSyntax
    }
    var _asDiscardAssignmentExprSyntaxLive: DiscardAssignmentExprSyntax? {
        _asDiscardAssignmentExprSyntax
    }
    var _asDiscardAssignmentExprSyntaxArraySliceASTNode: DiscardAssignmentExprSyntax? {
        _asDiscardAssignmentExprSyntax
    }
    var _asAssignmentExprSyntaxLive: AssignmentExprSyntax? {
        _asAssignmentExprSyntax
    }
    var _asAssignmentExprSyntaxArraySliceASTNode: AssignmentExprSyntax? {
        _asAssignmentExprSyntax
    }
    var _asSequenceExprSyntaxLive: SequenceExprSyntax? {
        _asSequenceExprSyntax
    }
    var _asSequenceExprSyntaxArraySliceASTNode: SequenceExprSyntax? {
        _asSequenceExprSyntax
    }
    var _asPoundLineExprSyntaxLive: PoundLineExprSyntax? {
        _asPoundLineExprSyntax
    }
    var _asPoundLineExprSyntaxArraySliceASTNode: PoundLineExprSyntax? {
        _asPoundLineExprSyntax
    }
    var _asPoundFileExprSyntaxLive: PoundFileExprSyntax? {
        _asPoundFileExprSyntax
    }
    var _asPoundFileExprSyntaxArraySliceASTNode: PoundFileExprSyntax? {
        _asPoundFileExprSyntax
    }
    var _asPoundFileIDExprSyntaxLive: PoundFileIDExprSyntax? {
        _asPoundFileIDExprSyntax
    }
    var _asPoundFileIDExprSyntaxArraySliceASTNode: PoundFileIDExprSyntax? {
        _asPoundFileIDExprSyntax
    }
    var _asPoundFilePathExprSyntaxLive: PoundFilePathExprSyntax? {
        _asPoundFilePathExprSyntax
    }
    var _asPoundFilePathExprSyntaxArraySliceASTNode: PoundFilePathExprSyntax? {
        _asPoundFilePathExprSyntax
    }
    var _asPoundFunctionExprSyntaxLive: PoundFunctionExprSyntax? {
        _asPoundFunctionExprSyntax
    }
    var _asPoundFunctionExprSyntaxArraySliceASTNode: PoundFunctionExprSyntax? {
        _asPoundFunctionExprSyntax
    }
    var _asPoundDsohandleExprSyntaxLive: PoundDsohandleExprSyntax? {
        _asPoundDsohandleExprSyntax
    }
    var _asPoundDsohandleExprSyntaxArraySliceASTNode: PoundDsohandleExprSyntax? {
        _asPoundDsohandleExprSyntax
    }
    var _asBinaryOperatorExprSyntaxLive: BinaryOperatorExprSyntax? {
        _asBinaryOperatorExprSyntax
    }
    var _asBinaryOperatorExprSyntaxArraySliceASTNode: BinaryOperatorExprSyntax? {
        _asBinaryOperatorExprSyntax
    }
    var _asFloatLiteralExprSyntaxLive: FloatLiteralExprSyntax? {
        _asFloatLiteralExprSyntax
    }
    var _asFloatLiteralExprSyntaxArraySliceASTNode: FloatLiteralExprSyntax? {
        _asFloatLiteralExprSyntax
    }
    var _asIntegerLiteralExprSyntaxLive: IntegerLiteralExprSyntax? {
        _asIntegerLiteralExprSyntax
    }
    var _asIntegerLiteralExprSyntaxArraySliceASTNode: IntegerLiteralExprSyntax? {
        _asIntegerLiteralExprSyntax
    }
    var _asBooleanLiteralExprSyntaxLive: BooleanLiteralExprSyntax? {
        _asBooleanLiteralExprSyntax
    }
    var _asBooleanLiteralExprSyntaxArraySliceASTNode: BooleanLiteralExprSyntax? {
        _asBooleanLiteralExprSyntax
    }
    var _asTypeExprSyntaxLive: TypeExprSyntax? {
        _asTypeExprSyntax
    }
    var _asTypeExprSyntaxArraySliceASTNode: TypeExprSyntax? {
        _asTypeExprSyntax
    }
    var _asUnresolvedPatternExprSyntaxLive: UnresolvedPatternExprSyntax? {
        _asUnresolvedPatternExprSyntax
    }
    var _asUnresolvedPatternExprSyntaxArraySliceASTNode: UnresolvedPatternExprSyntax? {
        _asUnresolvedPatternExprSyntax
    }
    var _asKeyPathBaseExprSyntaxLive: KeyPathBaseExprSyntax? {
        _asKeyPathBaseExprSyntax
    }
    var _asKeyPathBaseExprSyntaxArraySliceASTNode: KeyPathBaseExprSyntax? {
        _asKeyPathBaseExprSyntax
    }
    var _asEditorPlaceholderExprSyntaxLive: EditorPlaceholderExprSyntax? {
        _asEditorPlaceholderExprSyntax
    }
    var _asEditorPlaceholderExprSyntaxArraySliceASTNode: EditorPlaceholderExprSyntax? {
        _asEditorPlaceholderExprSyntax
    }
    var _asInOutExprSyntaxLive: InOutExprSyntax? {
        _asInOutExprSyntax
    }
    var _asInOutExprSyntaxArraySliceASTNode: InOutExprSyntax? {
        _asInOutExprSyntax
    }
    var _asAwaitExprSyntaxLive: AwaitExprSyntax? {
        _asAwaitExprSyntax
    }
    var _asAwaitExprSyntaxArraySliceASTNode: AwaitExprSyntax? {
        _asAwaitExprSyntax
    }
    var _asIdentifierExprSyntaxLive: IdentifierExprSyntax? {
        _asIdentifierExprSyntax
    }
    var _asIdentifierExprSyntaxArraySliceASTNode: IdentifierExprSyntax? {
        _asIdentifierExprSyntax
    }
    var _asSymbolicReferenceExprSyntaxLive: SymbolicReferenceExprSyntax? {
        _asSymbolicReferenceExprSyntax
    }
    var _asSymbolicReferenceExprSyntaxArraySliceASTNode: SymbolicReferenceExprSyntax? {
        _asSymbolicReferenceExprSyntax
    }
    var _asPrefixOperatorExprSyntaxLive: PrefixOperatorExprSyntax? {
        _asPrefixOperatorExprSyntax
    }
    var _asPrefixOperatorExprSyntaxArraySliceASTNode: PrefixOperatorExprSyntax? {
        _asPrefixOperatorExprSyntax
    }
    var _asIsExprSyntaxLive: IsExprSyntax? {
        _asIsExprSyntax
    }
    var _asIsExprSyntaxArraySliceASTNode: IsExprSyntax? {
        _asIsExprSyntax
    }
    var _asOptionalChainingExprSyntaxLive: OptionalChainingExprSyntax? {
        _asOptionalChainingExprSyntax
    }
    var _asOptionalChainingExprSyntaxArraySliceASTNode: OptionalChainingExprSyntax? {
        _asOptionalChainingExprSyntax
    }
    var _asForcedValueExprSyntaxLive: ForcedValueExprSyntax? {
        _asForcedValueExprSyntax
    }
    var _asForcedValueExprSyntaxArraySliceASTNode: ForcedValueExprSyntax? {
        _asForcedValueExprSyntax
    }
    var _asPostfixUnaryExprSyntaxLive: PostfixUnaryExprSyntax? {
        _asPostfixUnaryExprSyntax
    }
    var _asPostfixUnaryExprSyntaxArraySliceASTNode: PostfixUnaryExprSyntax? {
        _asPostfixUnaryExprSyntax
    }
    var _asSpecializeExprSyntaxLive: SpecializeExprSyntax? {
        _asSpecializeExprSyntax
    }
    var _asSpecializeExprSyntaxArraySliceASTNode: SpecializeExprSyntax? {
        _asSpecializeExprSyntax
    }
    var _asPostfixIfConfigExprSyntaxLive: PostfixIfConfigExprSyntax? {
        _asPostfixIfConfigExprSyntax
    }
    var _asPostfixIfConfigExprSyntaxArraySliceASTNode: PostfixIfConfigExprSyntax? {
        _asPostfixIfConfigExprSyntax
    }
    var _asTryExprSyntaxLive: TryExprSyntax? {
        _asTryExprSyntax
    }
    var _asTryExprSyntaxArraySliceASTNode: TryExprSyntax? {
        _asTryExprSyntax
    }
    var _asArrowExprSyntaxLive: ArrowExprSyntax? {
        _asArrowExprSyntax
    }
    var _asArrowExprSyntaxArraySliceASTNode: ArrowExprSyntax? {
        _asArrowExprSyntax
    }
    var _asTupleExprSyntaxLive: TupleExprSyntax? {
        _asTupleExprSyntax
    }
    var _asTupleExprSyntaxArraySliceASTNode: TupleExprSyntax? {
        _asTupleExprSyntax
    }
    var _asArrayExprSyntaxLive: ArrayExprSyntax? {
        _asArrayExprSyntax
    }
    var _asArrayExprSyntaxArraySliceASTNode: ArrayExprSyntax? {
        _asArrayExprSyntax
    }
    var _asDictionaryExprSyntaxLive: DictionaryExprSyntax? {
        _asDictionaryExprSyntax
    }
    var _asDictionaryExprSyntaxArraySliceASTNode: DictionaryExprSyntax? {
        _asDictionaryExprSyntax
    }
    var _asAsExprSyntaxLive: AsExprSyntax? {
        _asAsExprSyntax
    }
    var _asAsExprSyntaxArraySliceASTNode: AsExprSyntax? {
        _asAsExprSyntax
    }
    var _asKeyPathExprSyntaxLive: KeyPathExprSyntax? {
        _asKeyPathExprSyntax
    }
    var _asKeyPathExprSyntaxArraySliceASTNode: KeyPathExprSyntax? {
        _asKeyPathExprSyntax
    }
    var _asMemberAccessExprSyntaxLive: MemberAccessExprSyntax? {
        _asMemberAccessExprSyntax
    }
    var _asMemberAccessExprSyntaxArraySliceASTNode: MemberAccessExprSyntax? {
        _asMemberAccessExprSyntax
    }
    var _asClosureExprSyntaxLive: ClosureExprSyntax? {
        _asClosureExprSyntax
    }
    var _asClosureExprSyntaxArraySliceASTNode: ClosureExprSyntax? {
        _asClosureExprSyntax
    }
    var _asObjcKeyPathExprSyntaxLive: ObjcKeyPathExprSyntax? {
        _asObjcKeyPathExprSyntax
    }
    var _asObjcKeyPathExprSyntaxArraySliceASTNode: ObjcKeyPathExprSyntax? {
        _asObjcKeyPathExprSyntax
    }
    var _asObjectLiteralExprSyntaxLive: ObjectLiteralExprSyntax? {
        _asObjectLiteralExprSyntax
    }
    var _asObjectLiteralExprSyntaxArraySliceASTNode: ObjectLiteralExprSyntax? {
        _asObjectLiteralExprSyntax
    }
    var _asTernaryExprSyntaxLive: TernaryExprSyntax? {
        _asTernaryExprSyntax
    }
    var _asTernaryExprSyntaxArraySliceASTNode: TernaryExprSyntax? {
        _asTernaryExprSyntax
    }
    var _asStringLiteralExprSyntaxLive: StringLiteralExprSyntax? {
        _asStringLiteralExprSyntax
    }
    var _asStringLiteralExprSyntaxArraySliceASTNode: StringLiteralExprSyntax? {
        _asStringLiteralExprSyntax
    }
    var _asFunctionCallExprSyntaxLive: FunctionCallExprSyntax? {
        _asFunctionCallExprSyntax
    }
    var _asFunctionCallExprSyntaxArraySliceASTNode: FunctionCallExprSyntax? {
        _asFunctionCallExprSyntax
    }
    var _asSubscriptExprSyntaxLive: SubscriptExprSyntax? {
        _asSubscriptExprSyntax
    }
    var _asSubscriptExprSyntaxArraySliceASTNode: SubscriptExprSyntax? {
        _asSubscriptExprSyntax
    }
    var _asObjcSelectorExprSyntaxLive: ObjcSelectorExprSyntax? {
        _asObjcSelectorExprSyntax
    }
    var _asObjcSelectorExprSyntaxArraySliceASTNode: ObjcSelectorExprSyntax? {
        _asObjcSelectorExprSyntax
    }
    var _asUnknownExprSyntaxLive: UnknownExprSyntax? {
        _asUnknownExprSyntax
    }
    var _asUnknownExprSyntaxArraySliceASTNode: UnknownExprSyntax? {
        _asUnknownExprSyntax
    }
}
public extension AnyStmtSyntax {
    var _asExpressionStmtSyntaxLiveASTNode: ExpressionStmtSyntax? {
        return _asExpressionStmtSyntax
    }
    var _asExpressionStmtSyntaxArraySliceASTNode: ExpressionStmtSyntax? {
        return _asExpressionStmtSyntax
    }
    var _asFallthroughStmtSyntaxLiveASTNode: FallthroughStmtSyntax? {
        return _asFallthroughStmtSyntax
    }
    var _asFallthroughStmtSyntaxArraySliceASTNode: FallthroughStmtSyntax? {
        return _asFallthroughStmtSyntax
    }
    var _asDeclarationStmtSyntaxLiveASTNode: DeclarationStmtSyntax? {
        return _asDeclarationStmtSyntax
    }
    var _asDeclarationStmtSyntaxArraySliceASTNode: DeclarationStmtSyntax? {
        return _asDeclarationStmtSyntax
    }
    var _asContinueStmtSyntaxLiveASTNode: ContinueStmtSyntax? {
        return _asContinueStmtSyntax
    }
    var _asContinueStmtSyntaxArraySliceASTNode: ContinueStmtSyntax? {
        return _asContinueStmtSyntax
    }
    var _asDeferStmtSyntaxLiveASTNode: DeferStmtSyntax? {
        return _asDeferStmtSyntax
    }
    var _asDeferStmtSyntaxArraySliceASTNode: DeferStmtSyntax? {
        return _asDeferStmtSyntax
    }
    var _asReturnStmtSyntaxLiveASTNode: ReturnStmtSyntax? {
        return _asReturnStmtSyntax
    }
    var _asReturnStmtSyntaxArraySliceASTNode: ReturnStmtSyntax? {
        return _asReturnStmtSyntax
    }
    var _asYieldStmtSyntaxLiveASTNode: YieldStmtSyntax? {
        return _asYieldStmtSyntax
    }
    var _asYieldStmtSyntaxArraySliceASTNode: YieldStmtSyntax? {
        return _asYieldStmtSyntax
    }
    var _asBreakStmtSyntaxLiveASTNode: BreakStmtSyntax? {
        return _asBreakStmtSyntax
    }
    var _asBreakStmtSyntaxArraySliceASTNode: BreakStmtSyntax? {
        return _asBreakStmtSyntax
    }
    var _asThrowStmtSyntaxLiveASTNode: ThrowStmtSyntax? {
        return _asThrowStmtSyntax
    }
    var _asThrowStmtSyntaxArraySliceASTNode: ThrowStmtSyntax? {
        return _asThrowStmtSyntax
    }
    var _asGuardStmtSyntaxLiveASTNode: GuardStmtSyntax? {
        return _asGuardStmtSyntax
    }
    var _asGuardStmtSyntaxArraySliceASTNode: GuardStmtSyntax? {
        return _asGuardStmtSyntax
    }
    var _asWhileStmtSyntaxLiveASTNode: WhileStmtSyntax? {
        return _asWhileStmtSyntax
    }
    var _asWhileStmtSyntaxArraySliceASTNode: WhileStmtSyntax? {
        return _asWhileStmtSyntax
    }
    var _asDoStmtSyntaxLiveASTNode: DoStmtSyntax? {
        return _asDoStmtSyntax
    }
    var _asDoStmtSyntaxArraySliceASTNode: DoStmtSyntax? {
        return _asDoStmtSyntax
    }
    var _asRepeatWhileStmtSyntaxLiveASTNode: RepeatWhileStmtSyntax? {
        return _asRepeatWhileStmtSyntax
    }
    var _asRepeatWhileStmtSyntaxArraySliceASTNode: RepeatWhileStmtSyntax? {
        return _asRepeatWhileStmtSyntax
    }
    var _asPoundAssertStmtSyntaxLiveASTNode: PoundAssertStmtSyntax? {
        return _asPoundAssertStmtSyntax
    }
    var _asPoundAssertStmtSyntaxArraySliceASTNode: PoundAssertStmtSyntax? {
        return _asPoundAssertStmtSyntax
    }
    var _asSwitchStmtSyntaxLiveASTNode: SwitchStmtSyntax? {
        return _asSwitchStmtSyntax
    }
    var _asSwitchStmtSyntaxArraySliceASTNode: SwitchStmtSyntax? {
        return _asSwitchStmtSyntax
    }
    var _asIfStmtSyntaxLiveASTNode: IfStmtSyntax? {
        return _asIfStmtSyntax
    }
    var _asIfStmtSyntaxArraySliceASTNode: IfStmtSyntax? {
        return _asIfStmtSyntax
    }
    var _asForInStmtSyntaxLiveASTNode: ForInStmtSyntax? {
        return _asForInStmtSyntax
    }
    var _asForInStmtSyntaxArraySliceASTNode: ForInStmtSyntax? {
        return _asForInStmtSyntax
    }
    var _asUnknownStmtSyntaxLiveASTNode: UnknownStmtSyntax? {
        return _asUnknownStmtSyntax
    }
    var _asUnknownStmtSyntaxArraySliceASTNode: UnknownStmtSyntax? {
        return _asUnknownStmtSyntax
    }
}
public extension CanCastAsAnyPatternSyntax {
    var _asExpressionStmtSyntaxLive: ExpressionStmtSyntax? {
        _asExpressionStmtSyntax
    }
    var _asExpressionStmtSyntaxArraySliceASTNode: ExpressionStmtSyntax? {
        _asExpressionStmtSyntax
    }
    var _asFallthroughStmtSyntaxLive: FallthroughStmtSyntax? {
        _asFallthroughStmtSyntax
    }
    var _asFallthroughStmtSyntaxArraySliceASTNode: FallthroughStmtSyntax? {
        _asFallthroughStmtSyntax
    }
    var _asDeclarationStmtSyntaxLive: DeclarationStmtSyntax? {
        _asDeclarationStmtSyntax
    }
    var _asDeclarationStmtSyntaxArraySliceASTNode: DeclarationStmtSyntax? {
        _asDeclarationStmtSyntax
    }
    var _asContinueStmtSyntaxLive: ContinueStmtSyntax? {
        _asContinueStmtSyntax
    }
    var _asContinueStmtSyntaxArraySliceASTNode: ContinueStmtSyntax? {
        _asContinueStmtSyntax
    }
    var _asDeferStmtSyntaxLive: DeferStmtSyntax? {
        _asDeferStmtSyntax
    }
    var _asDeferStmtSyntaxArraySliceASTNode: DeferStmtSyntax? {
        _asDeferStmtSyntax
    }
    var _asReturnStmtSyntaxLive: ReturnStmtSyntax? {
        _asReturnStmtSyntax
    }
    var _asReturnStmtSyntaxArraySliceASTNode: ReturnStmtSyntax? {
        _asReturnStmtSyntax
    }
    var _asYieldStmtSyntaxLive: YieldStmtSyntax? {
        _asYieldStmtSyntax
    }
    var _asYieldStmtSyntaxArraySliceASTNode: YieldStmtSyntax? {
        _asYieldStmtSyntax
    }
    var _asBreakStmtSyntaxLive: BreakStmtSyntax? {
        _asBreakStmtSyntax
    }
    var _asBreakStmtSyntaxArraySliceASTNode: BreakStmtSyntax? {
        _asBreakStmtSyntax
    }
    var _asThrowStmtSyntaxLive: ThrowStmtSyntax? {
        _asThrowStmtSyntax
    }
    var _asThrowStmtSyntaxArraySliceASTNode: ThrowStmtSyntax? {
        _asThrowStmtSyntax
    }
    var _asGuardStmtSyntaxLive: GuardStmtSyntax? {
        _asGuardStmtSyntax
    }
    var _asGuardStmtSyntaxArraySliceASTNode: GuardStmtSyntax? {
        _asGuardStmtSyntax
    }
    var _asWhileStmtSyntaxLive: WhileStmtSyntax? {
        _asWhileStmtSyntax
    }
    var _asWhileStmtSyntaxArraySliceASTNode: WhileStmtSyntax? {
        _asWhileStmtSyntax
    }
    var _asDoStmtSyntaxLive: DoStmtSyntax? {
        _asDoStmtSyntax
    }
    var _asDoStmtSyntaxArraySliceASTNode: DoStmtSyntax? {
        _asDoStmtSyntax
    }
    var _asRepeatWhileStmtSyntaxLive: RepeatWhileStmtSyntax? {
        _asRepeatWhileStmtSyntax
    }
    var _asRepeatWhileStmtSyntaxArraySliceASTNode: RepeatWhileStmtSyntax? {
        _asRepeatWhileStmtSyntax
    }
    var _asPoundAssertStmtSyntaxLive: PoundAssertStmtSyntax? {
        _asPoundAssertStmtSyntax
    }
    var _asPoundAssertStmtSyntaxArraySliceASTNode: PoundAssertStmtSyntax? {
        _asPoundAssertStmtSyntax
    }
    var _asSwitchStmtSyntaxLive: SwitchStmtSyntax? {
        _asSwitchStmtSyntax
    }
    var _asSwitchStmtSyntaxArraySliceASTNode: SwitchStmtSyntax? {
        _asSwitchStmtSyntax
    }
    var _asIfStmtSyntaxLive: IfStmtSyntax? {
        _asIfStmtSyntax
    }
    var _asIfStmtSyntaxArraySliceASTNode: IfStmtSyntax? {
        _asIfStmtSyntax
    }
    var _asForInStmtSyntaxLive: ForInStmtSyntax? {
        _asForInStmtSyntax
    }
    var _asForInStmtSyntaxArraySliceASTNode: ForInStmtSyntax? {
        _asForInStmtSyntax
    }
    var _asUnknownStmtSyntaxLive: UnknownStmtSyntax? {
        _asUnknownStmtSyntax
    }
    var _asUnknownStmtSyntaxArraySliceASTNode: UnknownStmtSyntax? {
        _asUnknownStmtSyntax
    }
}
public extension AnyTypeSyntax {
    var _asClassRestrictionTypeSyntaxLiveASTNode: ClassRestrictionTypeSyntax? {
        return _asClassRestrictionTypeSyntax
    }
    var _asClassRestrictionTypeSyntaxArraySliceASTNode: ClassRestrictionTypeSyntax? {
        return _asClassRestrictionTypeSyntax
    }
    var _asCompositionTypeSyntaxLiveASTNode: CompositionTypeSyntax? {
        return _asCompositionTypeSyntax
    }
    var _asCompositionTypeSyntaxArraySliceASTNode: CompositionTypeSyntax? {
        return _asCompositionTypeSyntax
    }
    var _asSimpleTypeIdentifierSyntaxLiveASTNode: SimpleTypeIdentifierSyntax? {
        return _asSimpleTypeIdentifierSyntax
    }
    var _asSimpleTypeIdentifierSyntaxArraySliceASTNode: SimpleTypeIdentifierSyntax? {
        return _asSimpleTypeIdentifierSyntax
    }
    var _asOptionalTypeSyntaxLiveASTNode: OptionalTypeSyntax? {
        return _asOptionalTypeSyntax
    }
    var _asOptionalTypeSyntaxArraySliceASTNode: OptionalTypeSyntax? {
        return _asOptionalTypeSyntax
    }
    var _asSomeTypeSyntaxLiveASTNode: SomeTypeSyntax? {
        return _asSomeTypeSyntax
    }
    var _asSomeTypeSyntaxArraySliceASTNode: SomeTypeSyntax? {
        return _asSomeTypeSyntax
    }
    var _asImplicitlyUnwrappedOptionalTypeSyntaxLiveASTNode: ImplicitlyUnwrappedOptionalTypeSyntax? {
        return _asImplicitlyUnwrappedOptionalTypeSyntax
    }
    var _asImplicitlyUnwrappedOptionalTypeSyntaxArraySliceASTNode: ImplicitlyUnwrappedOptionalTypeSyntax? {
        return _asImplicitlyUnwrappedOptionalTypeSyntax
    }
    var _asArrayTypeSyntaxLiveASTNode: ArrayTypeSyntax? {
        return _asArrayTypeSyntax
    }
    var _asArrayTypeSyntaxArraySliceASTNode: ArrayTypeSyntax? {
        return _asArrayTypeSyntax
    }
    var _asMetatypeTypeSyntaxLiveASTNode: MetatypeTypeSyntax? {
        return _asMetatypeTypeSyntax
    }
    var _asMetatypeTypeSyntaxArraySliceASTNode: MetatypeTypeSyntax? {
        return _asMetatypeTypeSyntax
    }
    var _asTupleTypeSyntaxLiveASTNode: TupleTypeSyntax? {
        return _asTupleTypeSyntax
    }
    var _asTupleTypeSyntaxArraySliceASTNode: TupleTypeSyntax? {
        return _asTupleTypeSyntax
    }
    var _asAttributedTypeSyntaxLiveASTNode: AttributedTypeSyntax? {
        return _asAttributedTypeSyntax
    }
    var _asAttributedTypeSyntaxArraySliceASTNode: AttributedTypeSyntax? {
        return _asAttributedTypeSyntax
    }
    var _asMemberTypeIdentifierSyntaxLiveASTNode: MemberTypeIdentifierSyntax? {
        return _asMemberTypeIdentifierSyntax
    }
    var _asMemberTypeIdentifierSyntaxArraySliceASTNode: MemberTypeIdentifierSyntax? {
        return _asMemberTypeIdentifierSyntax
    }
    var _asDictionaryTypeSyntaxLiveASTNode: DictionaryTypeSyntax? {
        return _asDictionaryTypeSyntax
    }
    var _asDictionaryTypeSyntaxArraySliceASTNode: DictionaryTypeSyntax? {
        return _asDictionaryTypeSyntax
    }
    var _asFunctionTypeSyntaxLiveASTNode: FunctionTypeSyntax? {
        return _asFunctionTypeSyntax
    }
    var _asFunctionTypeSyntaxArraySliceASTNode: FunctionTypeSyntax? {
        return _asFunctionTypeSyntax
    }
    var _asUnknownTypeSyntaxLiveASTNode: UnknownTypeSyntax? {
        return _asUnknownTypeSyntax
    }
    var _asUnknownTypeSyntaxArraySliceASTNode: UnknownTypeSyntax? {
        return _asUnknownTypeSyntax
    }
}
public extension CanCastAsAnyPatternSyntax {
    var _asClassRestrictionTypeSyntaxLive: ClassRestrictionTypeSyntax? {
        _asClassRestrictionTypeSyntax
    }
    var _asClassRestrictionTypeSyntaxArraySliceASTNode: ClassRestrictionTypeSyntax? {
        _asClassRestrictionTypeSyntax
    }
    var _asCompositionTypeSyntaxLive: CompositionTypeSyntax? {
        _asCompositionTypeSyntax
    }
    var _asCompositionTypeSyntaxArraySliceASTNode: CompositionTypeSyntax? {
        _asCompositionTypeSyntax
    }
    var _asSimpleTypeIdentifierSyntaxLive: SimpleTypeIdentifierSyntax? {
        _asSimpleTypeIdentifierSyntax
    }
    var _asSimpleTypeIdentifierSyntaxArraySliceASTNode: SimpleTypeIdentifierSyntax? {
        _asSimpleTypeIdentifierSyntax
    }
    var _asOptionalTypeSyntaxLive: OptionalTypeSyntax? {
        _asOptionalTypeSyntax
    }
    var _asOptionalTypeSyntaxArraySliceASTNode: OptionalTypeSyntax? {
        _asOptionalTypeSyntax
    }
    var _asSomeTypeSyntaxLive: SomeTypeSyntax? {
        _asSomeTypeSyntax
    }
    var _asSomeTypeSyntaxArraySliceASTNode: SomeTypeSyntax? {
        _asSomeTypeSyntax
    }
    var _asImplicitlyUnwrappedOptionalTypeSyntaxLive: ImplicitlyUnwrappedOptionalTypeSyntax? {
        _asImplicitlyUnwrappedOptionalTypeSyntax
    }
    var _asImplicitlyUnwrappedOptionalTypeSyntaxArraySliceASTNode: ImplicitlyUnwrappedOptionalTypeSyntax? {
        _asImplicitlyUnwrappedOptionalTypeSyntax
    }
    var _asArrayTypeSyntaxLive: ArrayTypeSyntax? {
        _asArrayTypeSyntax
    }
    var _asArrayTypeSyntaxArraySliceASTNode: ArrayTypeSyntax? {
        _asArrayTypeSyntax
    }
    var _asMetatypeTypeSyntaxLive: MetatypeTypeSyntax? {
        _asMetatypeTypeSyntax
    }
    var _asMetatypeTypeSyntaxArraySliceASTNode: MetatypeTypeSyntax? {
        _asMetatypeTypeSyntax
    }
    var _asTupleTypeSyntaxLive: TupleTypeSyntax? {
        _asTupleTypeSyntax
    }
    var _asTupleTypeSyntaxArraySliceASTNode: TupleTypeSyntax? {
        _asTupleTypeSyntax
    }
    var _asAttributedTypeSyntaxLive: AttributedTypeSyntax? {
        _asAttributedTypeSyntax
    }
    var _asAttributedTypeSyntaxArraySliceASTNode: AttributedTypeSyntax? {
        _asAttributedTypeSyntax
    }
    var _asMemberTypeIdentifierSyntaxLive: MemberTypeIdentifierSyntax? {
        _asMemberTypeIdentifierSyntax
    }
    var _asMemberTypeIdentifierSyntaxArraySliceASTNode: MemberTypeIdentifierSyntax? {
        _asMemberTypeIdentifierSyntax
    }
    var _asDictionaryTypeSyntaxLive: DictionaryTypeSyntax? {
        _asDictionaryTypeSyntax
    }
    var _asDictionaryTypeSyntaxArraySliceASTNode: DictionaryTypeSyntax? {
        _asDictionaryTypeSyntax
    }
    var _asFunctionTypeSyntaxLive: FunctionTypeSyntax? {
        _asFunctionTypeSyntax
    }
    var _asFunctionTypeSyntaxArraySliceASTNode: FunctionTypeSyntax? {
        _asFunctionTypeSyntax
    }
    var _asUnknownTypeSyntaxLive: UnknownTypeSyntax? {
        _asUnknownTypeSyntax
    }
    var _asUnknownTypeSyntaxArraySliceASTNode: UnknownTypeSyntax? {
        _asUnknownTypeSyntax
    }
}
public extension AnyPatternSyntax {
    var _asIdentifierPatternSyntaxLiveASTNode: IdentifierPatternSyntax? {
        return _asIdentifierPatternSyntax
    }
    var _asIdentifierPatternSyntaxArraySliceASTNode: IdentifierPatternSyntax? {
        return _asIdentifierPatternSyntax
    }
    var _asExpressionPatternSyntaxLiveASTNode: ExpressionPatternSyntax? {
        return _asExpressionPatternSyntax
    }
    var _asExpressionPatternSyntaxArraySliceASTNode: ExpressionPatternSyntax? {
        return _asExpressionPatternSyntax
    }
    var _asIsTypePatternSyntaxLiveASTNode: IsTypePatternSyntax? {
        return _asIsTypePatternSyntax
    }
    var _asIsTypePatternSyntaxArraySliceASTNode: IsTypePatternSyntax? {
        return _asIsTypePatternSyntax
    }
    var _asOptionalPatternSyntaxLiveASTNode: OptionalPatternSyntax? {
        return _asOptionalPatternSyntax
    }
    var _asOptionalPatternSyntaxArraySliceASTNode: OptionalPatternSyntax? {
        return _asOptionalPatternSyntax
    }
    var _asWildcardPatternSyntaxLiveASTNode: WildcardPatternSyntax? {
        return _asWildcardPatternSyntax
    }
    var _asWildcardPatternSyntaxArraySliceASTNode: WildcardPatternSyntax? {
        return _asWildcardPatternSyntax
    }
    var _asValueBindingPatternSyntaxLiveASTNode: ValueBindingPatternSyntax? {
        return _asValueBindingPatternSyntax
    }
    var _asValueBindingPatternSyntaxArraySliceASTNode: ValueBindingPatternSyntax? {
        return _asValueBindingPatternSyntax
    }
    var _asAsTypePatternSyntaxLiveASTNode: AsTypePatternSyntax? {
        return _asAsTypePatternSyntax
    }
    var _asAsTypePatternSyntaxArraySliceASTNode: AsTypePatternSyntax? {
        return _asAsTypePatternSyntax
    }
    var _asTuplePatternSyntaxLiveASTNode: TuplePatternSyntax? {
        return _asTuplePatternSyntax
    }
    var _asTuplePatternSyntaxArraySliceASTNode: TuplePatternSyntax? {
        return _asTuplePatternSyntax
    }
    var _asEnumCasePatternSyntaxLiveASTNode: EnumCasePatternSyntax? {
        return _asEnumCasePatternSyntax
    }
    var _asEnumCasePatternSyntaxArraySliceASTNode: EnumCasePatternSyntax? {
        return _asEnumCasePatternSyntax
    }
    var _asUnknownPatternSyntaxLiveASTNode: UnknownPatternSyntax? {
        return _asUnknownPatternSyntax
    }
    var _asUnknownPatternSyntaxArraySliceASTNode: UnknownPatternSyntax? {
        return _asUnknownPatternSyntax
    }
}
public extension CanCastAsAnyPatternSyntax {
    var _asIdentifierPatternSyntaxLive: IdentifierPatternSyntax? {
        _asIdentifierPatternSyntax
    }
    var _asIdentifierPatternSyntaxArraySliceASTNode: IdentifierPatternSyntax? {
        _asIdentifierPatternSyntax
    }
    var _asExpressionPatternSyntaxLive: ExpressionPatternSyntax? {
        _asExpressionPatternSyntax
    }
    var _asExpressionPatternSyntaxArraySliceASTNode: ExpressionPatternSyntax? {
        _asExpressionPatternSyntax
    }
    var _asIsTypePatternSyntaxLive: IsTypePatternSyntax? {
        _asIsTypePatternSyntax
    }
    var _asIsTypePatternSyntaxArraySliceASTNode: IsTypePatternSyntax? {
        _asIsTypePatternSyntax
    }
    var _asOptionalPatternSyntaxLive: OptionalPatternSyntax? {
        _asOptionalPatternSyntax
    }
    var _asOptionalPatternSyntaxArraySliceASTNode: OptionalPatternSyntax? {
        _asOptionalPatternSyntax
    }
    var _asWildcardPatternSyntaxLive: WildcardPatternSyntax? {
        _asWildcardPatternSyntax
    }
    var _asWildcardPatternSyntaxArraySliceASTNode: WildcardPatternSyntax? {
        _asWildcardPatternSyntax
    }
    var _asValueBindingPatternSyntaxLive: ValueBindingPatternSyntax? {
        _asValueBindingPatternSyntax
    }
    var _asValueBindingPatternSyntaxArraySliceASTNode: ValueBindingPatternSyntax? {
        _asValueBindingPatternSyntax
    }
    var _asAsTypePatternSyntaxLive: AsTypePatternSyntax? {
        _asAsTypePatternSyntax
    }
    var _asAsTypePatternSyntaxArraySliceASTNode: AsTypePatternSyntax? {
        _asAsTypePatternSyntax
    }
    var _asTuplePatternSyntaxLive: TuplePatternSyntax? {
        _asTuplePatternSyntax
    }
    var _asTuplePatternSyntaxArraySliceASTNode: TuplePatternSyntax? {
        _asTuplePatternSyntax
    }
    var _asEnumCasePatternSyntaxLive: EnumCasePatternSyntax? {
        _asEnumCasePatternSyntax
    }
    var _asEnumCasePatternSyntaxArraySliceASTNode: EnumCasePatternSyntax? {
        _asEnumCasePatternSyntax
    }
    var _asUnknownPatternSyntaxLive: UnknownPatternSyntax? {
        _asUnknownPatternSyntax
    }
    var _asUnknownPatternSyntaxArraySliceASTNode: UnknownPatternSyntax? {
        _asUnknownPatternSyntax
    }
}
