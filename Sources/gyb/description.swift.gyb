%{
  from gyb_syntax_support import *
  # -*- mode: Swift -*-
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//
//  description.swift
//
//  Created by Joseph Hinkle on 3/28/21.
//  Copyright Â© 2021 App Maker Software LLC. All rights reserved.
//
//  DO NOT EDIT .swift file, it is automatically generated from the gyb file
//
%{
    # note: not all nodes are found in SYNTAX_NODES for some reason. Check the python files (not included in project but are in the directory) for more info
        
    def nodeTypeId(node):
        if node.collection_element_name == "":
            if node.name == "TokenSyntax":
                return 0
            elif len(node.children) == 0:
                return 254
            else:
                count = len(node.children)
                return 1 + count
        else:
            return 1
            
    # sort them
    sortedNodes = sorted(list(SYNTAX_NODES),key=lambda x:nodeTypeId(x))
                    
    def nodeToTypeNameOrAnyOfType(node):
        if node.collection_element_type == "Syntax":
            return "AnySyntaxStub"
        elif node.is_base():
            return "Any" + node.name + "Stub"
        elif node.base_kind != "Syntax" and node.base_kind != "SyntaxCollection":
            return "Any" + node.base_kind + "Stub"
        else:
            return node.collection_element_type
    
    baseKinds = []
    for node in SYNTAX_NODES:
        if node.is_base():
            baseKinds.append(node.name)
    
    def childToTypeNameOrAnyOfType(child):
        if child.type_name == "Syntax":
            return "AnySyntaxStub"
        elif child.type_name in baseKinds:
            return "Any" + child.type_name + "Stub"
        else:
            return child.type_name
            
    def nodeToTypeNameOrAnyOfType(node):
        if node.collection_element_type == "Syntax":
            return "AnySyntax"
        elif node.collection_element_type in baseKinds:
            return "Any" + node.collection_element_type
        else:
            return node.collection_element_type
                
    def childToTypeNameOrAnyOfType(child):
        if child.type_name == "Syntax":
            return "AnySyntax"
        elif child.type_name in baseKinds:
            return "Any" + child.type_name
        else:
            return child.type_name
    
        
}%
#if DEBUG
import Foundation

// All Syntax Type Wrappers, DEBUG ONLY
public let allSyntaxWrappers: [UInt8 : String] = [
    0 : "TokenSyntax",
% count1 = 0
% for node in sortedNodes:
% if not node.is_base():
% count1 = count1 + 1
    ${count1} : "${node.name}",
% end
% end
]
extension Array where Element == UInt8 {
    /// Showing possible types, DEBUG ONLY
    func types() {
        for (i, el) in self.enumerated() {
            let type = allSyntaxWrappers[el]
            let possibleTypeString = type != nil ? String(describing: type!) : ""
            print("- \(i) : \(el) (could be \(possibleTypeString))")
        }
    }
    /// Showing possible tree, DEBUG ONLY
    public func tree() {
        var offset = 0
        node_tree(data: self, offset: &offset)
    }
    /// DEBUG ONLY
    public func tree(after: Int) {
        var offset = after
        node_tree(data: self, offset: &offset)
    }
}
/// DEBUG ONLY
private func printAtOffset(_ offset: Int,_ el: UInt8,_ message: String) {
    if String(offset).count == 1 {
        let firstPart = "- \(offset)|  \(el)"
        let spacing = String(repeating: " ", count: 10 - firstPart.count)
        print("\(firstPart)\(spacing): \(message)")
    } else if String(offset).count == 2 {
        let firstPart = "- \(offset)| \(el)"
        let spacing = String(repeating: " ", count: 10 - firstPart.count)
        print("\(firstPart)\(spacing): \(message)")
    } else {
        let firstPart = "- \(offset)|\(el)"
        let spacing = String(repeating: " ", count: 10 - firstPart.count)
        print("\(firstPart)\(spacing): \(message)")
    }
}
/// Showing possible tree, DEBUG ONLY
func node_tree(data: [UInt8], offset: inout Int) {
    while offset < data.count {
        let el = data[offset]
        if el == 255 {
            printAtOffset(offset,el,"nil")
            offset += 1
            continue
        }
        let typeName = allSyntaxWrappers[el]
        let possibleTypeString = typeName != nil ? typeName! : "error"
        printAtOffset(offset,el,"\(possibleTypeString)")
        let bodyType = syntaxTypeToBodyType(syntaxType: data[offset])
        if bodyType == 0 {
            offset += 1
            let numFirstOffset = offset
            guard let sizeOfStringNumber = uncompressNumber(from: data, at: &offset, direction: 1) else {
                print("error! could not get the size of the string which should be stored at index \(offset)")
                return
            }
            printAtOffset(offset,data[numFirstOffset],"  - text size = \(sizeOfStringNumber)")
            for i in 0..<sizeOfStringNumber {
                offset += 1
                let el = data[offset]
                let strData = Data([el])
                let char = String(data: strData, encoding: .utf8)!
                printAtOffset(offset,data[offset],"    - [\(i)] = \(char)")
            }
        } else if bodyType == 1 {
            offset += 1
            let numFirstOffset = offset
            guard let elementCount = uncompressNumber(from: data, at: &offset, direction: 1) else {
                print("error! could not get the count of the list elements which should be stored at index \(offset)")
                return
            }
            printAtOffset(offset,data[numFirstOffset],"  - elements count = \(elementCount)")
            if elementCount > 1 {
                for i in 1..<elementCount {
                    offset += 1
                    let numElPointerOffset = offset
                    guard let offsetForEl = uncompressNumber(from: data, at: &offset, direction: 1) else {
                        print("error! could not get the offset of element \(i) at index \(offset)")
                        return
                    }
                    printAtOffset(offset,data[numElPointerOffset],"    - element \(i) offset = \(offsetForEl)")
                }
            }
        } else {
            let numberOfProperties = bodyType - 1
            if numberOfProperties > 1 {
                for i in 1..<numberOfProperties {
                    offset += 1
                    let numPropPointerOffset = offset
                    guard let offsetForProp = uncompressNumber(from: data, at: &offset, direction: 1) else {
                        print("error! could not get the offset of property number \(i) at index \(offset)")
                        return
                    }
                    if offsetForProp == 0 {
                        printAtOffset(offset,data[numPropPointerOffset],"    - property #\(i) offset = nil")
                    } else {
                        printAtOffset(offset,data[numPropPointerOffset],"    - property #\(i) offset = \(offsetForProp)")
                    }
                }
            }
        }
        offset += 1
    }
}

#endif
